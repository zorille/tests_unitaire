<?php
namespace Zorille\framework;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-26 at 11:02:25.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class calculateurTest extends MockedListeOptions {
	/**
     * @var calculateur
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = new calculateur ( false, 'TESTS calculateur' );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers Zorille\framework\calculateur::compare_valeur
     */
	public function testCompare_valeur_Pas_de_machine_qui_supporte() {
		$this->object->setMaxCPUJob ( 3 )
			->setDiskSpace ( 1150 )
			->setMaxRamJob ( 30 );
		$this->assertEquals ( - 1, $this->object->compare_valeur ( 20, 1200, 2 ) );
	}

	/**
	 * @covers Zorille\framework\calculateur::compare_valeur
	 */
	public function testCompare_valeur_False() {
		$this->object->setMaxCPUJob ( 3 )
			->setDiskSpace ( 1150 )
			->setMaxRamJob ( 30 );
		$this->assertFalse ( $this->object->compare_valeur ( 20, 1100, 2 ) );
	}

	/**
	 * @covers Zorille\framework\calculateur::compare_valeur
	 */
	public function testCompare_valeur_True() {
		$this->object->setMaxCPUJob ( 3 )
			->setRamSpace ( 512 )
			->setDiskSpace ( 1150 )
			->setMaxRamJob ( 30 )
			->setCPUUnit ( 4 );
		
		$this->assertTrue ( $this->object->compare_valeur ( 20, 1100, 2 ) );
	}

	/**
     * @covers Zorille\framework\calculateur::compare_maxcpu
     */
	public function testCompare_maxcpu_false() {
		$this->object->setMaxCPUJob ( 1 );
		$this->assertFalse ( $this->object->compare_maxcpu ( 2 ) );
	}

	/**
	 * @covers Zorille\framework\calculateur::compare_maxcpu
	 */
	public function testCompare_maxcpu_true() {
		$this->object->setMaxCPUJob ( 3 );
		$this->assertTrue ( $this->object->compare_maxcpu ( 2 ) );
	}

	/**
     * @covers Zorille\framework\calculateur::compare_diskspace
     */
	public function testCompare_diskspace_False() {
		$this->object->setDiskSpace ( 1150 );
		$this->assertFalse ( $this->object->compare_diskspace ( 1200 ) );
	}

	/**
	 * @covers Zorille\framework\calculateur::compare_diskspace
	 */
	public function testCompare_diskspace_True() {
		$this->object->setDiskSpace ( 1150 );
		$this->assertTrue ( $this->object->compare_diskspace ( 1100 ) );
	}

	/**
     * @covers Zorille\framework\calculateur::compare_maxram
     */
	public function testCompare_maxram_False() {
		$this->object->setMaxRamJob ( 15 );
		$this->assertFalse ( $this->object->compare_maxram ( 20 ) );
	}

	/**
	 * @covers Zorille\framework\calculateur::compare_maxram
	 */
	public function testCompare_maxram_True() {
		$this->object->setMaxRamJob ( 30 );
		$this->assertTrue ( $this->object->compare_maxram ( 20 ) );
	}

	/**
     * @covers Zorille\framework\calculateur::compare_nbjob
     */
	public function testCompare_nbjob_False() {
		$this->object->setAddUsed ( "NBJob", 10 )
			->setMaxNbJob ( 5 );
		$this->assertFalse ( $this->object->compare_nbjob () );
	}

	/**
	 * @covers Zorille\framework\calculateur::compare_nbjob
	 */
	public function testCompare_nbjob_True() {
		$this->object->setAddUsed ( "NBJob", 10 )
			->setMaxNbJob ( 15 );
		$this->assertTrue ( $this->object->compare_nbjob () );
	}

	/**
     * @covers Zorille\framework\calculateur::utilise_puissance_calculateur
     */
	public function testUtilise_puissance_calculateur() {
		$this->object->setMaxCPUJob ( 3 )
			->setRamSpace ( 512 )
			->setDiskSpace ( 1150 )
			->setMaxRamJob ( 30 )
			->setCPUUnit ( 4 );
		
		$this->assertTrue ( $this->object->utilise_puissance_calculateur ( 20, 1100, 2 ) );
	}

	/**
     * @covers Zorille\framework\calculateur::libere_puissance_calculateur
     */
	public function testLibere_puissance_calculateur_False() {
		$this->assertFalse ( $this->object->libere_puissance_calculateur ( 20, 1100, 2 ) );
	}

	/**
	 * @covers Zorille\framework\calculateur::libere_puissance_calculateur
	 */
	public function testLibere_puissance_calculateur_True() {
		$this->object->setMaxCPUJob ( 3 )
			->setRamSpace ( 512 )
			->setDiskSpace ( 1150 )
			->setMaxRamJob ( 30 )
			->setCPUUnit ( 4 )
			->setAddUsed ( "NBJob", 10 );
		
		$this->assertTrue ( $this->object->libere_puissance_calculateur ( 20, 1100, 2 ) );
	}

	/**
     * @covers Zorille\framework\calculateur::renvoi_donnees_machine
     */
	public function testrenvoi_donnees_machine_False() {
		$this->assertFalse ( $this->object->renvoi_donnees_machine ("") );
	}
	
	/**
	 * @covers Zorille\framework\calculateur::renvoi_donnees_machine
	 */
	public function testrenvoi_donnees_machine_Nom() {
		$this->object->setNom("NOM1");
		$this->assertEquals ( "NOM1", $this->object->renvoi_donnees_machine ("Name") );
	}
	
	/**
	 * @covers Zorille\framework\calculateur::renvoi_donnees_machine
	 */
	public function testrenvoi_donnees_machine_NetName() {
		$this->object->setNetName("NetName1");
		$this->assertEquals ( "NetName1", $this->object->renvoi_donnees_machine ("NetName") );
	}
	
	/**
	 * @covers Zorille\framework\calculateur::renvoi_donnees_machine
	 */
	public function testrenvoi_donnees_machine_MaxNbJob() {
		$this->object->setMaxNbJob(25);
		$this->assertEquals ( 25, $this->object->renvoi_donnees_machine ("MaxNbJob") );
	}

	/**
     * @covers Zorille\framework\calculateur::renvoi_nb_job_en_cours
     */
	public function testrenvoi_nb_job_en_cours_defaut() {
		$this->assertEquals ( 0, $this->object->renvoi_nb_job_en_cours () );
	}

	/**
	 * @covers Zorille\framework\calculateur::renvoi_nb_job_en_cours
	 */
	public function testrenvoi_nb_job_en_cours_valeur() {
		$this->object->setAddUsed ( "NBJob", 10 );
		$this->assertEquals ( 10, $this->object->renvoi_nb_job_en_cours () );
	}
}
