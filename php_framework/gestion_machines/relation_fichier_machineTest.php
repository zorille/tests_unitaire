<?php
namespace Zorille\framework;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-26 at 11:02:26.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class relation_fichier_machineTest extends MockedListeOptions {
	/**
     * @var relation_fichier_machine
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = new relation_fichier_machine ( false, 'TESTS relation_fichier_machine' );
		$this->object->setListeOptions ( $this->getListeOption () );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * @covers Zorille\framework\relation_fichier_machine::prepare_variables_machines
	 */
	public function testprepare_variables_machines() {
		$this->object->getListeOptions ()
			->expects ( $this->any () )
			->method ( 'prepare_variable_standard' )
			->will ( $this->returnValue ( $this->object->getListeOptions () ) );
		$this->assertSame ( $this->object, $this->object->prepare_variables_machines ( "test" ) );
	}

	/**
	 * @covers Zorille\framework\relation_fichier_machine::recupere_variables_par_machine
	 */
	public function testrecupere_variables_par_machine_False() {
		$this->assertFalse ( $this->object->recupere_variables_par_machine ( "MACHINE1", "TYPE", false ) );
	}

	/**
	 * @covers Zorille\framework\relation_fichier_machine::recupere_variables_par_machine
	 */
	public function testrecupere_variables_par_machine_True() {
		$this->assertTrue ( $this->object->recupere_variables_par_machine ( "MACHINE1", "TYPE", "/.*/" ) );
	}

	/**
	 * @covers Zorille\framework\relation_fichier_machine::structure_variable_machines
	 */
	public function teststructure_variable_machines_false() {
		$this->object->getListeOptions ()
			->expects ( $this->any () )
			->method ( 'prepare_variable_standard' )
			->will ( $this->returnValue ( false ) );
		$this->object->getListeOptions ()
			->expects ( $this->any () )
			->method ( 'getOption' )
			->will ( $this->returnValue ( "TYPE2" ) );
		$structure_fichier = array (
				"type" => "TYPE1" 
		);
		$this->object->setStructureFichier ( $structure_fichier );
		$this->assertFalse ( $this->object->structure_variable_machines ( "MACHINE1" ) );
	}

	/**
	 * @covers Zorille\framework\relation_fichier_machine::structure_variable_machines
	 */
	public function teststructure_variable_machines() {
		$this->object->getListeOptions ()
			->expects ( $this->any () )
			->method ( 'prepare_variable_standard' )
			->will ( $this->onConsecutiveCalls ( false, false ) );
		$this->object->getListeOptions ()
			->expects ( $this->any () )
			->method ( 'getOption' )
			->will ( $this->onConsecutiveCalls ( "TYPE1", "/.*/" ) );
		$structure_fichier = array (
				"nom" => "MACHINE2",
				"type" => "TYPE1" 
		);
		$this->object->setStructureFichier ( $structure_fichier );
		$this->assertTrue ( $this->object->structure_variable_machines ( "MACHINE1" ) );
	}

	/**
	 * @covers Zorille\framework\relation_fichier_machine::remplace_donnees_standard
	 */
	public function testremplace_donnees_standard_nom_fichier_force() {
		$this->object->getListeOptions ()
			->expects ( $this->any () )
			->method ( 'verifie_option_existe' )
			->will ( $this->returnValue ( true ) );
		$this->object->getListeOptions ()
			->expects ( $this->any () )
			->method ( 'getOption' )
			->will ( $this->returnValue ( "NOM1" ) );
		$liste_machines = array (
				array (
						"nom_source" => "MACHINE1",
						"dossier_source" => "DOSSIER",
						"netname_source" => "NETNAME" 
				) 
		);
		$this->object->setListeMachines ( $liste_machines );
		
		$this->assertSame ( $this->object, $this->object->remplace_donnees_standard () );
		$this->assertEquals ( array (
				array (
						"nom_source" => "MACHINE1",
						"dossier_source" => "DOSSIER",
						"netname_source" => "NETNAME",
						'nom' => 'NOM1',
						'dossier' => 'DOSSIER',
						'netname'=>'NETNAME'
				) 
		), $this->object->getListeMachines () );
	}

	/**
	 * @covers Zorille\framework\relation_fichier_machine::remplace_donnees_standard
	 */
	public function testremplace_donnees_standard() {
		$this->object->getListeOptions ()
			->expects ( $this->any () )
			->method ( 'verifie_option_existe' )
			->will ( $this->returnValue ( false ) );
		$liste_machines = array (
				array (
						"nom_source" => "MACHINE1",
						"dossier_source" => "DOSSIER",
						"netname_source" => "not_used" 
				) 
		);
		$this->object->setListeMachines ( $liste_machines );
		
		$this->assertSame ( $this->object, $this->object->remplace_donnees_standard () );
		$this->assertEquals ( array (
				array (
						"nom_source" => "MACHINE1",
						"dossier_source" => "DOSSIER",
						"netname_source" => "not_used",
						'nom' => 'MACHINE1',
						'dossier' => 'DOSSIER' 
				) 
		), $this->object->getListeMachines () );
	}

	/**
	 * @covers Zorille\framework\relation_fichier_machine::verifie_surcharge_global
	 */
	public function testverifie_surcharge_global() {
		$this->object->getListeOptions ()
			->expects ( $this->any () )
			->method ( 'verifie_option_existe' )
			->will ( $this->returnValue ( true ) );
		$this->object->getListeOptions ()
			->expects ( $this->any () )
			->method ( 'getOption' )
			->will ( $this->returnValue ( "TYPE1" ) );
		$liste_machines = array (
				array (
						"nom_source" => "MACHINE1",
						"dossier_source" => "DOSSIER",
						"netname_source" => "not_used" 
				) 
		);
		$this->object->setListeMachines ( $liste_machines );
		$this->assertSame ( $this->object, $this->object->verifie_surcharge_global () );
		$this->assertEquals ( array (
				array (
						"nom_source" => "MACHINE1",
						"dossier_source" => "DOSSIER",
						"netname_source" => "not_used",
						'type_connexion' => 'TYPE1' 
				) 
		), $this->object->getListeMachines () );
	}

	/**
     * @covers Zorille\framework\relation_fichier_machine::prepare_liste_machine
     */
	public function testPrepare_liste_machine_False() {
		$this->object->getListeOptions ()
			->expects ( $this->any () )
			->method ( 'verifie_option_existe' )
			->will ( $this->returnValue ( false ) );
		$structure_fichier = array (
				"type" => "TYPE1" 
		);
		$this->object->setStructureFichier ( $structure_fichier );
		$this->assertFalse ( $this->object->prepare_liste_machine ( "MACHINE1", "20101127" ) );
	}

	/**
	 * @covers Zorille\framework\relation_fichier_machine::prepare_liste_machine
	 */
	public function testPrepare_liste_machine_CLI() {
		$this->object->getListeOptions ()
			->expects ( $this->any () )
			->method ( 'verifie_option_existe' )
			->will ( $this->returnValue ( true ) );
		$this->object->getListeOptions ()
			->expects ( $this->any () )
			->method ( 'getOption' )
			->will ( $this->returnValue ( "MACHINE1 MACHINE2" ) );
		
		$this->assertFalse ( $this->object->prepare_liste_machine ( "MACHINE1", "20101127" ) );
	}

	/**
	 * @covers Zorille\framework\relation_fichier_machine::prepare_liste_machine
	 */
	public function testPrepare_liste_machine_xml() {
		$this->object->getListeOptions ()
			->expects ( $this->any () )
			->method ( 'verifie_option_existe' )
			->will ( $this->onConsecutiveCalls ( false, true, false, false, false, false, false, false, false ) );
		$this->object->getListeOptions ()
			->expects ( $this->any () )
			->method ( 'getOption' )
			->will ( $this->returnValue ( array (
				"MACHINE1",
				"MACHINE2" 
		) ) );
		$liste_machines = array (
				array (
						"nom_source" => "MACHINE1",
						"dossier_source" => "DOSSIER",
						"netname_source" => "not_used" 
				) 
		);
		$this->object->setListeMachines ( $liste_machines );
		
		$this->assertTrue ( $this->object->prepare_liste_machine ( "MACHINE1", "20101127" ) );
	}

	/**
     * @covers Zorille\framework\relation_fichier_machine::renvoi_parametre_machine
     */
	public function testrenvoi_parametre_machine_False() {
		$this->assertFalse ( $this->object->renvoi_parametre_machine ( "nom_source", 0 ) );
	}

	/**
	 * @covers Zorille\framework\relation_fichier_machine::renvoi_parametre_machine
	 */
	public function testrenvoi_parametre_machine_Valide() {
		$liste_machines = array (
				array (
						"nom_source" => "MACHINE1",
						"dossier_source" => "DOSSIER",
						"netname_source" => "not_used" 
				) 
		);
		$this->object->setListeMachines ( $liste_machines );
		$this->assertEquals ( 'MACHINE1', $this->object->renvoi_parametre_machine ( "nom_source", 0 ) );
	}

	/**
     * @covers Zorille\framework\relation_fichier_machine::modifie_donnees_structure_machine
     */
	public function testModifie_donnees_structure_machine_False() {
		$this->assertFalse ( $this->object->modifie_donnees_structure_machine ( "nom_source","TEST1", 0 ) );
	}
	
	/**
	 * @covers Zorille\framework\relation_fichier_machine::modifie_donnees_structure_machine
	 */
	public function testModifie_donnees_structure_machine_valide() {
		$liste_machines = array (
				array (
						"nom_source" => "MACHINE1",
						"dossier_source" => "DOSSIER",
						"netname_source" => "not_used"
				)
		);
		$this->object->setListeMachines ( $liste_machines );
		$this->assertSame ( $this->object, $this->object->modifie_donnees_structure_machine ( "champ1","TEST1", 0 ) );
		$this->assertEquals ( array (
				array (
						"nom_source" => "MACHINE1",
						"dossier_source" => "DOSSIER",
						"netname_source" => "not_used",
						'champ1' => 'TEST1'
				)
		), $this->object->getListeMachines () );
	}

	/**
     * @covers Zorille\framework\relation_fichier_machine::affiche_donnees_machine
     */
	public function testAffiche_donnees_machine() {
		$this->assertSame ( $this->object, $this->object->affiche_donnees_machine ( 1 ) );
	}
}
