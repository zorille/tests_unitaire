<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-26 at 11:02:26.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class calculateursTest extends MockedListeOptions {
	/**
     * @var calculateurs
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = new calculateurs ( false, 'TESTS calculateurs' );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers calculateurs::charge_liste_calculateurs
     */
	public function testCharge_liste_calculateurs_Exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS calculateurs) Pas de calculateurs dans la liste' );
		$this->object ->charge_liste_calculateurs ( "" );
	}

	/**
	 * @covers calculateurs::charge_liste_calculateurs
	 */
	public function testCharge_liste_calculateurs_Exception2() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS calculateurs) Pas de calculateurs dans la liste des machines' );
		$this->object ->charge_liste_calculateurs ( array ( 
				array ( 
						"NetName" => "" ) ) );
	}

	/**
	 * @covers calculateurs::charge_liste_calculateurs
	 */
	public function testCharge_liste_calculateurs_Valide() {
		$calculateur = $this ->createMock ( "calculateur" );
		$calculateur ->expects ( $this ->any () ) 
			->method ( 'setNom' ) 
			->will ( $this ->returnValue ( $calculateur ) );
		$calculateur ->expects ( $this ->any () ) 
			->method ( 'setNetName' ) 
			->will ( $this ->returnValue ( $calculateur ) );
		$calculateur ->expects ( $this ->any () ) 
			->method ( 'setIP' ) 
			->will ( $this ->returnValue ( $calculateur ) );
		$calculateur ->expects ( $this ->any () ) 
			->method ( 'setUsername' ) 
			->will ( $this ->returnValue ( $calculateur ) );
		$calculateur ->expects ( $this ->any () ) 
			->method ( 'setPassword' ) 
			->will ( $this ->returnValue ( $calculateur ) );
		$calculateur ->expects ( $this ->any () ) 
			->method ( 'setFTPPassword' ) 
			->will ( $this ->returnValue ( $calculateur ) );
		$calculateur ->expects ( $this ->any () ) 
			->method ( 'setDiskSpace' ) 
			->will ( $this ->returnValue ( $calculateur ) );
		$calculateur ->expects ( $this ->any () ) 
			->method ( 'setRamSpace' ) 
			->will ( $this ->returnValue ( $calculateur ) );
		$calculateur ->expects ( $this ->any () ) 
			->method ( 'setMaxRamJob' ) 
			->will ( $this ->returnValue ( $calculateur ) );
		$calculateur ->expects ( $this ->any () ) 
			->method ( 'setCPUUnit' ) 
			->will ( $this ->returnValue ( $calculateur ) );
		$calculateur ->expects ( $this ->any () ) 
			->method ( 'setMinCPUJob' ) 
			->will ( $this ->returnValue ( $calculateur ) );
		$calculateur ->expects ( $this ->any () ) 
			->method ( 'setMaxCPUJob' ) 
			->will ( $this ->returnValue ( $calculateur ) );
		$calculateur ->expects ( $this ->any () ) 
			->method ( 'setMaxNbJob' ) 
			->will ( $this ->returnValue ( $calculateur ) );
		$this->object ->setObjetCalculateurRef ( $calculateur );
		$this ->assertSame ( 
				$this->object, 
					$this->object ->charge_liste_calculateurs ( 
							array ( 
										array ( 
												"NetName" => "TEST", 
												"Name" => "NAME", 
												"NetName" => "NETNAME", 
												"IP" => "0.0.0.0", 
												"Username" => "USER", 
												"Password" => "PASS", 
												"FTPPassword" => "FTPPASS", 
												"DiskSpace" => 1200, 
												"RamSpace" => 512, 
												"MaxRamJob" => 20, 
												"CPUUnit" => 8, 
												"MinCPUJob" => 1, 
												"MaxCPUJob" => 10, 
												"MaxNbJob" => 30 ) ) ) );
		
		$this ->assertEquals ( array ( 
				'NAME' => 0 ), $this->object ->getMachineId () );
	}

	/**
     * @covers calculateurs::renvoi_liste_machine
     */
	public function testrenvoi_liste_machine() {
		$calculateur1 = $this ->createMock ( "calculateur" );
		$calculateur1 ->expects ( $this ->any () ) 
			->method ( 'renvoi_donnees_machine' ) 
			->will ( $this ->returnValue ( "DATA1" ) );
		$calculateur2 = $this ->createMock ( "calculateur" );
		$calculateur2 ->expects ( $this ->any () ) 
			->method ( 'renvoi_donnees_machine' ) 
			->will ( $this ->returnValue ( "DATA2" ) );
		$this->object ->setListeMachine ( array ( 
				$calculateur1, 
				$calculateur2 ) );
		$this ->assertEquals ( array ( 
				'DATA1', 
				'DATA2' ), $this->object ->renvoi_liste_machine () );
	}

	/**
     * @covers calculateurs::renvoi_liste_machine_aleatoire
     */
	public function testrenvoi_liste_machine_aleatoire() {
		$calculateur1 = $this ->createMock ( "calculateur" );
		$calculateur1 ->expects ( $this ->any () ) 
			->method ( 'renvoi_donnees_machine' ) 
			->will ( $this ->returnValue ( "DATA1" ) );
		$this->object ->setListeMachine ( array ( 
				$calculateur1 ) );
		$this ->assertContains ( $calculateur1, $this->object ->renvoi_liste_machine_aleatoire () );
	}

	/**
	 * @covers calculateurs::trouve_calculateur_libre
	 */
	public function testTrouve_calculateur_libre_false() {
		$calculateur1 = $this ->createMock ( "calculateur" );
		$calculateur1 ->expects ( $this ->any () ) 
			->method ( 'renvoi_donnees_machine' ) 
			->will ( $this ->returnValue ( 8 ) );
		$calculateur1 ->expects ( $this ->any () ) 
			->method ( 'renvoi_nb_job_en_cours' ) 
			->will ( $this ->returnValue ( 8 ) );
		$calculateur1 ->expects ( $this ->any () ) 
			->method ( 'compare_valeur' ) 
			->will ( $this ->returnValue ( true ) );
		$calculateur2 = $this ->createMock ( "calculateur" );
		$calculateur2 ->expects ( $this ->any () ) 
			->method ( 'renvoi_donnees_machine' ) 
			->will ( $this ->returnValue ( 12 ) );
		$calculateur2 ->expects ( $this ->any () ) 
			->method ( 'renvoi_nb_job_en_cours' ) 
			->will ( $this ->returnValue ( 8 ) );
		$calculateur2 ->expects ( $this ->any () ) 
			->method ( 'compare_valeur' ) 
			->will ( $this ->returnValue ( false ) );
		$this->object ->setListeMachine ( array ( 
				$calculateur1, 
				$calculateur2 ) );
		
		$this ->assertEquals ( - 1, $this->object ->trouve_calculateur_libre ( 20, 1150, 4 ) );
	}

	/**
     * @covers calculateurs::trouve_calculateur_libre
     */
	public function testTrouve_calculateur_libre_valide() {
		$calculateur1 = $this ->createMock ( "calculateur" );
		$calculateur1 ->expects ( $this ->any () ) 
			->method ( 'renvoi_donnees_machine' ) 
			->will ( $this ->returnValue ( 8 ) );
		$calculateur1 ->expects ( $this ->any () ) 
			->method ( 'renvoi_nb_job_en_cours' ) 
			->will ( $this ->returnValue ( 8 ) );
		$calculateur1 ->expects ( $this ->any () ) 
			->method ( 'compare_valeur' ) 
			->will ( $this ->returnValue ( false ) );
		$calculateur2 = $this ->createMock ( "calculateur" );
		$calculateur2 ->expects ( $this ->any () ) 
			->method ( 'renvoi_donnees_machine' ) 
			->will ( $this ->returnValue ( 12 ) );
		$calculateur2 ->expects ( $this ->any () ) 
			->method ( 'renvoi_nb_job_en_cours' ) 
			->will ( $this ->returnValue ( 8 ) );
		$calculateur2 ->expects ( $this ->any () ) 
			->method ( 'compare_valeur' ) 
			->will ( $this ->returnValue ( true ) );
		$this->object ->setListeMachine ( array ( 
				$calculateur1, 
				$calculateur2 ) );
		
		$this ->assertEquals ( 1, $this->object ->trouve_calculateur_libre ( 20, 1150, 4 ) );
	}

	/**
     * @covers calculateurs::renvoi_nb_max_job
     */
	public function testrenvoi_nb_max_job() {
		$calculateur1 = $this ->createMock ( "calculateur" );
		$calculateur1 ->expects ( $this ->any () ) 
			->method ( 'renvoi_donnees_machine' ) 
			->will ( $this ->returnValue ( 8 ) );
		$calculateur2 = $this ->createMock ( "calculateur" );
		$calculateur2 ->expects ( $this ->any () ) 
			->method ( 'renvoi_donnees_machine' ) 
			->will ( $this ->returnValue ( 12 ) );
		$this->object ->setListeMachine ( array ( 
				$calculateur1, 
				$calculateur2 ) );
		$this ->assertEquals ( 20, $this->object ->renvoi_nb_max_job () );
	}

	/**
     * @covers calculateurs::renvoi_nb_attribution
     */
	public function testrenvoi_nb_attribution() {
		$this ->assertEquals ( 0, $this->object ->renvoi_nb_attribution () );
	}

	/**
     * @covers calculateurs::utilise_puissance_machine
     */
	public function testUtilise_puissance_machine_false() {
		$this ->assertFalse ( $this->object ->utilise_puissance_machine ( 1, 20, 1100, 2 ) );
	}

	/**
	 * @covers calculateurs::utilise_puissance_machine
	 */
	public function testUtilise_puissance_machine_true() {
		$calculateur1 = $this ->createMock ( "calculateur" );
		$calculateur2 = $this ->createMock ( "calculateur" );
		$calculateur2 ->expects ( $this ->any () ) 
			->method ( 'utilise_puissance_calculateur' ) 
			->will ( $this ->returnValue ( true ) );
		$this->object ->setListeMachine ( array ( 
				$calculateur1, 
				$calculateur2 ) );
		$this ->assertTrue ( $this->object ->utilise_puissance_machine ( 1, 20, 1100, 2 ) );
	}

	/**
     * @covers calculateurs::libere_puissance_machine
     */
	public function testLibere_puissance_machine_false() {
		$this ->assertFalse ( $this->object ->libere_puissance_machine ( 1, 20, 1100, 2 ) );
	}

	/**
	 * @covers calculateurs::libere_puissance_machine
	 */
	public function testLibere_puissance_machine_true() {
		$calculateur1 = $this ->createMock ( "calculateur" );
		$calculateur2 = $this ->createMock ( "calculateur" );
		$calculateur2 ->expects ( $this ->any () ) 
			->method ( 'libere_puissance_calculateur' ) 
			->will ( $this ->returnValue ( true ) );
		$this->object ->setListeMachine ( array ( 
				$calculateur1, 
				$calculateur2 ) );
		$this ->assertTrue ( $this->object ->libere_puissance_machine ( 1, 20, 1100, 2 ) );
	}

	/**
     * @covers calculateurs::attribut_calculateur
     */
	public function testAttribut_calculateur_pasDeCalculateurValide() {
		$this ->assertEquals ( - 1, $this->object ->attribut_calculateur ( 1, 20, 1200, 2 ) );
	}

	/**
	 * @covers calculateurs::attribut_calculateur
	 */
	public function testAttribut_calculateur_attribue() {
		$calculateur1 = $this ->createMock ( "calculateur" );
		$calculateur2 = $this ->createMock ( "calculateur" );
		$calculateur2 ->expects ( $this ->any () ) 
			->method ( 'renvoi_donnees_machine' ) 
			->will ( $this ->returnValue ( "DATA1" ) );
		$this->object ->setListeMachine ( array ( 
				$calculateur1, 
				$calculateur2 ) );
		$attribution = array ( 
				array ( 
						"calculateur" => 0 ), 
				array ( 
						"calculateur" => 1, 
						"ram" => 20, 
						"disk" => 1200, 
						"cpu" => 2 ) );
		$this->object ->setAttribution ( $attribution );
		
		$this ->assertEquals ( 'DATA1', $this->object ->attribut_calculateur ( 1, 20, 1200, 2 ) );
	}

	/**
	 * @covers calculateurs::attribut_calculateur
	 */
	public function testAttribut_calculateur_dejaAttribue() {
		$calculateur1 = $this ->createMock ( "calculateur" );
		$calculateur1 ->expects ( $this ->any () ) 
			->method ( 'renvoi_donnees_machine' ) 
			->will ( $this ->returnValue ( 8 ) );
		$calculateur1 ->expects ( $this ->any () ) 
			->method ( 'renvoi_nb_job_en_cours' ) 
			->will ( $this ->returnValue ( 8 ) );
		$calculateur1 ->expects ( $this ->any () ) 
			->method ( 'compare_valeur' ) 
			->will ( $this ->returnValue ( false ) );
		$calculateur2 = $this ->createMock ( "calculateur" );
		$calculateur2 ->expects ( $this ->any () ) 
			->method ( 'renvoi_donnees_machine' ) 
			->will ( $this ->returnValue ( 12 ) );
		$calculateur2 ->expects ( $this ->any () ) 
			->method ( 'renvoi_nb_job_en_cours' ) 
			->will ( $this ->returnValue ( 8 ) );
		$calculateur2 ->expects ( $this ->any () ) 
			->method ( 'compare_valeur' ) 
			->will ( $this ->returnValue ( true ) );
		$this->object ->setListeMachine ( array ( 
				$calculateur1, 
				$calculateur2 ) );
		$attribution = array ( 
				0 => array ( 
						"calculateur" => 0 ) );
		$this->object ->setAttribution ( $attribution );
		
		$this ->assertEquals ( 12, $this->object ->attribut_calculateur ( 1, 20, 1200, 2 ) );
		$this ->assertEquals ( array ( 
				array ( 
						"calculateur" => 0 ), 
				array ( 
						"calculateur" => 1, 
						"ram" => 20, 
						"disk" => 1200, 
						"cpu" => 2 ) ), $this->object ->getAttribution () );
	}

	/**
     * @covers calculateurs::libere_calculateur
     */
	public function testLibere_calculateur_defaut() {
		$this ->assertEquals ( - 1, $this->object ->libere_calculateur ( 1 ) );
	}

	/**
	 * @covers calculateurs::libere_calculateur
	 */
	public function testLibere_calculateur_erreur() {
		$attribution = array ( 
				"calc1" => 0, 
				"calc2" => 1 );
		$this->object ->setAttribution ( $attribution );
		$this ->assertFalse ( $this->object ->libere_calculateur ( "calc2" ) );
	}

	/**
	 * @covers calculateurs::libere_calculateur
	 */
	public function testLibere_calculateur_valide() {
		$calculateur1 = $this ->createMock ( "calculateur" );
		$calculateur2 = $this ->createMock ( "calculateur" );
		$calculateur2 ->expects ( $this ->any () ) 
			->method ( 'libere_puissance_calculateur' ) 
			->will ( $this ->returnValue ( true ) );
		$this->object ->setListeMachine ( array ( 
				$calculateur1, 
				$calculateur2 ) );
		$attribution = array ( 
				array ( 
						"calculateur" => 0 ), 
				array ( 
						"calculateur" => 1, 
						"ram" => 20, 
						"disk" => 1200, 
						"cpu" => 2 ) );
		$this->object ->setAttribution ( $attribution );
		$this ->assertTrue ( $this->object ->libere_calculateur ( 1 ) );
	}

	/**
     * @covers calculateurs::libere_tous_calculateurs
     */
	public function testLibere_tous_calculateurs() {
		$attribution = array ( 
				"calc1" => 0, 
				"calc2" => 1 );
		$this->object ->setAttribution ( $attribution );
		$this ->assertTrue ( $this->object ->libere_tous_calculateurs () );
	}
}
