<?php
if (! defined('__DOCUMENT_ROOT__')) {
    require_once $_SERVER["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-25 at 16:53:15.
 */
class bladelogic_wsclientTest extends MockedListeOptions
{

    /**
     *
     * @var bladelogic_wsclient
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        ob_start();
        
        $bladelogic_datas = $this->createMock("bladelogic_datas");
        $soap = $this->createMock("soap");
        
        $this->object = new bladelogic_wsclient(false, "TESTS bladelogic_wsclient");
        $this->object->setListeOptions($this->getListeOption())
            ->setObjetbladelogicDatas($bladelogic_datas)
            ->setObjetSoap($soap);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        ob_end_clean();
    }

    /**
     * @covers bladelogic_wsclient::prepare_connexion
     */
    public function testPrepare_connexion_exception1()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $this->object->getObjetBladelogicDatas()
            ->expects($this->any())
            ->method('recupere_donnees_bladelogic_serveur')
            ->will($this->returnValue(array()));
        $this->object->getObjetSoap()
            ->expects($this->any())
            ->method('setCacheWsdl')
            ->will($this->returnSelf());
        $this->object->getObjetSoap()
            ->expects($this->any())
            ->method('retrouve_variables_tableau')
            ->will($this->returnSelf());
        $this->object->getObjetSoap()
            ->expects($this->any())
            ->method('connect')
            ->will($this->returnSelf());
        
        $this->object->getObjetbladelogicDatas()
            ->method('valide_presence_bladelogic_data')
            ->will($this->returnValue(false));
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS bladelogic_wsclient) Aucune definition de bladelogic pour NOM1');
        $this->object->prepare_connexion("NOM1");
    }

    /**
     * @covers bladelogic_wsclient::prepare_connexion
     */
    public function testPrepare_connexion_exception2()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $this->object->getObjetBladelogicDatas()
            ->expects($this->any())
            ->method('recupere_donnees_bladelogic_serveur')
            ->will($this->returnValue(array()));
        $this->object->getObjetSoap()
            ->expects($this->any())
            ->method('setCacheWsdl')
            ->will($this->returnSelf());
        $this->object->getObjetSoap()
            ->expects($this->any())
            ->method('retrouve_variables_tableau')
            ->will($this->returnSelf());
        $this->object->getObjetSoap()
            ->expects($this->any())
            ->method('connect')
            ->will($this->returnSelf());
        
        $this->object->getObjetbladelogicDatas()
            ->method('valide_presence_bladelogic_data')
            ->will($this->returnValue(array()));
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS bladelogic_wsclient) Il faut un username dans la liste des parametres bladelogic');
        $this->object->prepare_connexion("NOM1");
    }

    /**
     * @covers bladelogic_wsclient::prepare_connexion
     */
    public function testPrepare_connexion_exception3()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $this->object->getObjetBladelogicDatas()
            ->expects($this->any())
            ->method('recupere_donnees_bladelogic_serveur')
            ->will($this->returnValue(array()));
        $this->object->getObjetSoap()
            ->expects($this->any())
            ->method('setCacheWsdl')
            ->will($this->returnSelf());
        $this->object->getObjetSoap()
            ->expects($this->any())
            ->method('retrouve_variables_tableau')
            ->will($this->returnSelf());
        $this->object->getObjetSoap()
            ->expects($this->any())
            ->method('connect')
            ->will($this->returnSelf());
        
        $this->object->getObjetbladelogicDatas()
            ->method('valide_presence_bladelogic_data')
            ->will($this->returnValue(array(
            "username" => "user"
        )));
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS bladelogic_wsclient) Il faut un password dans la liste des parametres bladelogic');
        $this->object->prepare_connexion("NOM1");
    }

    /**
     * @covers bladelogic_wsclient::prepare_connexion
     */
    public function testPrepare_connexion_exception4()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $this->object->getObjetBladelogicDatas()
            ->expects($this->any())
            ->method('recupere_donnees_bladelogic_serveur')
            ->will($this->returnValue(array()));
        $this->object->getObjetSoap()
            ->expects($this->any())
            ->method('setCacheWsdl')
            ->will($this->returnSelf());
        $this->object->getObjetSoap()
            ->expects($this->any())
            ->method('retrouve_variables_tableau')
            ->will($this->returnSelf());
        $this->object->getObjetSoap()
            ->expects($this->any())
            ->method('connect')
            ->will($this->returnSelf());
        
        $this->object->getObjetbladelogicDatas()
            ->method('valide_presence_bladelogic_data')
            ->will($this->returnValue(array(
            "username" => "user",
            "password" => "pwd"
        )));
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS bladelogic_wsclient) Il faut une url dans la liste des parametres bladelogic');
        $this->object->prepare_connexion("NOM1");
    }

    /**
     * @covers bladelogic_wsclient::prepare_connexion
     */
    public function testPrepare_connexion_valide()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $this->object->getObjetBladelogicDatas()
            ->expects($this->any())
            ->method('recupere_donnees_bladelogic_serveur')
            ->will($this->returnValue(array()));
        $this->object->getObjetSoap()
            ->expects($this->any())
            ->method('setCacheWsdl')
            ->will($this->returnSelf());
        $this->object->getObjetSoap()
            ->expects($this->any())
            ->method('retrouve_variables_tableau')
            ->will($this->returnSelf());
        $this->object->getObjetSoap()
            ->expects($this->any())
            ->method('connect')
            ->will($this->returnSelf());
        
        $this->object->getObjetbladelogicDatas()
            ->method('valide_presence_bladelogic_data')
            ->will($this->returnValue(array(
            "username" => "user",
            "password" => "pwd",
            "url" => "URL1"
        )));
        
        $this->object->getObjetBladelogicDatas()
            ->expects($this->any())
            ->method('recupere_donnees_bladelogic_serveur')
            ->will($this->returnValue(array()));
        
        $stdclass = new stdClass();
        $stdclass->returnSessionId = "11122233334444";
        $this->_prepareSoapRequest($this->returnValue($stdclass));
        $this->assertSame($this->object, $this->object->prepare_connexion("NOM1"));
    }

    /**
     * @covers bladelogic_wsclient::connecte_bsa
     */
    public function testConnecte_bsa()
    {
        $this->_prepareSoapRequest($this->returnValue(array(
            "connecte_bsa"
        )));
        $this->object->getObjetBladelogicDatas()
            ->expects($this->any())
            ->method('recupere_donnees_bladelogic_serveur')
            ->will($this->returnValue(array()));
        
        $this->assertSame($this->object, $this->object->connecte_bsa("NOM1"));
        
        $this->object->setAuth("test");
        
        $this->assertSame($this->object, $this->object->connecte_bsa("NOM1"));
    }

    /**
     * _prepareSoapRequest
     */
    private function _prepareSoapRequest($call_return)
    {
        $SoapClient = $this->createMock('SoapClient');
        $SoapClient->expects($this->any())
            ->method('__setSoapHeaders')
            ->will($this->returnSelf());
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($call_return);
        $soap = $this->createMock("soap");
        $soap->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        $soap->expects($this->any())
            ->method('setCacheWsdl')
            ->will($this->returnSelf());
        $soap->expects($this->any())
            ->method('retrouve_variables_tableau')
            ->will($this->returnSelf());
        $soap->expects($this->any())
            ->method('connect')
            ->will($this->returnSelf());
        $this->object->setObjetSoap($soap);
    }

    /**
     * @covers bladelogic_wsclient::applique_requete_soap
     */
    public function testApplique_requete_soap_false()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(true));
        
        $this->assertFalse($this->object->applique_requete_soap("TEST", array()));
    }

    /**
     * @covers bladelogic_wsclient::applique_requete_soap
     */
    public function testApplique_requete_soap_response1()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        
        $this->_prepareSoapRequest($this->returnValue(array(
            "applique_requete_soap"
        )));
        $this->assertEquals(array(
            "applique_requete_soap"
        ), $this->object->applique_requete_soap("TEST", array()));
    }

    /**
     * @covers bladelogic_wsclient::applique_requete_soap
     */
    public function testApplique_requete_soap_response2()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        
        $this->_prepareSoapRequest($this->returnValue(array(
            "applique_requete_soap2"
        )));
        $this->assertEquals(array(
            'applique_requete_soap2'
        ), $this->object->applique_requete_soap("TEST", array()));
    }

    /**
     * @covers bladelogic_wsclient::applique_requete_soap
     */
    public function testApplique_requete_soap_response3()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        
        $exception=new Exception('EXCEP1');
        $this->_prepareSoapRequest($this->throwException($exception));
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS bladelogic_wsclient) EXCEP1');
        $this->object->applique_requete_soap("TEST", array());
    }

    /**
     * @covers bladelogic_wsclient::loginUsingUserCredential
     */
    public function testLoginUsingUserCredential_exception()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        
        $this->_prepareSoapRequest($this->returnValue(array(
            "NO"
        )));
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS bladelogic_wsclient) Pas de session ID');
        $this->object->loginUsingUserCredential();
    }

    /**
     * @covers bladelogic_wsclient::loginUsingUserCredential
     */
    public function testLoginUsingUserCredential_valide()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        
        $stdclass = new stdClass();
        $stdclass->returnSessionId = "11122233334444";
        $this->_prepareSoapRequest($this->returnValue($stdclass));
        $result = new stdClass();
        $result->returnSessionId = "11122233334444";
        $this->assertEquals($result, $this->object->loginUsingUserCredential());
        $this->assertEquals("11122233334444", $this->object->getAuth());
    }

    /**
     * @covers bladelogic_wsclient::AssumeRole
     */
    public function testAssumeRole()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        
        $this->_prepareSoapRequest($this->returnValue(array(
            "NO"
        )));
        
        $this->assertEquals(array(
            "NO"
        ), $this->object->AssumeRole("ROLE1"));
    }

    /**
     * @covers bladelogic_wsclient::executeCommandByParamString
     */
    public function testExecuteCommandByParamString()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        
        $this->_prepareSoapRequest($this->returnValue(array(
            "NO"
        )));
        
        $this->assertEquals(array(
            "NO"
        ), $this->object->executeCommandByParamString("CMD1", "PARAM1"));
    }

    /**
     * @covers bladelogic_wsclient::RESTRequestService
     */
    public function testRESTRequestService()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        
        $this->_prepareSoapRequest($this->returnValue(array()));
        $this->assertTrue($this->object->RESTRequestService());
    }

    /**
     * @covers bladelogic_wsclient::HandshakeService
     */
    public function testHandshakeService()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        
        $this->_prepareSoapRequest($this->returnValue(array()));
        $this->assertTrue($this->object->HandshakeService());
    }

    /**
     * @covers bladelogic_wsclient::StandardAttributeInterfaceService
     */
    public function testStandardAttributeInterfaceService()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        
        $this->_prepareSoapRequest($this->returnValue(array()));
        $this->assertTrue($this->object->StandardAttributeInterfaceService());
    }
}
