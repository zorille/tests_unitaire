<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-26 at 11:19:36.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class contraintesHoraireTest extends MockedListeOptions {
	/**
     * @var contraintesHoraire
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = new contraintesHoraire ( "", "TESTS contraintesHoraire", false );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * @covers contraintesHoraire::prepare_horaire
	 */
	public function testPrepare_horaire_False() {
		$this->assertFalse ( $this->object->prepare_horaire () );
	}

	/**
     * @covers contraintesHoraire::prepare_horaire
     */
	public function testPrepare_horaire_defaut() {
		$this->getListeOption ()
			->expects ( $this->any () )
			->method ( 'verifie_option_existe' )
			->will ( $this->returnValue ( false ) );
		$this->object->setListeOptions ( $this->getListeOption () );
		$this->object->setDate ( "20100505" );
		
		$this->assertSame ( $this->object, $this->object->prepare_horaire () );
		$this->assertEquals ( 1273010400, $this->object->getTimestampDebutMax () );
		$this->assertEquals ( 1273096799, $this->object->getTimestampFinMax () );
		$this->assertEquals ( 1273010400, $this->object->getTimestampDebutAlarme () );
		$this->assertEquals ( 1273096799, $this->object->getTimestampFinAlarme () );
	}

	/**
	 * @covers contraintesHoraire::prepare_horaire
	 */
	public function testPrepare_horaire() {
		$this->getListeOption ()
		->expects ( $this->any () )
		->method ( 'verifie_option_existe' )
		->will ( $this->returnValue ( true ) );
		$this->getListeOption ()
		->expects ( $this->any () )
		->method ( 'getOption' )
		->will ( $this->returnValue ( "12:00:00" ) );
		$this->object->setListeOptions ( $this->getListeOption () );
		$this->object->setDate ( "20100505" );
	
		$this->assertSame ( $this->object, $this->object->prepare_horaire () );
		$this->assertEquals ( 1273053600, $this->object->getTimestampDebutMax () );
		$this->assertEquals ( 1273053600, $this->object->getTimestampFinMax () );
		$this->assertEquals ( 1273053600, $this->object->getTimestampDebutAlarme () );
		$this->assertEquals ( 1273053600, $this->object->getTimestampFinAlarme () );
	}
	
	/**
     * @covers contraintesHoraire::valideHeureDebutGlobal
     */
	public function testValideHeureDebutGlobal_False() {
		$this->object->setTimestampJour ( strtotime ( "20101227 12:24:35" ) )
			->setTimestampDebutMax ( strtotime ( "20101227 13:00:00" ) );
		
		$this->assertFalse ( $this->object->valideHeureDebutGlobal () );
	}
	
	/**
	 * @covers contraintesHoraire::valideHeureDebutGlobal
	 */
	public function testValideHeureDebutGlobal_True() {
		$this->object->setTimestampJour ( strtotime ( "20101227 13:24:35" ) )
		->setTimestampDebutMax ( strtotime ( "20101227 13:00:00" ) );
	
		$this->assertTrue ( $this->object->valideHeureDebutGlobal () );
	}

	/**
	 * @covers contraintesHoraire::valideHeureFinGlobal
	 */
	public function testValideHeureFinGlobal_False() {
		$this->object->setTimestampJour ( strtotime ( "20101227 12:24:35" ) )
		->setTimestampFinMax( strtotime ( "20101227 13:00:00" ) );
	
		$this->assertFalse ( $this->object->valideHeureFinGlobal () );
	}
	
	/**
	 * @covers contraintesHoraire::valideHeureFinGlobal
	 */
	public function testValideHeureFinGlobal_True() {
		$this->object->setTimestampJour ( strtotime ( "20101227 13:24:35" ) )
		->setTimestampFinMax ( strtotime ( "20101227 13:00:00" ) );
	
		$this->assertTrue ( $this->object->valideHeureFinGlobal () );
	}


	/**
	 * @covers contraintesHoraire::valideHeureDebutAlarmeGlobal
	 */
	public function testvalideHeureDebutAlarmeGlobal_False() {
		$this->object->setTimestampJour ( strtotime ( "20101227 12:24:35" ) )
		->setTimestampDebutAlarme( strtotime ( "20101227 13:00:00" ) );
	
		$this->assertFalse ( $this->object->valideHeureDebutAlarmeGlobal () );
	}
	
	/**
	 * @covers contraintesHoraire::valideHeureDebutAlarmeGlobal
	 */
	public function testvalideHeureDebutAlarmeGlobal_True() {
		$this->object->setTimestampJour ( strtotime ( "20101227 13:24:35" ) )
		->setTimestampDebutAlarme ( strtotime ( "20101227 13:00:00" ) );
	
		$this->assertTrue ( $this->object->valideHeureDebutAlarmeGlobal () );
	}

	/**
	 * @covers contraintesHoraire::valideHeureFinAlarmeGlobal
	 */
	public function testvalideHeureFinAlarmeGlobal_False() {
		$this->object->setTimestampJour ( strtotime ( "20101227 12:24:35" ) )
		->setTimestampFinAlarme( strtotime ( "20101227 13:00:00" ) );
	
		$this->assertFalse ( $this->object->valideHeureFinAlarmeGlobal () );
	}
	
	/**
	 * @covers contraintesHoraire::valideHeureFinAlarmeGlobal
	 */
	public function testvalideHeureFinAlarmeGlobal_True() {
		$this->object->setTimestampJour ( strtotime ( "20101227 13:24:35" ) )
		->setTimestampFinAlarme ( strtotime ( "20101227 13:00:00" ) );
	
		$this->assertTrue ( $this->object->valideHeureFinAlarmeGlobal () );
	}

	/**
	 * @covers contraintesHoraire::activeAlarme
	 */
	public function testActiveAlarme_False1() {
		$this->object->setTimestampJour ( strtotime ( "20101227 13:24:35" ) )
		->setTimestampDebutMax ( strtotime ( "20101227 13:00:00" ) )
		->setTimestampDebutAlarme ( strtotime ( "20101227 14:00:00" ) );
	
		$this->assertFalse ( $this->object->activeAlarme () );
	}
	
	/**
	 * @covers contraintesHoraire::activeAlarme
	 */
	public function testActiveAlarme_False2() {
		$this->object->setTimestampJour ( strtotime ( "20101227 13:24:35" ) )
		->setTimestampDebutMax ( strtotime ( "20101227 14:00:00" ) )
		->setTimestampDebutAlarme ( strtotime ( "20101227 9:00:00" ) );
	
		$this->assertFalse ( $this->object->activeAlarme () );
	}
	
	/**
	 * @covers contraintesHoraire::activeAlarme
	 */
	public function testActiveAlarme_False3() {
		$this->object->setTimestampJour ( strtotime ( "20101227 13:24:35" ) )
		->setTimestampDebutMax ( strtotime ( "20101227 14:00:00" ) )
		->setTimestampDebutAlarme ( strtotime ( "20101227 13:30:00" ) );
	
		$this->assertFalse ( $this->object->activeAlarme () );
	}
	
	/**
     * @covers contraintesHoraire::activeAlarme
     */
	public function testActiveAlarme_True() {
		$this->object->setTimestampJour ( strtotime ( "20101227 13:24:35" ) )
		->setTimestampDebutMax ( strtotime ( "20101227 13:00:00" ) )
		->setTimestampDebutAlarme ( strtotime ( "20101227 9:00:00" ) );
		
		$this->assertTrue ( $this->object->activeAlarme () );
	}
}
