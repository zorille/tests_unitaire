<?php
namespace Zorille\framework;
use \Exception as Exception;
/**
 * @ignore
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Test class for dates.
 * Generated by PHPUnit on 2010-08-02 at 17:11:21.
 */
class datesTest extends MockedListeOptions {
	/**
	 * @var dates
	 */
	protected $object;
	protected $date_debut;
	protected $date_fin;
	protected $monday;
	protected $month;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		ob_start ();
		
		$this->date_debut = "20100801";
		$this->date_fin = "20100810";
		$this->monday = "20100802";
		$this->month = "20100801";
		$this->object = new dates ( $this->date_debut, $this->date_fin );
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * @covers Zorille\framework\dates::Parse_date
	 */
	public function testParse_date_exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(Zorille\framework\dates) la date n\'est pas au bon format' );
		$this->object ->parse_date ( $this->month . "3" );
	}

	/**
	 * @covers Zorille\framework\dates::Parse_date
	 */
	public function testParse_date_valide() {
		$this ->assertEquals ( array ( 
				"year" => "2010", 
				"month" => "08", 
				"day" => "01" ), $this->object ->parse_date ( $this->month ) );
	}

	/**
	 * @covers Zorille\framework\dates::Extraire_date
	 */
	public function testExtraire_date_false() {
		$this ->assertFalse ( $this->object ->extraire_date ( false ) );
	}

	/**
	 * @covers Zorille\framework\dates::Extraire_date
	 */
	public function testExtraire_date_valide() {
		$this ->assertEquals ( $this->date_debut, $this->object ->extraire_date ( $this->date_debut ) );
		$this ->assertEquals ( $this->date_debut, $this->object ->extraire_date ( "01 august 2010" ) );
	}

	/**
	 * @covers Zorille\framework\dates::extraire_date_timestamp
	 */
	public function testExtraire_date_timestamp_false() {
		$this ->assertFalse ( $this->object ->extraire_date_timestamp ( "1409194800" ) );
	}

	/**
	 * @covers Zorille\framework\dates::extraire_date_timestamp
	 */
	public function testExtraire_date_timestamp_valide() {
		$this ->assertEquals ( "20140828", $this->object ->extraire_date_timestamp ( 1409194800 ) );
	}

	/**
	 * @covers Zorille\framework\dates::extraire_timestamp
	 */
	public function testExtraire_timestamp_exception1() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( 'dates) la date n\'est pas au bon format' );
		$this->object ->extraire_timestamp ( "1409194800" );
	}

	/**
	 * @covers Zorille\framework\dates::extraire_timestamp
	 */
	public function testExtraire_timestamp_false() {
		$this ->assertFalse ( $this->object ->extraire_timestamp ( "20140828", "05:00" ) );
	}

	/**
	 * @covers Zorille\framework\dates::extraire_timestamp
	 */
	public function testExtraire_timestamp_valide() {
		$this ->assertEquals ( "1409176800", $this->object ->extraire_timestamp ( "20140828" ) );
		$this ->assertEquals ( "1409194800", $this->object ->extraire_timestamp ( "20140828", "05:00:00" ) );
	}

	/**
	 * @covers Zorille\framework\dates::extraire_date_mysql_timestamp
	 */
	public function testExtraire_date_mysql_timestamp_false() {
		$this ->assertFalse ( $this->object ->extraire_date_mysql_timestamp ( "a1409194800" ) );
	}

	/**
	 * @covers Zorille\framework\dates::extraire_date_mysql_timestamp
	 */
	public function testExtraire_date_mysql_timestamp_valide() {
		$this ->assertEquals ( "2014-08-28 05:00:00", $this->object ->extraire_date_mysql_timestamp ( 1409194800 ) );
		$this ->assertEquals ( "2014-08-28 05:00:00", $this->object ->extraire_date_mysql_timestamp ( 1409194800123 ) );
	}

	/**
	 * @covers Zorille\framework\dates::extraire_date_mysql_standard
	 */
	public function testExtraire_date_mysql_standard_exception1() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(Zorille\framework\dates) la date n\'est pas au bon format' );
		$this->object ->extraire_date_mysql_standard ( "1409194800" );
	}

	/**
	 * @covers Zorille\framework\dates::extraire_date_mysql_standard
	 */
	public function testExtraire_date_mysql_standard_false() {
		$this ->assertFalse ( $this->object ->extraire_date_mysql_standard ( "20140828", "05:00" ) );
	}

	/**
	 * @covers Zorille\framework\dates::extraire_date_mysql_standard
	 */
	public function testExtraire_date_mysql_standard_valide() {
		$this ->assertEquals ( "2014-08-28 00:00:00", $this->object ->extraire_date_mysql_standard ( "20140828" ) );
		$this ->assertEquals ( "2014-08-28 05:00:00", $this->object ->extraire_date_mysql_standard ( "20140828", "05:00:00" ) );
	}

	/**
	 * @covers Zorille\framework\dates::prepare_date_mysql
	 */
	public function testPrepare_date_mysql() {
		$this ->assertEquals ( 
				array ( 
							'year' => 2014, 
							'month' => 8, 
							'day' => 28, 
							'hour' => 5, 
							'minute' => 0, 
							'second' => 0, 
							'fraction' => false, 
							'warning_count' => 0, 
							'warnings' => array (), 
							'error_count' => 0, 
							'errors' => array (), 
							'is_localtime' => false ), 
					$this->object ->prepare_date_mysql ( "2014-08-28 05:00:00" ) );
		$this ->assertFalse ( $this->object ->prepare_date_mysql ( "1409194800" ) );
	}

	/**
	 * @covers Zorille\framework\dates::timestamp_mysql_date
	 */
	public function testTimestamp_mysql_date() {
		$this ->assertEquals ( "1409194800", $this->object ->timestamp_mysql_date ( "2014-08-28 05:00:00" ) );
		$this ->assertEquals ( 0, $this->object ->timestamp_mysql_date ( "1409194800" ) );
	}

	/**
	 * @covers Zorille\framework\dates::creer_date
	 */
	public function testCreer_date() {
		$this ->assertTrue ( $this->object ->creer_date ( $this->date_debut ) );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(Zorille\framework\dates) la date n\'est pas au bon format' );
		$this->object ->creer_date ( false );
	}

	/**
	 * @covers Zorille\framework\dates::creer_liste_dates
	 */
	public function testCreer_liste_dates_exception1() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(Zorille\framework\dates) la date n\'est pas au bon format' );
		$this->object ->creer_liste_dates ( $this->date_debut, false );
	}

	/**
	 * @covers Zorille\framework\dates::creer_liste_dates
	 */
	public function testCreer_liste_dates_false() {
		$this ->assertFalse ( $this->object ->creer_liste_dates ( "20243020", $this->date_fin ) );
	}

	/**
	 * @covers Zorille\framework\dates::creer_liste_dates
	 */
	public function testCreer_liste_dates_valide() {
		$this ->assertTrue ( $this->object ->creer_liste_dates ( $this->date_debut, $this->date_fin ) );
	}

	/**
	 * @covers Zorille\framework\dates::week_day
	 */
	public function testWeek_day_exception() {
		$this->object ->setListeDates ( array ( 
				"202430201" ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(Zorille\framework\dates) la date n\'est pas au bon format' );
		$this->object ->week_day ();
	}

	/**
	 * @covers Zorille\framework\dates::week_day
	 */
	public function testWeek_day_valide() {
		$this ->assertTrue ( $this->object ->week_day () );
		$this ->assertTrue ( $this->object ->week_day ( $this->object ->parse_date ( $this->monday ) ) );
	}

	/**
	 * @covers Zorille\framework\dates::month_day
	 */
	public function testMonth_day_exception() {
		$this->object ->setListeDates ( array ( 
				"202430201" ) );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(Zorille\framework\dates) la date n\'est pas au bon format' );
		$this->object ->month_day ();
	}

	/**
	 * @covers Zorille\framework\dates::month_day
	 */
	public function testMonth_day_valide() {
		$this ->assertTrue ( $this->object ->month_day () );
		$this ->assertTrue ( $this->object ->month_day ( $this->object ->parse_date ( $this->month ) ) );
	}

	/**
	 * @covers Zorille\framework\dates::getListeDates
	 */
	public function testgetListeDates() {
		$this ->assertArrayHasKey ( 0, $this->object ->getListeDates () );
		$retour = $this->object ->getListeDates ();
		$this ->assertEquals ( "20100801", $retour [0] );
	}

	/**
	 * @covers Zorille\framework\dates::recupere_date
	 */
	public function testRecupere_date_false() {
		$this ->assertFalse ( $this->object ->recupere_date ( 40 ) );
	}

	/**
	 * @covers Zorille\framework\dates::recupere_date
	 */
	public function testRecupere_date_valide() {
		$this ->assertEquals ( "20100801", $this->object ->recupere_date ( 0 ) );
		$this ->assertEquals ( "20100801", $this->object ->recupere_date ( 0, "day" ) );
		$this ->assertEquals ( "20100801", $this->object ->recupere_date ( 0, "month" ) );
		$this ->assertEquals ( "20100802", $this->object ->recupere_date ( 0, "week" ) );
	}

	/**
	 * @covers Zorille\framework\dates::recupere_premier_jour
	 */
	public function testRecupere_premier_jour() {
		$this ->assertEquals ( "20100801", $this->object ->recupere_premier_jour () );
	}

	/**
	 * @covers Zorille\framework\dates::recupere_dernier_jour
	 */
	public function testRecupere_dernier_jour() {
		$this ->assertEquals ( "20100810", $this->object ->recupere_dernier_jour () );
		$this->object ->setListeDates ( array () );
		$this ->assertFalse ( $this->object ->recupere_dernier_jour () );
	}

	/**
	 * @covers Zorille\framework\dates::getListeWeek
	 */
	public function testgetListeWeek() {
		$this ->assertArrayHasKey ( 0, $this->object ->getListeWeek () );
		$retour = $this->object ->getListeWeek ();
		$this ->assertEquals ( "20100802", $retour [0] );
	}

	/**
	 * @covers Zorille\framework\dates::getListeMonth
	 */
	public function testgetListeMonth() {
		$this ->assertArrayHasKey ( 0, $this->object ->getListeMonth () );
		$retour = $this->object ->getListeMonth ();
		$this ->assertEquals ( "20100801", $retour [0] );
	}

	/**
	 * @covers Zorille\framework\dates::ajout_date
	 */
	public function testAjout_date_exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(Zorille\framework\dates) la date n\'est pas au bon format' );
		$this->object ->ajout_date ( "20008090257" );
	}

	/**
	 * @covers Zorille\framework\dates::ajout_date
	 */
	public function testAjout_date_valide() {
		$this ->assertTrue ( $this->object ->ajout_date ( "20100811" ) );
		$this ->assertTrue ( $this->object ->ajout_date ( "20100811", "day" ) );
		$this ->assertTrue ( $this->object ->ajout_date ( "20100901", "month" ) );
		$this ->assertTrue ( $this->object ->ajout_date ( "20100809", "week" ) );
	}

	/**
	 * @covers Zorille\framework\dates::date_existe_dans_liste_day
	 */
	public function testDate_existe_dans_liste_day() {
		$this ->assertTrue ( $this->object ->date_existe_dans_liste_day ( "20100805" ) );
		$this ->assertFalse ( $this->object ->date_existe_dans_liste_day ( "20100811" ) );
	}

	/**
	 * @covers Zorille\framework\dates::retrouve_jour
	 */
	public function testRetrouve_jour_exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(Zorille\framework\dates) la date n\'est pas au bon format' );
		$this->object ->retrouve_jour ( "20008090257", 5 );
	}

	/**
	 * @covers Zorille\framework\dates::retrouve_jour
	 */
	public function testRetrouve_jour_valide() {
		$this ->assertEquals ( "20100811", $this->object ->retrouve_jour ( $this->date_debut, 10 ) );
		$this ->assertEquals ( "20100801", $this->object ->retrouve_jour ( $this->date_fin, 9, true ) );
	}

	/**
	 * @covers Zorille\framework\dates::retrouve_nom_jour_semaine
	 */
	public function testRetrouve_nom_jour_semaine_exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(Zorille\framework\dates) la date n\'est pas au bon format' );
		$this->object ->retrouve_nom_jour_semaine ( "20008090257", 5 );
	}

	/**
	 * @covers Zorille\framework\dates::retrouve_nom_jour_semaine
	 */
	public function testRetrouve_nom_jour_semaine_valide() {
		$this ->assertEquals ( "Sunday", $this->object ->retrouve_nom_jour_semaine ( $this->date_debut ) );
	}

	/**
	 * @covers Zorille\framework\dates::retrouve_week
	 */
	public function testRetrouve_week_exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(Zorille\framework\dates) la date n\'est pas au bon format' );
		$this->object ->retrouve_week ( "20008090257", 5 );
	}

	/**
	 * @covers Zorille\framework\dates::retrouve_week
	 */
	public function testRetrouve_week_valide() {
		$this ->assertEquals ( "20101011", $this->object ->retrouve_week ( $this->date_debut, 10 ) );
		$this ->assertEquals ( "20100531", $this->object ->retrouve_week ( $this->monday, 9, true ) );
	}

	/**
	 * @covers Zorille\framework\dates::retrouve_month
	 */
	public function testRetrouve_month_exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(Zorille\framework\dates) la date n\'est pas au bon format' );
		$this->object ->retrouve_month ( "20008090257", 5 );
	}

	/**
	 * @covers Zorille\framework\dates::retrouve_month
	 */
	public function testRetrouve_month_valide() {
		$this ->assertEquals ( "20100901", $this->object ->retrouve_month ( $this->date_debut, 1 ) );
		$this ->assertEquals ( "20100701", $this->object ->retrouve_month ( $this->month, 1, true ) );
	}

	/**
	 * @covers Zorille\framework\dates::retrouve_month
	 */
	public function testRetrouve_trimestre_false() {
		$this ->assertFalse ( $this->object ->retrouve_trimestre ( "20101315" ) );
	}

	/**
	 * @covers Zorille\framework\dates::retrouve_month
	 */
	public function testRetrouve_trimestre_exception1() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(Zorille\framework\dates) la date n\'est pas au bon format' );
		$this->object ->retrouve_trimestre ( "20008090257" );
	}

	/**
	 * @covers Zorille\framework\dates::retrouve_month
	 */
	public function testRetrouve_trimestre_valide() {
		$this ->assertEquals ( "20100101", $this->object ->retrouve_trimestre ( "20100301" ) );
		$this ->assertEquals ( "20100401", $this->object ->retrouve_trimestre ( "20100615" ) );
		$this ->assertEquals ( "20100701", $this->object ->retrouve_trimestre ( "20100915" ) );
		$this ->assertEquals ( "20101001", $this->object ->retrouve_trimestre ( "20101215" ) );
	}

	/**
	 * @covers Zorille\framework\dates::compare_dates
	 */
	public function testCompare_dates_false() {
		$this ->assertFalse ( $this->object ->compare_dates ( $this->date_fin, $this->date_fin ) );
	}

	/**
	 * @covers Zorille\framework\dates::compare_dates
	 */
	public function testCompare_dates_false2() {
		$this ->assertFalse ( $this->object ->compare_dates ( $this->date_fin, $this->date_debut ) );
	}

	/**
	 * @covers Zorille\framework\dates::compare_dates
	 */
	public function testCompare_dates_true() {
		$this ->assertTrue ( $this->object ->compare_dates ( $this->date_debut, $this->date_fin ) );
	}

	/**
	 * @covers Zorille\framework\dates::retrouve_lundi_precedent
	 */
	public function testRetrouve_lundi_precedent_exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(Zorille\framework\dates) la date n\'est pas au bon format' );
		$this->object ->retrouve_lundi_precedent ( "20008090257" );
	}

	/**
	 * @covers Zorille\framework\dates::retrouve_lundi_precedent
	 */
	public function testRetrouve_lundi_precedent_valide() {
		$this ->assertEquals ( "20100809", $this->object ->retrouve_lundi_precedent ( $this->date_fin ) );
	}

	/**
	 * @covers Zorille\framework\dates::retrouve_dimanche_suivant
	 */
	public function testRetrouve_dimanche_suivant_exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(Zorille\framework\dates) la date n\'est pas au bon format' );
		$this->object ->retrouve_dimanche_suivant ( "20008090257" );
	}

	/**
	 * @covers Zorille\framework\dates::retrouve_dimanche_suivant
	 */
	public function testRetrouve_dimanche_suivant_valide() {
		$this ->assertEquals ( "20100815", $this->object ->retrouve_dimanche_suivant ( $this->date_fin ) );
	}

	/**
	 * @covers Zorille\framework\dates::retrouve_dernier_du_mois
	 */
	public function testRetrouve_dernier_du_mois_exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(Zorille\framework\dates) la date n\'est pas au bon format' );
		$this->object ->retrouve_dernier_du_mois ( "20008090257" );
	}

	/**
	 * @covers Zorille\framework\dates::retrouve_dernier_du_mois
	 */
	public function testRetrouve_dernier_du_mois_valide() {
		$this ->assertEquals ( "20100831", $this->object ->retrouve_dernier_du_mois ( $this->date_debut ) );
	}

	/**
	 * @covers Zorille\framework\dates::retrouve_mois_str_fr
	 */
	public function testRetrouve_mois_str_fr_exception1() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(Zorille\framework\dates) la date n\'est pas au bon format' );
		$this->object ->retrouve_mois_str_fr ( "200001090257" );
	}

	/**
	 * @covers Zorille\framework\dates::retrouve_mois_str_fr
	 */
	public function testRetrouve_mois_str_fr_false() {
		$this ->assertFalse ( $this->object ->retrouve_mois_str_fr ( "20101309" ) );
	}

	/**
	 * @covers Zorille\framework\dates::retrouve_mois_str_fr
	 */
	public function testRetrouve_mois_str_fr_valide() {
		$this ->assertEquals ( "Janvier", $this->object ->retrouve_mois_str_fr ( "20100101" ) );
		$this ->assertEquals ( "F&eacute;vrier", $this->object ->retrouve_mois_str_fr ( "20100201" ) );
		$this ->assertEquals ( "Mars", $this->object ->retrouve_mois_str_fr ( "20100301" ) );
		$this ->assertEquals ( "Avril", $this->object ->retrouve_mois_str_fr ( "20100401" ) );
		$this ->assertEquals ( "Mai", $this->object ->retrouve_mois_str_fr ( "20100501" ) );
		$this ->assertEquals ( "Juin", $this->object ->retrouve_mois_str_fr ( "20100601" ) );
		$this ->assertEquals ( "Juillet", $this->object ->retrouve_mois_str_fr ( "20100701" ) );
		$this ->assertEquals ( "Ao&ucirc;t", $this->object ->retrouve_mois_str_fr ( "20100801" ) );
		$this ->assertEquals ( "Septembre", $this->object ->retrouve_mois_str_fr ( "20100901" ) );
		$this ->assertEquals ( "Octobre", $this->object ->retrouve_mois_str_fr ( "20101001" ) );
		$this ->assertEquals ( "Novembre", $this->object ->retrouve_mois_str_fr ( "20101101" ) );
		$this ->assertEquals ( "D&eacute;cembre", $this->object ->retrouve_mois_str_fr ( "20101201" ) );
	}

	/**
	 * @covers Zorille\framework\dates::est_feries
	 */
	public function testEst_feries_exception1() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(Zorille\framework\dates) la date n\'est pas au bon format' );
		$this->object ->est_feries ( "20008090257" );
	}

	/**
	 * @covers Zorille\framework\dates::est_feries
	 */
	public function testEst_feries_exception2() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(Zorille\framework\dates) la date n\'est pas dans la bonne annee' );
		$this->object ->est_feries ( "20110815" );
	}

	/**
	 * @covers Zorille\framework\dates::est_feries
	 */
	public function testEst_feries_valide() {
		$this ->assertEquals ( 1, $this->object ->est_feries ( "20100101" ) );
		$this ->assertEquals ( 1, $this->object ->est_feries ( "20100815" ) );
		
		$this ->assertEquals ( 0, $this->object ->est_feries ( "20100816" ) );
	}

	/**
	 * @covers Zorille\framework\dates::creer_jours_feries
	 */
	public function testCreer_jours_feries() {
		$this ->assertTrue ( $this->object ->creer_jours_feries () );
		$this ->assertEquals ( array ( 
				"2010" => array ( 
						1262300400, 
						1270418400, 
						1272664800, 
						1273269600, 
						1273701600, 
						1274652000, 
						1279058400, 
						1281823200, 
						1288566000, 
						1289430000, 
						1293231600 ) ), $this->object ->getjoursferies () );
		
		$this->object ->setListeDates ( array ( 
				"202430201" ) );
		$this ->assertTrue ( $this->object ->creer_jours_feries () );
	}

	/**
	 * @covers Zorille\framework\dates::renvoi_timestamp
	 */
	public function testrenvoi_timestamp_false() {
		$this ->assertFalse ( $this->object ->renvoi_timestamp ( "20100811", "13:32:54:00" ) );
	}

	/**
	 * @covers Zorille\framework\dates::renvoi_timestamp
	 */
	public function testrenvoi_timestamp_valide() {
		$this ->assertEquals ( 1281477600, $this->object ->renvoi_timestamp ( "20100811" ) );
		$this ->assertEquals ( 1281526374, $this->object ->renvoi_timestamp ( "20100811", "13:32:54" ) );
	}
}
?>
