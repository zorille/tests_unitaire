<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-05-18 at 14:40:30.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class fiche_categorieTest extends MockedListeOptions {
	/**
     * @var fiche_categorie
     */
	protected $object;
	protected $fichier;
	protected $dir = "CUSTTEST";

	public static function setUpBeforeClass() {
		system ( "mkdir /tmp/CUSTTEST", $retour );
	}

	public static function tearDownAfterClass() {
		system ( "rm -rf /tmp/CUSTTEST", $retour );
	}

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = new fiche_categorie ( false, "TESTS fiche_categorie" );
		$this->object ->setListeOptions ( $this ->getListeOption () ) 
			->setDossierFCAT ( "/tmp" );
		
		$this->fichier = "fiche_categorieTest_" . getmypid ();
		$this ->_prepareFicheCatGeneric ();
		$this ->_prepareFicheCat ();
	}

	private function _prepareFicheCatGeneric() {
		$datas = "# Format :
# Categorie;impact;ressource;instance (opt);groupe1 (opt);groupe2 (opt)
#
# groupe 1 : groupe vers lequel transferer automatiquement.
# groupe 2 : groupe d astreinte.
                                                            
# GROUPE POUR STARSv3 IMSL_FR_IBR
                                                            
# COMMON SYSTEME
                                                            
FAR-MUT-APP2;1;conn;;IMSL_FR_MONITORING
FAR-MUT-APP2;1;conn_prod;;IMSL_FR_MONITORING
FAR-MUT-APP2;1;;;IMSL_FR_MONITORING
	
				";
		
		system ( "echo '" . $datas . "' > /tmp/" . $this->dir . "/" . $this->fichier . "_GEN.txt", $retour );
	}

	private function _prepareFicheCat() {
		$datas = "FAR-MUT-APP1;2;conn_prod;;IMSL_FR_MONITORING
GENERIQUE:" . $this->dir . "/" . $this->fichier . "_GEN.txt";
		
		system ( "echo '" . $datas . "' > /tmp/" . $this->dir . "/" . $this->fichier . ".txt", $retour );
	}

	private function _creerFicheCat() {
		$fcat = array ( 
				'conn' => array ( 
						'*' => array ( 
								'FA' => 'FAR-MUT-APP2', 
								'impact' => '1', 
								'groupe' => 'IMSL_FR_MONITORING' ) ), 
				'conn_prod' => array ( 
						'instance' => array ( 
								'FA' => 'FAR-MUT-APP1', 
								'impact' => '2', 
								'groupe' => 'IMSL_FR_MONITORING' ) ), 
				'*' => array ( 
						'*' => array ( 
								'FA' => 'FAR-MUT-APP2', 
								'impact' => '1', 
								'groupe' => 'IMSL_FR_MONITORING' ) ) );
		$this->object ->setFCAT ( $fcat );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * @covers fiche_categorie::retrouve_fiche_categorie_param
	 */
	public function testretrouve_fiche_categorie_param_Exception() {
		$this->object ->getListeOptions () 
			->expects ( $this ->at ( 0 ) ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( false ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS fiche_categorie) Il manque le parametre dossier dans fiche_categorie.' );
		$this->object ->retrouve_fiche_categorie_param ();
	}

	/**
	 * @covers fiche_categorie::retrouve_fiche_categorie_param
	 */
	public function testretrouve_fiche_categorie_param() {
		$this->object ->getListeOptions () 
			->expects ( $this ->at ( 0 ) ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this->object ->getListeOptions () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( array ( 
				"#comment" => "et voila un commentaire", 
				"nom" => "LOCAL_TEST" ) ) );
		$this->object ->getListeOptions () 
			->expects ( $this ->at ( 2 ) ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->assertInstanceOf ( 'fiche_categorie', $this->object ->retrouve_fiche_categorie_param () );
	}

	/**
	 * @covers fiche_categorie::remplir_variable
	 */
	public function testremplir_variable_defaut() {
		$this->object ->getListeOptions () 
			->expects ( $this ->at ( 0 ) ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( false ) );
		
		$this ->assertInstanceOf ( 'fiche_categorie', $this->object ->remplir_variable ( array ( 
				"data" ), "DEFAUT", "setFCATGeneric" ) );
		$this ->assertEquals ( "DEFAUT", $this->object ->getFCATGeneric () );
	}

	/**
	 * @covers fiche_categorie::remplir_variable
	 */
	public function testremplir_variable() {
		$this->object ->getListeOptions () 
			->expects ( $this ->at ( 0 ) ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this->object ->getListeOptions () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( "FICHECATGEN" ) );
		
		$this ->assertSame ( $this->object, $this->object ->remplir_variable ( array ( 
				"data" ), "DEFAUT", "setFCATGeneric" ) );
		$this ->assertEquals ( "FICHECATGEN", $this->object ->getFCATGeneric () );
	}

	/**
     * @covers fiche_categorie::lit_fiche_cat
     */
	public function testLit_fiche_cat_generic() {
		$this ->assertSame ( $this->object, $this->object ->lit_fiche_cat ( "/tmp/" . $this->dir . "/" . $this->fichier . ".txt" ) );
		$this ->assertEquals ( 
				array ( 
							'conn' => array ( 
									'*' => array ( 
											'FA' => 'FAR-MUT-APP2', 
											'impact' => '1', 
											'groupe' => 'IMSL_FR_MONITORING' ) ), 
							'conn_prod' => array ( 
									'*' => array ( 
											'FA' => 'FAR-MUT-APP1', 
											'impact' => '2', 
											'groupe' => 'IMSL_FR_MONITORING' ) ), 
							'*' => array ( 
									'*' => array ( 
											'FA' => 'FAR-MUT-APP2', 
											'impact' => '1', 
											'groupe' => 'IMSL_FR_MONITORING' ) ) ), 
					$this->object ->getFCAT () );
	}

	/**
	 * @covers fiche_categorie::retrouve_fiche_cat
	 */
	public function testRetrouve_fiche_cat_False() {
		$hpom = $this ->createMock ( "hpom" );
		$hpom ->expects ( $this ->any () ) 
			->method ( 'getCustomer' ) 
			->will ( $this ->returnValue ( $this->dir ) );
		$hpom ->expects ( $this ->any () ) 
			->method ( 'getNode' ) 
			->will ( $this ->returnValue ( "TESTFILE" ) );
		$this->object ->setHpomObject ( $hpom );
		$this->object ->setFCATGeneric ( "FCAT_GEN" );
		
		$this ->assertFalse ( $this->object ->retrouve_fiche_cat () );
	}

	/**
     * @covers fiche_categorie::retrouve_fiche_cat
     */
	public function testRetrouve_fiche_cat() {
		$hpom = $this ->createMock ( "hpom" );
		$hpom ->expects ( $this ->any () ) 
			->method ( 'getCustomer' ) 
			->will ( $this ->returnValue ( $this->dir ) );
		$hpom ->expects ( $this ->any () ) 
			->method ( 'getNode' ) 
			->will ( $this ->returnValue ( $this->fichier ) );
		$this->object ->setHpomObject ( $hpom );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_fiche_cat () );
	}

	/**
	 * @covers fiche_categorie::retrouve_fiche_cat
	 */
	public function testRetrouve_fiche_cat_generic() {
		$hpom = $this ->createMock ( "hpom" );
		$hpom ->expects ( $this ->any () ) 
			->method ( 'getCustomer' ) 
			->will ( $this ->returnValue ( $this->dir ) );
		$hpom ->expects ( $this ->any () ) 
			->method ( 'getNode' ) 
			->will ( $this ->returnValue ( "FICHIER" ) );
		$this->object ->setHpomObject ( $hpom );
		$this->object ->setFCATGeneric ( $this->fichier . "_GEN.txt" );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_fiche_cat () );
	}

	/**
     * @covers fiche_categorie::valide_xymon
     */
	public function testValide_xymon_False() {
		$hpom = $this ->createMock ( "hpom" );
		$hpom ->expects ( $this ->any () ) 
			->method ( 'getCMAs' ) 
			->will ( $this ->returnValue ( array () ) );
		$this->object ->setHpomObject ( $hpom );
		
		$this ->assertFalse ( $this->object ->valide_xymon () );
	}

	/**
	 * @covers fiche_categorie::valide_xymon
	 */
	public function testValide_xymon_true() {
		$hpom = $this ->createMock ( "hpom" );
		$hpom ->expects ( $this ->any () ) 
			->method ( 'getCMAs' ) 
			->will ( $this ->returnValue ( array ( 
				"xymon" => "1|2|3" ) ) );
		$this->object ->setHpomObject ( $hpom );
		
		$this ->assertTrue ( $this->object ->valide_xymon () );
	}

	/**
	 * @covers fiche_categorie::valide_donnees_ressource
	 */
	public function testValide_donnees_ressource_Exception() {
		$hpom = $this ->createMock ( "hpom" );
		$hpom ->expects ( $this ->any () ) 
			->method ( 'getObjet' ) 
			->will ( $this ->returnValue ( "conn_prod" ) );
		$this->object ->setHpomObject ( $hpom );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS fiche_categorie) pas de ressource dans la fiche CAT' );
		$this->object ->valide_donnees_ressource ();
	}

	/**
     * @covers fiche_categorie::valide_donnees_ressource
     */
	public function testValide_donnees_ressource_True() {
		$hpom = $this ->createMock ( "hpom" );
		$hpom ->expects ( $this ->any () ) 
			->method ( 'getObjet' ) 
			->will ( $this ->returnValue ( "conn_prod" ) );
		$this->object ->setHpomObject ( $hpom );
		$this ->_creerFicheCat ();
		
		$this ->assertTrue ( $this->object ->valide_donnees_ressource () );
	}

	/**
	 * @covers fiche_categorie::valide_donnees_ressource
	 */
	public function testValide_donnees_ressource_defaut() {
		$hpom = $this ->createMock ( "hpom" );
		$hpom ->expects ( $this ->any () ) 
			->method ( 'getObjet' ) 
			->will ( $this ->returnValue ( "NOTEXIST" ) );
		$this->object ->setHpomObject ( $hpom );
		$this ->_creerFicheCat ();
		
		$this ->assertTrue ( $this->object ->valide_donnees_ressource () );
	}

	/**
	 * @covers fiche_categorie::valide_instance
	 */
	public function testvalide_instance_True() {
		$hpom = $this ->createMock ( "hpom" );
		$hpom ->expects ( $this ->any () ) 
			->method ( 'getObjet' ) 
			->will ( $this ->returnValue ( "conn_prod" ) );
		$hpom ->expects ( $this ->any () ) 
			->method ( 'getInstance' ) 
			->will ( $this ->returnValue ( "instance" ) );
		$this->object ->setHpomObject ( $hpom );
		$this ->_creerFicheCat ();
		
		$this ->assertTrue ( $this->object ->valide_instance () );
	}

	/**
	 * @covers fiche_categorie::valide_instance
	 */
	public function testvalide_instance_False() {
		$hpom = $this ->createMock ( "hpom" );
		$hpom ->expects ( $this ->any () ) 
			->method ( 'getObjet' ) 
			->will ( $this ->returnValue ( "conn_prod" ) );
		$this->object ->setHpomObject ( $hpom );
		$this ->_creerFicheCat ();
		
		$this ->assertFalse ( $this->object ->valide_instance () );
	}

	/**
	 * @covers fiche_categorie::valide_instance
	 */
	public function testvalide_instance_True2() {
		$hpom = $this ->createMock ( "hpom" );
		$hpom ->expects ( $this ->any () ) 
			->method ( 'getObjet' ) 
			->will ( $this ->returnValue ( "conn" ) );
		$hpom ->expects ( $this ->any () ) 
			->method ( 'getInstance' ) 
			->will ( $this ->returnValue ( "test" ) );
		$this->object ->setHpomObject ( $hpom );
		$this ->_creerFicheCat ();
		
		$this ->assertTrue ( $this->object ->valide_instance () );
	}

	/**
     * @covers fiche_categorie::gestion_fiche_categorie
     */
	public function testGestion_fiche_categorie_xymon() {
		$hpom = $this ->createMock ( "hpom" );
		$hpom ->expects ( $this ->any () ) 
			->method ( 'getCMAs' ) 
			->will ( $this ->returnValue ( array ( 
				"xymon" => "1|2|3" ) ) );
		$this->object ->setHpomObject ( $hpom );
		
		$this ->assertSame ( $this->object, $this->object ->gestion_fiche_categorie () );
	}

	/**
	 * @covers fiche_categorie::gestion_fiche_categorie
	 */
	public function testGestion_fiche_categorie_hp() {
		$hpom = $this ->createMock ( "hpom" );
		$hpom ->expects ( $this ->any () ) 
			->method ( 'getCMAs' ) 
			->will ( $this ->returnValue ( array () ) );
		$hpom ->expects ( $this ->any () ) 
			->method ( 'getObjet' ) 
			->will ( $this ->returnValue ( "conn_prod" ) );
		$this ->_creerFicheCat ();
		$this->object ->setHpomObject ( $hpom );
		
		$this ->assertSame ( $this->object, $this->object ->gestion_fiche_categorie () );
	}

	/**
     * @covers fiche_categorie::convert_hobinv_service_vers_priorite
     */
	public function testConvert_hobinv_service_vers_priorite() {
		$this ->assertEquals ( 1, $this->object ->convert_hobinv_service_vers_priorite ( "GOLD" ) );
		$this ->assertEquals ( 2, $this->object ->convert_hobinv_service_vers_priorite ( "SILVER" ) );
		$this ->assertEquals ( 3, $this->object ->convert_hobinv_service_vers_priorite ( "BRONZE" ) );
		$this ->assertEquals ( 4, $this->object ->convert_hobinv_service_vers_priorite ( "OTHER" ) );
	}

	/**
     * @covers fiche_categorie::retrouve_priorite
     */
	public function testRetrouve_priorite() {
		$hpom = $this ->createMock ( "hpom" );
		$hpom ->expects ( $this ->any () ) 
			->method ( 'getCustomer' ) 
			->will ( $this ->returnValue ( "IMSL" ) );
		$this ->_creerFicheCat ();
		$this->object ->setHpomObject ( $hpom );
		$this ->assertSame ( $this->object, $this->object ->retrouve_priorite () );
	}

	/**
	 * @covers fiche_categorie::retrouve_priorite
	 */
	public function testRetrouve_priorite_customer() {
		$hpom = $this ->createMock ( "hpom" );
		$hpom ->expects ( $this ->any () ) 
			->method ( 'getCustomer' ) 
			->will ( $this ->returnValue ( "CUSTOMER" ) );
		$this ->_creerFicheCat ();
		$this->object ->setHpomObject ( $hpom );
		$this ->assertSame ( $this->object, $this->object ->retrouve_priorite () );
	}
}
