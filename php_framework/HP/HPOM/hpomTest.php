<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-05-18 at 14:41:08.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class hpomTest extends MockedListeOptions {
	/**
     * @var hpom
     */
	protected $object;
	protected $fichier;

	public static function tearDownAfterClass() {
		system ( "rm -f /tmp/hpomTests_*.txt", $retour );
	}

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = new hpom ( false, "TESTS hpom" );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers hpom::supprime_fqdn
     */
	public function testSupprime_fqdn() {
		$this->assertEquals ( "HOSTNAME", $this->object->supprime_fqdn ( 'HOSTNAME.DOMAIN.COM' ) );
		$this->assertEquals ( "HOSTNAME", $this->object->supprime_fqdn ( 'HOSTNAME' ) );
	}

	/**
     * @covers hpom::retrouve_hpom_param
     */
	public function testRetrouve_hpom_param() {
		$CMA1 = new stdClass ();
		$CMA1->name = "incident_descr";
		$CMA1->value = "VALUE1";
		
		$CMA2 = new stdClass ();
		$CMA2->name = "instance";
		$CMA2->value = "VALUE2";
		
		//On ne peut pas utiliser l'objet COM 
		$wmiobj = $this->createMock ( 'WMI' );
		$wmiobj->PrimaryNodeName = 'HOSTNAME.DOMAIN';
		$wmiobj->MessageGroup = 'GROUP';
		$wmiobj->Application = 'OPS';
		$wmiobj->Severity = '1';
		$wmiobj->Text = 'TEXTE ALARM';
		$wmiobj->Object = "Text";
		$wmiobj->CMAs = array (
				$CMA1,
				$CMA2 
		);
		$this->object->setWmiObject ( $wmiobj );
		
		$this->assertSame ( $this->object, $this->object->retrouve_hpom_param () );
		$this->assertEquals ( "VALUE2", $this->object->getInstance () );
	}

	/**
     * @covers hpom::gere_description
     */
	public function testGere_description() {
		$this->assertSame ( $this->object, $this->object->gere_description ( "DESCRIPTION" ) );
		$this->assertEquals ( "NODE : 
DESCRIPTION", $this->object->getDescription () );
	}

	/**
     * @covers hpom::gere_subarea
     */
	public function testGere_subarea() {
		$this->object->setApplication ( "APP1" );
		$this->object->setObjet ( "OBJ" );
		$this->assertSame ( $this->object, $this->object->gere_subarea () );
		$this->assertEquals ( "APP1_OBJ", $this->object->getSubArea () );
	}

	/**
     * @covers hpom::traite_message_interne_hpom
     */
	public function testTraite_message_interne_hpom_False() {
		$this->assertFalse ( $this->object->traite_message_interne_hpom () );
	}

	/**
	 * @covers hpom::traite_message_interne_hpom
	 */
	public function testTraite_message_interne_hpom_True() {
		$this->fichier="/tmp/hpomTests_" . getmypid () . ".txt";
		$datas = "# DATAS :

NODE1;CUSTOMER1
buffering messages : MESSAGE
		
				";
		
		system ( "echo '" . $datas . "' > " . $this->fichier, $retour );
		$this->object->setCustomer ( "OPENVIEW" );
		$this->object->setNode("NODE1");
		$this->getListeOption ()
			->expects ( $this->any () )
			->method ( 'getOption' )
			->will ( $this->returnValue ( $this->fichier ) );
		$this->object->setListeOptions ( $this->getListeOption () );
		$this->assertTrue ( $this->object->traite_message_interne_hpom () );
	}
}
