<?php
namespace Zorille\framework;
use \Exception as Exception;
/**
 * @ignore
 */
$INCLUDE_HPOM = true;
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

require_once __DOCUMENT_ROOT__ . "/APIWeb/HP/HPOM/Zorille_framework_hpom_client.class.php";

use Zorille\framework;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-07-29 at 08:43:09.
 */
class hpom_clientTest extends MockedListeOptions {
	/**
     * @var hpom_client
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		
		$this->object = new hpom_client ( false, "TESTS hpom_client" );
		$fctsStandard = $this ->createMock('Zorille\framework\fonctions_standards' );
		$fctsStandard ->expects ( $this ->any () ) 
			->method ( 'applique_commande_systeme' ) 
			->will ( $this ->returnValue ( array ( 
				0 ) ) );
		
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'getOption' ) 
			->will ( $this ->returnValue ( 'localhost' ) );
		
		$this->object ->setListeOptions ( $this ->getListeOption () ) 
			->retrouve_hpom_client_param ();
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
		system ( "rm -f /tmp/CMD_hpom_client", $retour );
	}

	/**
	 * @covers Zorille\framework\hpom_client::retrouve_hpom_client_param
	 */
	public function testRetrouve_hpom_client_param_Exception() {
		$this->object ->getListeOptions () 
			->expects ( $this ->at ( 0 ) ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( false ) );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS hpom_client) Il manque les parametres clients hpom.' );
		$this->object ->retrouve_hpom_client_param ();
	}

	/**
	 * @covers Zorille\framework\hpom_client::retrouve_hpom_client_param
	 */
	public function testRetrouve_hpom_client_param() {
		$this->object ->getListeOptions () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->onConsecutiveCalls ( true, false ) );
		$this ->assertInstanceOf ( 'Zorille\framework\hpom_client', $this->object ->retrouve_hpom_client_param () );
		$this ->assertEquals ( "", $this->object ->getHpomClientCmd () );
		
		$this->object ->getListeOptions () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this->object ->getListeOptions () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->onConsecutiveCalls ( "/tmp", "CMD_hpom_client" ) );
			$this ->assertInstanceOf ( 'Zorille\framework\hpom_client', $this->object ->retrouve_hpom_client_param () );
		$this ->assertEquals ( "/tmp/CMD_hpom_client", $this->object ->getHpomClientCmd () );
	}

	/**
     * @covers Zorille\framework\hpom_client::gestion_severite
     */
	public function testGestion_severite() {
		$this->object ->gestion_severite ( "normal" );
		$this ->assertEquals ( "normal", $this->object ->getSeverite () );
		$this->object ->gestion_severite ( "NorMal" );
		$this ->assertEquals ( "normal", $this->object ->getSeverite () );
		$this->object ->gestion_severite ( "major" );
		$this ->assertEquals ( "major", $this->object ->getSeverite () );
		$this->object ->gestion_severite ( "critical" );
		$this ->assertEquals ( "critical", $this->object ->getSeverite () );
		$this->object ->gestion_severite ( "minor" );
		$this ->assertEquals ( "minor", $this->object ->getSeverite () );
		$this->object ->gestion_severite ( "unknown" );
		$this ->assertEquals ( "unknown", $this->object ->getSeverite () );
		$this->object ->gestion_severite ( "good" );
		$this ->assertEquals ( "normal", $this->object ->getSeverite () );
		$this->object ->gestion_severite ( "Informational" );
		$this ->assertEquals ( "normal", $this->object ->getSeverite () );
		$this->object ->gestion_severite ( "warning" );
		$this ->assertEquals ( "major", $this->object ->getSeverite () );
		$this->object ->gestion_severite ( "error" );
		$this ->assertEquals ( "critical", $this->object ->getSeverite () );
		$this->object ->gestion_severite ( "" );
		$this ->assertEquals ( "minor", $this->object ->getSeverite () );
		$this->object ->gestion_severite ( "defaut" );
		$this ->assertEquals ( "minor", $this->object ->getSeverite () );
	}

	/**
     * @covers Zorille\framework\hpom_client::CreerCommandeHpomClient
     */
	public function testCreerCommandeHpomClient() {
		system ( "echo 'echo IDTest;exit 0' > /tmp/CMD_hpom_client;chmod +x /tmp/CMD_hpom_client", $retour );
		$this->object ->setHpomClientCmd ( "/tmp/CMD_hpom_client" );
		foreach ( $this->object ->getOptions () as $nom => $valeur ) {
			if ($nom == "alert_time") {
				$alert_time = $valeur;
				break;
			}
		}
		
		$this ->assertEquals ( "/tmp/CMD_hpom_client -id msg_grp= node=\"\" severity= application= object='' msg_text=\" erreur sur \" -option source_host=\"localhost\" -option alert_time=\"" . $alert_time . "\"", $this->object ->creerCommandeHpomClient () );
		$this ->assertEquals ( 
				"/tmp/CMD_hpom_client -id msg_grp= node=\"\" severity= application= object='' -option instance=\"instance1\" msg_text=\" [instance1] erreur sur \" -option source_host=\"localhost\" -option alert_time=\"" . $alert_time . "\"", 
					$this->object ->creerCommandeHpomClient ( "instance1" ) );
		
		$this->object ->setNode ( "Node1" );
		$this ->assertEquals ( "/tmp/CMD_hpom_client -id msg_grp= node=\"NODE1\" severity= application= object='' msg_text=\" erreur sur Node1\" -option source_host=\"localhost\" -option alert_time=\"" . $alert_time . "\"", $this->object ->creerCommandeHpomClient () );
		
		$this->object ->setSeverite ( "major" );
		$this ->assertEquals ( "/tmp/CMD_hpom_client -id msg_grp= node=\"NODE1\" severity=major application= object='' msg_text=\" erreur sur Node1\" -option source_host=\"localhost\" -option alert_time=\"" . $alert_time . "\"", $this->object ->creerCommandeHpomClient () );
		
		$this->object ->setMsgGrp ( "WINDOWS" );
		$this ->assertEquals ( "/tmp/CMD_hpom_client -id msg_grp=WINDOWS node=\"NODE1\" severity=major application= object='' msg_text=\" erreur sur Node1\" -option source_host=\"localhost\" -option alert_time=\"" . $alert_time . "\"", $this->object ->creerCommandeHpomClient () );
		
		$this->object ->setInstances ( "instance1" );
		$this ->assertEquals ( "/tmp/CMD_hpom_client -id msg_grp=WINDOWS node=\"NODE1\" severity=major application= object='' msg_text=\" erreur sur Node1\" -option source_host=\"localhost\" -option alert_time=\"" . $alert_time . "\"", $this->object ->creerCommandeHpomClient () );
		
		$this->object ->setApplication ( "APPS" );
		$this ->assertEquals ( "/tmp/CMD_hpom_client -id msg_grp=WINDOWS node=\"NODE1\" severity=major application=APPS object='' msg_text=\" erreur sur Node1\" -option source_host=\"localhost\" -option alert_time=\"" . $alert_time . "\"", $this->object ->creerCommandeHpomClient () );
		
		$this->object ->setAppendMsgText ( "Append TXT" );
		$this ->assertEquals ( "/tmp/CMD_hpom_client -id msg_grp=WINDOWS node=\"NODE1\" severity=major application=APPS object='' msg_text=\" erreur sur Node1 : Append TXT\" -option source_host=\"localhost\" -option alert_time=\"" . $alert_time . "\"", $this->object ->creerCommandeHpomClient () );
		
		$this->object ->setObjet ( "Ressource" );
		$this ->assertEquals ( 
				"/tmp/CMD_hpom_client -id msg_grp=WINDOWS node=\"NODE1\" severity=major application=APPS object='RESSOURCE' msg_text=\"Ressource erreur sur Node1 : Append TXT\" -option source_host=\"localhost\" -option alert_time=\"" . $alert_time . "\"", 
					$this->object ->creerCommandeHpomClient () );
		
		$this->object ->setMsgText ( "Message particulier" );
		$this ->assertEquals ( 
				"/tmp/CMD_hpom_client -id msg_grp=WINDOWS node=\"NODE1\" severity=major application=APPS object='RESSOURCE' msg_text=\"Message particulier : Append TXT\" -option source_host=\"localhost\" -option alert_time=\"" . $alert_time . "\"", 
					$this->object ->creerCommandeHpomClient () );
		
		$this->object ->AjouteOption ( "incident_descr", "Corp du Message\navec du texte" );
		$this ->assertEquals ( 
				"/tmp/CMD_hpom_client -id msg_grp=WINDOWS node=\"NODE1\" severity=major application=APPS object='RESSOURCE' msg_text=\"Message particulier : Append TXT\" -option source_host=\"localhost\" -option alert_time=\"" . $alert_time . "\" -option incident_descr=\"Corp du Message
avec du texte\"", 
					$this->object ->creerCommandeHpomClient () );
		//define ( "PHP_OS", 'WIN' );
		//$this->assertEquals ( "/tmp/CMD_hpom_client -id msg_grp=WINDOWS node=NODE1 severity=major application=APPS object='RESSOURCE' msg_text=\"Message particulier : Append TXT\" -option source_host=\"localhost\" -option alert_time=\"" . $alert_time . "\" -option incident_descr=\"Corp du Message<br/>avec du texte\"", $this->object->creerCommandeHpomClient () );
	}

	/**
     * @covers Zorille\framework\hpom_client::envoi_hpom_datas
     */
	public function testEnvoi_hpom_datas() {
		system ( "echo 'exit 1' > /tmp/CMD_hpom_client;chmod +x /tmp/CMD_hpom_client", $retour );
		$this->object ->setHpomClientCmd ( "/tmp/CMD_hpom_client" );
		
		$this ->assertTrue ( $this->object ->envoi_hpom_datas () );
		$this->object ->setInstances ( "test" );
		$this ->assertTrue ( $this->object ->envoi_hpom_datas () );
	}
}
