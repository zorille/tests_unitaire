<?php
namespace Zorille\framework;
use \Exception as Exception;
use \SoapClient as SoapClient;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-05-18 at 14:43:14.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class hpom_soap_IncidentsvcTest extends MockedListeOptions {
	/**
     * @var hpom_soap_Incidentsvc
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$soap = $this->createMock('Zorille\framework\soap' );
		
		$this->object = new hpom_soap_Incidentsvc ( false, "TESTS hpom_soap_Incidentsvc" );
		$this->object->setSoapConnection ( $soap )
			->setListeOptions ( $this->getListeOption () );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers Zorille\framework\hpom_soap_Incidentsvc::connect
     */
	public function testConnect_False() {
		$this->object->getSoapConnection ()
			->expects ( $this->any () )
			->method ( 'setCacheWsdl' )
			->will ( $this->returnSelf () );
		$this->object->getSoapConnection ()
			->expects ( $this->any () )
			->method ( 'retrouve_variables_tableau' )
			->will ( $this->returnSelf () );
		$this->object->getSoapConnection ()
			->expects ( $this->any () )
			->method ( 'connect' )
			->will ( $this->returnValue ( true ) );
		
		$this->assertFalse ( $this->object->connect ( "SIS_TEST" ) );
	}

	/**
	 * _prepareSoapRequest
	 */
	private function _prepareSoapRequest($call_return) {
	    $SoapClient = $this->createMock('SoapClient' );
		$SoapClient->expects ( $this->any () )
		->method ( '__call' )
		->will ( $call_return );
		$soap = $this->createMock('Zorille\framework\soap' );
		$soap->expects ( $this->any () )
		->method ( 'getSoapClient' )
		->will ( $this->returnValue ( $SoapClient ) );
		$soap->expects ( $this->any () )
		->method ( 'setCacheWsdl' )
		->will ( $this->returnSelf () );
		$soap->expects ( $this->any () )
		->method ( 'retrouve_variables_tableau' )
		->will ( $this->returnSelf () );
		$soap->expects ( $this->any () )
		->method ( 'connect' )
		->will ( $this->returnSelf () );
		$this->object->setSoapConnection ( $soap );
	}
	
	/**
	 * @covers Zorille\framework\hpom_soap_Incidentsvc::applique_requete_soap
	 */
	public function testApplique_requete_soap_False() {
		$this->object->getListeOptions ()
		->method ( 'getOption' )
		->will ( $this->returnValue ( true ) );
	
		$this->assertFalse ( $this->object->applique_requete_soap ( "TEST", array () ) );
	}
	
	/**
	 * @covers Zorille\framework\hpom_soap_Incidentsvc::applique_requete_soap
	 */
	public function testApplique_requete_soap_applique_requete_soap() {
		$this->object->getListeOptions ()
		->method ( 'getOption' )
		->will ( $this->returnValue ( false ) );
	
		$this->_prepareSoapRequest ( $this->returnValue ( array (
				"applique_requete_soap"
		) ) );
		$this->assertEquals ( array (
				"applique_requete_soap"
		), $this->object->applique_requete_soap ( "TEST", array () ) );
	}
	
	/**
	 * @covers Zorille\framework\hpom_soap_Incidentsvc::applique_requete_soap
	 */
	public function testApplique_requete_soap_Exception() {
		$this->object->getListeOptions ()
		->method ( 'getOption' )
		->will ( $this->returnValue ( false ) );
	
		$this->_prepareSoapRequest ( $this->throwException ( new Exception ( 'EXCEP1' ) ) );
		$this->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS hpom_soap_Incidentsvc) EXCEP1' );
		$this->object->applique_requete_soap ( "TEST", array () );
	}
}
