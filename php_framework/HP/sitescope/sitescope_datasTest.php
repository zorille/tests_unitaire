<?php
namespace Zorille\framework;
use \Exception as Exception;
use \SoapClient as SoapClient;
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-26 at 11:06:09.
 */
class sitescope_datasTest extends MockedListeOptions {
	/**
     * @var sitescope_datas
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		
		$utilisateurs = $this ->createMock('Zorille\framework\utilisateurs' );
		$utilisateurs ->expects ( $this ->any () ) 
			->method ( 'retrouve_utilisateurs_array' ) 
			->will ( $this ->returnValue ( $utilisateurs ) );
		$utilisateurs ->expects ( $this ->any () ) 
			->method ( 'getUsername' ) 
			->will ( $this ->returnValue ( 'USER1' ) );
		$utilisateurs ->expects ( $this ->any () ) 
			->method ( 'getPassword' ) 
			->will ( $this ->returnValue ( 'PASS1' ) );
		$soap = $this ->createMock('Zorille\framework\soap' );
		
		$this->object = new sitescope_datas ( false, "TESTS sitescope_datas" );
		$this->object ->setSoapConnection ( $soap ) 
			->setListeOptions ( $this ->getListeOption () ) 
			->setObjetUtilisateurs ( $utilisateurs );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * @covers Zorille\framework\sitescope_datas::retrouve_sitescope_param
	 */
	public function testRetrouve_sitescope_param_Exception() {
		$this->object ->getListeOptions () 
			->expects ( $this ->at ( 0 ) ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( false ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS sitescope_datas) Il manque les parametres clients sitescope.' );
		$this->object ->retrouve_sitescope_param ();
	}

	/**
	 * @covers Zorille\framework\sitescope_datas::retrouve_sitescope_param
	 */
	public function testRetrouve_sitescope_param_Exception2() {
		$this->object ->getListeOptions () 
			->expects ( $this ->at ( 0 ) ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this->object ->getListeOptions () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( array ( 
				"#comment" => "et voila un commentaire", 
				"nom" => "SIS_TEST" ) ) );
		$this->object ->getListeOptions () 
			->expects ( $this ->at ( 2 ) ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( false ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS sitescope_datas) Il manque les parametres WSDL pour sitescope.' );
		$this->object ->retrouve_sitescope_param ();
	}

	/**
     * @covers Zorille\framework\sitescope_datas::retrouve_sitescope_param
     */
	public function testRetrouve_sitescope_param() {
		$this->object ->getListeOptions () 
			->expects ( $this ->at ( 0 ) ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this->object ->getListeOptions () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( array ( 
				"#comment" => "et voila un commentaire", 
				"nom" => "SIS_TEST" ) ) );
		$this->object ->getListeOptions () 
			->expects ( $this ->at ( 2 ) ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->assertInstanceOf ( 'Zorille\framework\sitescope_datas', $this->object ->retrouve_sitescope_param () );
	}

	/**
     * @covers Zorille\framework\sitescope_datas::valide_presence_sitescope_data
     */
	public function testValide_presence_sitescope_data() {
		$this->object ->setServeurData ( array ( 
				"sis_name_test" => array ( 
						"nom" => "SIS_TEST" ) ) );
		
		$this ->assertFalse ( $this->object ->valide_presence_sitescope_data ( "NO_SIS" ) );
		$this ->assertEquals ( array ( 
				"nom" => "SIS_TEST", 
				'username' => 'USER1', 
				'password' => 'PASS1' ), $this->object ->valide_presence_sitescope_data ( "SIS_TEST" ) );
	}

	/**
	 * @covers Zorille\framework\sitescope_datas::connexion
	 */
	public function testConnexion_Exception() {
		$this->object ->setServeurData ( array ( 
				"sis_name_test" => array ( 
						"nom" => "SIS_TEST" ) ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS sitescope_datas) Il faut un nom de sitescope pour se connecter.' );
		$this->object ->connexion ( "", "" );
	}

	/**
	 * @covers Zorille\framework\sitescope_datas::connexion
	 */
	public function testConnexion_Exception2() {
		$this->object ->setServeurData ( array ( 
				"sis_name_test" => array ( 
						"nom" => "SIS_TEST" ) ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS sitescope_datas) Il faut un wsdl de sitescope pour se connecter.' );
		$this->object ->connexion ( "SIS_TEST", "" );
	}

	/**
	 * @covers Zorille\framework\sitescope_datas::connexion
	 */
	public function testConnexion_Exception3() {
		$this->object ->setServeurData ( array ( 
				"sis_name_test" => array ( 
						"nom" => "SIS_TEST" ) ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS sitescope_datas) Ce wsdl WSDL_TEST n\'existe pas.' );
		$this->object ->connexion ( "SIS_TEST", "WSDL_TEST" );
	}

	/**
	 * @covers Zorille\framework\sitescope_datas::connexion
	 */
	public function testConnexion_False() {
		$this->object ->getSoapConnection () 
			->expects ( $this ->any () ) 
			->method ( 'setCacheWsdl' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getSoapConnection () 
			->expects ( $this ->any () ) 
			->method ( 'retrouve_variables_tableau' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getSoapConnection () 
			->expects ( $this ->any () ) 
			->method ( 'connect' ) 
			->will ( $this ->returnValue ( true ) );
		
		$this ->assertFalse ( $this->object ->connexion ( "SIS_TEST", "WSDL_TEST" ) );
	}

	/**
	 * @covers Zorille\framework\sitescope_datas::connexion
	 */
	public function testConnexion() {
		$this->object ->setServeurData ( array ( 
				"sis_name_test" => array ( 
						"nom" => "SIS_TEST" ) ) );
		$this->object ->setWsdlData ( array ( 
				"WSDL_TEST" => "WSDL" ) );
		
		$this->object ->getSoapConnection () 
			->expects ( $this ->any () ) 
			->method ( 'setCacheWsdl' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getSoapConnection () 
			->expects ( $this ->any () ) 
			->method ( 'retrouve_variables_tableau' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getSoapConnection () 
			->expects ( $this ->any () ) 
			->method ( 'connect' ) 
			->will ( $this ->returnValue ( true ) );
		
		$this ->assertTrue ( $this->object ->connexion ( "SIS_TEST", "WSDL_TEST" ) );
	}

	/**
	 * _prepareSoapRequest
	 */
	private function _prepareSoapRequest($call_return) {
	    $SoapClient = $this ->createMock('SoapClient' );
		$SoapClient ->expects ( $this ->any () ) 
			->method ( '__call' ) 
			->will ( $call_return );
		$soap = $this ->createMock('Zorille\framework\soap' );
		$soap ->expects ( $this ->any () ) 
			->method ( 'getSoapClient' ) 
			->will ( $this ->returnValue ( $SoapClient ) );
		$soap ->expects ( $this ->any () ) 
			->method ( 'setCacheWsdl' ) 
			->will ( $this ->returnSelf () );
		$soap ->expects ( $this ->any () ) 
			->method ( 'retrouve_variables_tableau' ) 
			->will ( $this ->returnSelf () );
		$soap ->expects ( $this ->any () ) 
			->method ( 'connect' ) 
			->will ( $this ->returnSelf () );
		$this->object ->setSoapConnection ( $soap );
	}

	/**
	 * @covers Zorille\framework\sitescope_datas::applique_requete_soap
	 */
	public function testApplique_requete_soap_False() {
		$this->object ->getListeOptions () 
			->method ( 'getOption' ) 
			->will ( $this ->returnValue ( true ) );
		
		$this ->assertFalse ( $this->object ->applique_requete_soap ( "TEST", array () ) );
	}

	/**
	 * @covers Zorille\framework\sitescope_datas::applique_requete_soap
	 */
	public function testApplique_requete_soap_applique_requete_soap() {
		$this->object ->getListeOptions () 
			->method ( 'getOption' ) 
			->will ( $this ->returnValue ( false ) );
		
		$this ->_prepareSoapRequest ( $this ->returnValue ( array ( 
				"applique_requete_soap" ) ) );
		$this ->assertEquals ( array ( 
				"applique_requete_soap" ), $this->object ->applique_requete_soap ( "TEST", array () ) );
	}

	/**
	 * @covers Zorille\framework\sitescope_datas::applique_requete_soap
	 */
	public function testApplique_requete_soap_Exception() {
		$this->object ->getListeOptions () 
			->method ( 'getOption' ) 
			->will ( $this ->returnValue ( false ) );
		
		$this ->_prepareSoapRequest ( $this ->throwException ( new Exception ( 'EXCEP1' ) ) );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS sitescope_datas) EXCEP1' );
		$this->object ->applique_requete_soap ( "TEST", array () );
	}
}
