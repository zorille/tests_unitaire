<?php
namespace Zorille\framework;
use \Exception as Exception;
use \SoapClient as SoapClient;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-26 at 11:06:09.
 */
if (! defined('__DOCUMENT_ROOT__')) {
    require_once $_SERVER["PWD"] . '/prepare.php';
}

class sitescope_soap_configurationTest extends MockedListeOptions
{

    /**
     *
     * @var sitescope_soap_configuration
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        ob_start();
        $soap = $this->createMock('Zorille\framework\soap');
        
        $this->object = new sitescope_soap_configuration(false, "TESTS sitescope_soap_configuration");
        $this->object->setSoapConnection($soap)->setListeOptions($this->getListeOption());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        ob_end_clean();
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::connect
     */
    public function testConnect_False()
    {
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('setCacheWsdl')
            ->will($this->returnSelf());
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('retrouve_variables_tableau')
            ->will($this->returnSelf());
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('connect')
            ->will($this->returnValue(true));
        
        $this->assertFalse($this->object->connect("SIS_TEST"));
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::retrouve_FullConfiguration_sitescope
     */
    public function testRetrouve_toutes_les_preferences_Exception()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->with('getFullConfigurationSnapshot')
            ->will($this->throwException(new Exception('EXCEP1')));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS sitescope_soap_configuration) EXCEP1');
        $this->object->retrouve_FullConfiguration_sitescope();
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::retrouve_FullConfiguration_sitescope
     */
    public function testRetrouve_toutes_les_preferences_True()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->returnValue(array(
            "DATA1",
            "DATA2"
        )));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertEquals(array(
            "DATA1",
            "DATA2"
        ), $this->object->retrouve_FullConfiguration_sitescope());
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::retrouve_MonitoringStatus_sitescope
     */
    public function testretrouve_FullConfiguration_sitescope_Exception()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->with('getSiteScopeMonitoringStatus')
            ->will($this->throwException(new Exception('EXCEP1')));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS sitescope_soap_configuration) EXCEP1');
        $this->object->retrouve_MonitoringStatus_sitescope();
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::retrouve_MonitoringStatus_sitescope
     */
    public function testretrouve_FullConfiguration_sitescope_True()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->returnValue(array(
            "DATA1",
            "DATA2"
        )));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertEquals(array(
            "DATA1",
            "DATA2"
        ), $this->object->retrouve_MonitoringStatus_sitescope());
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::disableAssociatedAlerts
     */
    public function testdisableAssociatedAlerts_Exception()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->throwException(new Exception('EXCEP1')));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS sitescope_soap_configuration) EXCEP1');
        $this->object->disableAssociatedAlerts("PATH", 1, 2, "DESC");
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::disableAssociatedAlerts
     */
    public function testdisableAssociatedAlerts_True()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->returnValue(array(
            "DATA1",
            "DATA2"
        )));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertTrue($this->object->disableAssociatedAlerts("PATH", 1, 2, "DESC"));
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::enableAssociatedAlerts
     */
    public function testenableAssociatedAlerts_Exception()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->throwException(new Exception('EXCEP1')));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS sitescope_soap_configuration) EXCEP1');
        $this->object->enableAssociatedAlerts("PATH", "DESC");
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::enableAssociatedAlerts
     */
    public function testenableAssociatedAlerts_True()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->returnValue(array(
            "DATA1",
            "DATA2"
        )));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertTrue($this->object->enableAssociatedAlerts("PATH", "DESC"));
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::deleteGroupEx
     */
    public function testdeleteGroupEx_Exception()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->throwException(new Exception('EXCEP1')));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS sitescope_soap_configuration) EXCEP1');
        $this->object->deleteGroupEx("PATH", "DESC");
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::deleteGroupEx
     */
    public function testdeleteGroupEx_True()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->returnValue(array(
            "DATA1",
            "DATA2"
        )));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertTrue($this->object->deleteGroupEx("PATH", "DESC"));
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::disableGroupFullPathEx
     */
    public function testdisableGroupFullPathEx_Exception()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->throwException(new Exception('EXCEP1')));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS sitescope_soap_configuration) EXCEP1');
        $this->object->disableGroupFullPathEx("PATH", 1);
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::disableGroupFullPathEx
     */
    public function testdisableGroupFullPathEx_True()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->returnValue(array(
            "DATA1",
            "DATA2"
        )));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertTrue($this->object->disableGroupFullPathEx("PATH", 1));
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::disableGroupWithDescription
     */
    public function testdisableGroupWithDescription_Exception()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->throwException(new Exception('EXCEP1')));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS sitescope_soap_configuration) EXCEP1');
        $this->object->disableGroupWithDescription("PATH", 1, 2, "DESC");
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::disableGroupWithDescription
     */
    public function testdisableGroupWithDescription_True()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->returnValue(array(
            "DATA1",
            "DATA2"
        )));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertTrue($this->object->disableGroupWithDescription("PATH", 1, 2, "DESC"));
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::enableGroupEx
     */
    public function testenableGroupEx_Exception()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->throwException(new Exception('EXCEP1')));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS sitescope_soap_configuration) EXCEP1');
        $this->object->enableGroupEx("PATH", "DESC");
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::enableGroupEx
     */
    public function testenableGroupEx_True()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->returnValue(array(
            "DATA1",
            "DATA2"
        )));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertTrue($this->object->enableGroupEx("PATH", "DESC"));
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::deleteMonitorEx
     */
    public function testdeleteMonitorEx_Exception()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->throwException(new Exception('EXCEP1')));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS sitescope_soap_configuration) EXCEP1');
        $this->object->deleteMonitorEx("PATH", "DESC");
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::deleteMonitorEx
     */
    public function testdeleteMonitorEx_True()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->returnValue(array(
            "DATA1",
            "DATA2"
        )));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertTrue($this->object->deleteMonitorEx("PATH", "DESC"));
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::disableMonitorEx
     */
    public function testdisableMonitorEx_Exception()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->throwException(new Exception('EXCEP1')));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS sitescope_soap_configuration) EXCEP1');
        $this->object->disableMonitorEx("PATH", 1);
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::disableMonitorEx
     */
    public function testdisableMonitorEx_True()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->returnValue(array(
            "DATA1",
            "DATA2"
        )));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertTrue($this->object->disableMonitorEx("PATH", 1));
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::disableMonitorWithDescription
     */
    public function testdisableMonitorWithDescription_Exception()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->throwException(new Exception('EXCEP1')));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS sitescope_soap_configuration) EXCEP1');
        $this->object->disableMonitorWithDescription("PATH", 1, 2, "DESC");
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::disableMonitorWithDescription
     */
    public function testdisableMonitorWithDescription_True()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->returnValue(array(
            "DATA1",
            "DATA2"
        )));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertTrue($this->object->disableMonitorWithDescription("PATH", 1, 2, "DESC"));
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::enableMonitorWithDescription
     */
    public function testenableMonitorWithDescription_Exception()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->throwException(new Exception('EXCEP1')));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS sitescope_soap_configuration) EXCEP1');
        $this->object->enableMonitorWithDescription("PATH", "DESC");
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::enableMonitorWithDescription
     */
    public function testenableMonitorWithDescription_True()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->returnValue(array(
            "DATA1",
            "DATA2"
        )));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertTrue($this->object->enableMonitorWithDescription("PATH", "DESC"));
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::getMonitorSnapshots
     */
    public function testgetMonitorSnapshots_Exception()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->throwException(new Exception('EXCEP1')));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS sitescope_soap_configuration) EXCEP1');
        $this->object->getMonitorSnapshots("PATH", "PROPS");
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::getMonitorSnapshots
     */
    public function testgetMonitorSnapshots_True()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->returnValue(array(
            "DATA1",
            "DATA2"
        )));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertEquals(array(
            "DATA1",
            "DATA2"
        ), $this->object->getMonitorSnapshots("PATH", "PROPS"));
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::getMonitorSnapshots
     */
    public function testgetMonitorSnapshots_ArrayTrue()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->returnValue(array(
            "DATA1",
            "DATA2"
        )));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertEquals(array(
            "DATA1",
            "DATA2"
        ), $this->object->getMonitorSnapshots(array(
            "PATH1",
            "PATH2"
        ), "PROPS"));
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::deleteRemote
     */
    public function testdeleteRemote_Exception()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->throwException(new Exception('EXCEP1')));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS sitescope_soap_configuration) EXCEP1');
        $this->object->deleteRemote("UNIX", "NAME1");
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::deleteRemote
     */
    public function testdeleteRemote_OS_Exception()
    {
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS sitescope_soap_configuration) L\'OS doit etre WINDOWS ou UNIX');
        $this->object->deleteRemote("OS1", "NAME1");
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::deleteRemote
     */
    public function testdeleteRemote_True()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->returnValue(array(
            "DATA1",
            "DATA2"
        )));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertTrue($this->object->deleteRemote("UNIX", "NAME2"));
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::deploySingleTemplateEx
     */
    public function testdeploySingleTemplateEx_Exception()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->throwException(new Exception('EXCEP1')));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS sitescope_soap_configuration) EXCEP1');
        $this->object->deploySingleTemplateEx("PATH", array(), "DESC");
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::deploySingleTemplateEx
     */
    public function testdeploySingleTemplateEx_True()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->returnValue(array(
            "DATA1",
            "DATA2"
        )));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertTrue($this->object->deploySingleTemplateEx("PATH", array(), "DESC"));
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::deploySingleTemplateWithResult
     */
    public function testdeploySingleTemplateWithResult_Exception()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->throwException(new Exception('EXCEP1')));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS sitescope_soap_configuration) EXCEP1');
        $this->object->deploySingleTemplateWithResult("PATH", 1, 2, "DESC");
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::deploySingleTemplateWithResult
     */
    public function testdeploySingleTemplateWithResult_java_lang_Exception()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->throwException(new Exception("java.lang.IndexOutOfBoundsException: Index: 0, Size: 0")));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertEquals(array(), $this->object->deploySingleTemplateWithResult("PATH", 1, 2, "DESC"));
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::deploySingleTemplateWithResult
     */
    public function testdeploySingleTemplateWithResult_True()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->returnValue(array(
            "DATA1",
            "DATA2"
        )));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertEquals(array(
            "DATA1",
            "DATA2"
        ), $this->object->deploySingleTemplateWithResult("PATH", 1, 2, "DESC"));
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::publishTemplateChanges
     */
    public function testpublishTemplateChanges_Exception()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->throwException(new Exception('EXCEP1')));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(TESTS sitescope_soap_configuration) EXCEP1');
        $this->object->publishTemplateChanges("PATH", array(), false, false);
    }

    /**
     * @covers Zorille\framework\sitescope_soap_configuration::publishTemplateChanges
     */
    public function testpublishTemplateChanges_True()
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        $SoapClient->expects($this->any())
            ->method('__call')
            ->will($this->returnValue(array(
            "DATA1",
            "DATA2"
        )));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertEquals(array(
            "DATA1",
            "DATA2"
        ), $this->object->publishTemplateChanges("PATH", array(), false, false));
    }
}
