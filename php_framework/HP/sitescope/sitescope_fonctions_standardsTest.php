<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-26 at 11:09:00.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class sitescope_fonctions_standardsTest extends MockedListeOptions {
	/**
     * @var sitescope_fonctions_standards
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$soap = $this ->createMock ( "soap" );
		
		$this->object = new sitescope_fonctions_standards ( 10, false, "sitescope_soap_preferences" );
		$this->object ->setListeOptions ( $this ->getListeOption () );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers sitescope_fonctions_standards::retrouve_arbre_moniteurs_from_FullConf
     */
	public function testRetrouve_arbre_moniteurs_from_FullConf() {
		$full_confs ["snapshot_groupSnapshotChildren"] = array ( 
				"TEST1" );
		$this ->assertSame ( $this->object, $this->object ->retrouve_arbre_moniteurs_from_FullConf ( $full_confs ) );
	}

	/**
	 * @covers sitescope_fonctions_standards::retrouve_arbre_moniteurs_total
	 */
	public function testretrouve_arbre_moniteurs_total() {
		$full_confs = array ( 
				"Health" => "TEST1", 
				"GROUPE1" => array ( 
						"entitySnapshot_properties" => array ( 
								"DATA1" ), 
						"snapshot_groupSnapshotChildren" => array ( 
								"SOUSGROUPE1" => array ( 
										"entitySnapshot_properties" => array ( 
												"DATA2" ), 
										"snapshot_groupSnapshotChildren" => array (), 
										"entitySnapshot_name" => "NAME2", 
										"snapshot_monitorSnapshotChildren" => array ( 
												array ( 
														"entitySnapshot_name" => "MON_NAME2" ) ) ) ), 
						"entitySnapshot_name" => "NAME1", 
						"snapshot_monitorSnapshotChildren" => array ( 
								array ( 
										"entitySnapshot_name" => "MON_NAME1" ) ) ) );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_arbre_moniteurs_total ( $full_confs ) );
		$this ->assertEquals ( 
				array ( 
							'NAME1' => array ( 
									array ( 
											'entitySnapshot_name' => 'MON_NAME1', 
											'group_id' => 'c174d066-a522-85b0-4366-6791e85d5697', 
											'fullpathname' => 'GROUPE1!MON_NAME1' ) ), 
							'NAME2' => array ( 
									array ( 
											'entitySnapshot_name' => 'MON_NAME2', 
											'group_id' => 'a16eec09-678b-3643-fb6a-905fc870fd66', 
											'fullpathname' => 'GROUPE1!SOUSGROUPE1!MON_NAME2' ) ) ), 
					$this->object ->getArbreMoniteurs () );
	}

	/**
     * @covers sitescope_fonctions_standards::creer_arbre_dependance_from_FullConf
     */
	public function testCreer_arbre_dependance_from_FullConf() {
		$this->object ->AddArbreMoniteurs ( 
				array ( 
							'entitySnapshot_name' => 'MON_NAME1', 
							'group_id' => 'c174d066-a522-85b0-4366-6791e85d5697', 
							'fullpathname' => 'GROUPE1!MON_NAME1', 
							"entitySnapshot_properties" => array ( 
									"_ownerID" => 1234, 
									"_id" => "AZD", 
									"_name" => "NOM2" ) ), 
					'CHAMP1' );
		$this ->assertSame ( $this->object, $this->object ->creer_arbre_dependance_from_FullConf () );
		$this ->assertEquals ( array ( 
				'1234 AZD' => 'NOM2' ), $this->object ->getDependance () );
	}

	/**
     * @covers sitescope_fonctions_standards::retrouve_arbre_machines_from_FullConf
     */
	public function testRetrouve_arbre_machines_from_FullConf() {
		$full_confs ["snapshot_preferenceSnapShot"] = array ( 
				"snapshot_remoteNTSnapshotChildren" => array ( 
						"TEST1" => array ( 
								"entitySnapshot_properties" => array ( 
										"_id" => "DATA1", 
										"_host" => "HOST" ) ) ), 
				"snapshot_remoteUNIXSnapshotChildren" => array ( 
						"TEST2" => array ( 
								"entitySnapshot_properties" => array ( 
										"_id" => "DATA2", 
										"_host" => "HOST" ) ) ) );
		$this ->assertSame ( $this->object, $this->object ->retrouve_arbre_machines_from_FullConf ( $full_confs ) );
	}

	/**
	 * @covers sitescope_fonctions_standards::ajoute_groupe_data
	 */
	public function testajoute_groupe_data_SiteScopeRoot() {
		$proprietes ["_externalId"] = "ID1";
		$this ->assertSame ( $this->object, $this->object ->ajoute_groupe_data ( "NOM1", $proprietes, "SiteScopeRoot" ) );
		$this ->assertEquals ( array ( 
				'NOM1' => Array ( 
						'_externalId' => 'ID1', 
						'id' => 'ID1', 
						'fullpathname' => 'NOM1', 
						'id_parent' => - 1 ) ), $this->object ->getArbreGroupes () );
	}

	/**
	 * @covers sitescope_fonctions_standards::ajoute_groupe_data
	 */
	public function testajoute_groupe_data_CHEMIN1() {
		$proprietes ["_VALUE1"] = "DATA1";
		$this ->assertSame ( $this->object, $this->object ->ajoute_groupe_data ( "NOM2", $proprietes, "CHEMIN1" ) );
		$this ->assertEquals ( array ( 
				'CHEMIN1!NOM2' => Array ( 
						'id' => '8e82abc4-3db6-5044-bf17-d10a5d58b28b', 
						'fullpathname' => 'CHEMIN1!NOM2', 
						'id_parent' => - 1, 
						'_VALUE1' => 'DATA1' ) ), $this->object ->getArbreGroupes () );
	}

	/**
     * @covers sitescope_fonctions_standards::reset_tableaux
     */
	public function testReset_tableaux() {
		$this ->assertSame ( $this->object, $this->object ->reset_tableaux () );
		$this ->assertEquals ( array (), $this->object ->getArbreMoniteurs () );
		$this ->assertEquals ( array (), $this->object ->getArbreMachines () );
		$this ->assertEquals ( array (), $this->object ->getArbreGroupes () );
		$this ->assertEquals ( array (), $this->object ->getDependance () );
		$this ->assertEquals ( array (), $this->object ->getGroupeNumbers () );
	}

	/**
	 * @covers sitescope_fonctions_standards::transmet_delete_sitescope
	 */
	public function testtransmet_delete_sitescope_False() {
		$sitescope_soap_configuration = $this ->createMock ( "sitescope_soap_configuration" );
		$sitescope_soap_configuration ->expects ( $this ->any () ) 
			->method ( 'deleteGroupEx' ) 
			->will ( $this ->returnValue ( false ) );
		$this ->assertFalse ( $this->object ->transmet_delete_sitescope ( $sitescope_soap_configuration, 1, array ( 
				"PATH1" ), 10 ) );
	}

	/**
	 * @covers sitescope_fonctions_standards::transmet_delete_sitescope
	 */
	public function testtransmet_delete_sitescope_True() {
		$sitescope_soap_configuration = $this ->createMock ( "sitescope_soap_configuration" );
		$sitescope_soap_configuration ->expects ( $this ->any () ) 
			->method ( 'deleteMonitorEx' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->assertTrue ( $this->object ->transmet_delete_sitescope ( $sitescope_soap_configuration, 0, array ( 
				"PATH1" ), 10 ) );
	}

	/**
	 * @covers sitescope_fonctions_standards::transmet_disable_sitescope
	 */
	public function testtransmet_disable_sitescope_Exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(sitescope_soap_preferences) Le type MoNIToR n\'est pas supporte.' );
		$this->object ->transmet_disable_sitescope ( $sitescope_soap_configuration, "MoNIToR", 10, 1, array ( 
				"PATH1" ), "REASON1", 10 );
	}

	/**
	 * @covers sitescope_fonctions_standards::transmet_disable_sitescope
	 */
	public function testtransmet_disable_sitescope_monitor_False() {
		$sitescope_soap_configuration = $this ->createMock ( "sitescope_soap_configuration" );
		$sitescope_soap_configuration ->expects ( $this ->any () ) 
			->method ( 'disableGroupWithDescription' ) 
			->will ( $this ->returnValue ( false ) );
		$this ->assertFalse ( $this->object ->transmet_disable_sitescope ( $sitescope_soap_configuration, "MONITOR", 10, 1, array ( 
				"PATH1" ), "REASON1", 10 ) );
	}

	/**
	 * @covers sitescope_fonctions_standards::transmet_disable_sitescope
	 */
	public function testtransmet_disable_sitescope_monitor_True() {
		$sitescope_soap_configuration = $this ->createMock ( "sitescope_soap_configuration" );
		$sitescope_soap_configuration ->expects ( $this ->any () ) 
			->method ( 'disableMonitorWithDescription' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->assertTrue ( $this->object ->transmet_disable_sitescope ( $sitescope_soap_configuration, "MONITOR", 10, 0, array ( 
				"PATH1" ), "REASON1", 10 ) );
	}

	/**
	 * @covers sitescope_fonctions_standards::transmet_disable_sitescope
	 */
	public function testtransmet_disable_sitescope_alert_True() {
		$sitescope_soap_configuration = $this ->createMock ( "sitescope_soap_configuration" );
		$sitescope_soap_configuration ->expects ( $this ->any () ) 
			->method ( 'disableAssociatedAlerts' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->assertTrue ( $this->object ->transmet_disable_sitescope ( $sitescope_soap_configuration, "ALERT", 10, 0, array ( 
				"PATH1" ), "REASON1", 10 ) );
	}

	/**
	 * @covers sitescope_fonctions_standards::transmet_enable_sitescope
	 */
	public function testtransmet_enable_sitescope_Exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(sitescope_soap_preferences) Le type MoNIToR n\'est pas supporte.' );
		$this->object ->transmet_enable_sitescope ( $sitescope_soap_configuration, "MoNIToR", 1, array ( 
				"PATH1" ), "REASON1" );
	}

	/**
	 * @covers sitescope_fonctions_standards::transmet_enable_sitescope
	 */
	public function testtransmet_enable_sitescope_monitor_False() {
		$sitescope_soap_configuration = $this ->createMock ( "sitescope_soap_configuration" );
		$sitescope_soap_configuration ->expects ( $this ->any () ) 
			->method ( 'enableGroupEx' ) 
			->will ( $this ->returnValue ( false ) );
		$this ->assertFalse ( $this->object ->transmet_enable_sitescope ( $sitescope_soap_configuration, "MONITOR", 1, array ( 
				"PATH1" ), "REASON1" ) );
	}

	/**
	 * @covers sitescope_fonctions_standards::transmet_enable_sitescope
	 */
	public function testtransmet_enable_sitescope_monitor_True() {
		$sitescope_soap_configuration = $this ->createMock ( "sitescope_soap_configuration" );
		$sitescope_soap_configuration ->expects ( $this ->any () ) 
			->method ( 'enableMonitorWithDescription' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->assertTrue ( $this->object ->transmet_enable_sitescope ( $sitescope_soap_configuration, "MONITOR", 0, array ( 
				"PATH1" ), "REASON1" ) );
	}

	/**
	 * @covers sitescope_fonctions_standards::transmet_enable_sitescope
	 */
	public function testtransmet_enable_sitescope_alert_True() {
		$sitescope_soap_configuration = $this ->createMock ( "sitescope_soap_configuration" );
		$sitescope_soap_configuration ->expects ( $this ->any () ) 
			->method ( 'enableAssociatedAlerts' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->assertTrue ( $this->object ->transmet_enable_sitescope ( $sitescope_soap_configuration, "ALERT", 0, array ( 
				"PATH1" ), "REASON1" ) );
	}

	/**
     * @covers sitescope_fonctions_standards::connexion_soap_configuration_de_tous_les_sitescopes
     */
	public function testConnexion_soap_configuration_de_tous_les_sitescopes_Exception_liste_sitescope() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(sitescope_soap_preferences) Il faut un tableau de nom de sitescope' );
		$liste_noms_sis = "SIS1";
		$this->object ->connexion_soap_configuration_de_tous_les_sitescopes ( $liste_noms_sis );
	}

	/**
	 * @covers sitescope_fonctions_standards::connexion_soap_configuration_de_tous_les_sitescopes
	 */
	public function testConnexion_soap_configuration_de_tous_les_sitescopes_Exception_connect() {
		$sitescope_soap_configuration = $this ->createMock ( "sitescope_soap_configuration" );
		$sitescope_soap_configuration ->expects ( $this ->any () ) 
			->method ( 'valide_presence_sitescope_data' ) 
			->will ( $this ->returnValue ( true ) );
		$sitescope_soap_configuration ->expects ( $this ->any () ) 
			->method ( 'connect' ) 
			->will ( $this ->throwException ( new Exception ( 'EXCEP1 CONNECT' ) ) );
		$this->object ->setObjetSisSoapConfigurationRef ( $sitescope_soap_configuration );
		$liste_noms_sis = array ( 
				"SIS1" );
		$this ->assertTrue ( $this->object ->connexion_soap_configuration_de_tous_les_sitescopes ( $liste_noms_sis ) );
		$this ->assertEquals ( array (), $liste_noms_sis );
	}

	/**
	 * @covers sitescope_fonctions_standards::connexion_soap_configuration_de_tous_les_sitescopes
	 */
	public function testConnexion_soap_configuration_de_tous_les_sitescopes_valide() {
		$sitescope_soap_configuration = $this ->createMock ( "sitescope_soap_configuration" );
		$sitescope_soap_configuration ->expects ( $this ->any () ) 
			->method ( 'valide_presence_sitescope_data' ) 
			->will ( $this ->onConsecutiveCalls ( false, true, true ) );
		$sitescope_soap_configuration ->expects ( $this ->any () ) 
			->method ( 'connect' ) 
			->will ( $this ->onConsecutiveCalls ( false, true ) );
		$this->object ->setObjetSisSoapConfigurationRef ( $sitescope_soap_configuration );
		$liste_noms_sis = array ( 
				"SIS1", 
				"SIS2", 
				"SIS3" );
		$this ->assertTrue ( $this->object ->connexion_soap_configuration_de_tous_les_sitescopes ( $liste_noms_sis ) );
		$this ->assertEquals ( array ( 
				2 => 'SIS3' ), $liste_noms_sis );
	}

	/**
	 * @covers sitescope_fonctions_standards::nettoie_sitescope_non_connecte
	 */
	public function testnettoie_sitescope_non_connecte() {
		$liste_noms_sis = array ( 
				"SIS1", 
				"SIS2" );
		$this ->assertSame ( $this->object, $this->object ->nettoie_sitescope_non_connecte ( $liste_noms_sis, "SIS2", 1 ) );
		$this ->assertEquals ( array ( 
				'SIS1' ), $liste_noms_sis );
	}

	/**
     * @covers sitescope_fonctions_standards::applique_disable_sur_un_sitescope
     */
	public function testApplique_disable_sur_un_sitescope_Exception() {
		$this->object ->setListeConnexion ( array ( 
				"NOM1" => "objet_sis" ) );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(sitescope_soap_preferences) Le type MoNItOR n\'est pas supporte.' );
		$this->object ->applique_disable_sur_un_sitescope ( "NOM1", "MoNItOR", 10, 0, array ( 
				"PATH1" ), "REASON1", 10 );
	}

	/**
	 * @covers sitescope_fonctions_standards::applique_disable_sur_un_sitescope
	 */
	public function testApplique_disable_sur_un_sitescope_False() {
		$this ->assertFalse ( $this->object ->applique_disable_sur_un_sitescope ( "NOM1", "MoNItOR", 10, 0, array ( 
				"PATH1" ), "REASON1", 10 ) );
	}

	/**
	 * @covers sitescope_fonctions_standards::applique_enable_sur_un_sitescope
	 */
	public function testApplique_enable_sur_un_sitescope_Exception() {
		$this->object ->setListeConnexion ( array ( 
				"NOM1" => "objet_sis" ) );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(sitescope_soap_preferences) Le type MoNItOR n\'est pas supporte.' );
		$this->object ->applique_enable_sur_un_sitescope ( "NOM1", "MoNItOR", 0, array ( 
				"PATH1" ), "REASON1" );
	}

	/**
	 * @covers sitescope_fonctions_standards::applique_enable_sur_un_sitescope
	 */
	public function testApplique_enable_sur_un_sitescope_False() {
		$this ->assertFalse ( $this->object ->applique_enable_sur_un_sitescope ( "NOM1", "MoNItOR", 0, array ( 
				"PATH1" ), "REASON1" ) );
	}
}
