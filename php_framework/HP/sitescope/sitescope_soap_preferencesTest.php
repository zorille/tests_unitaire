<?php
namespace Zorille\framework;
use \Exception as Exception;
use \stdClass as stdClass;
use \SoapClient as SoapClient;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-26 at 11:06:09.
 */
if (! defined('__DOCUMENT_ROOT__')) {
    require_once $_SERVER["PWD"] . '/prepare.php';
}

class sitescope_soap_preferencesTest extends MockedListeOptions
{

    /**
     *
     * @var sitescope_soap_preferences
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        ob_start();
        $soap = $this->createMock('Zorille\framework\soap');
        
        $this->object = new sitescope_soap_preferences(false, "sitescope_soap_preferences");
        $this->object->setSoapConnection($soap)->setListeOptions($this->getListeOption());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        ob_end_clean();
    }

    private function _prepareException($requete = 'getInstances')
    {
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->with($requete)
            ->will($this->throwException(new Exception('EXCEP1')));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
    }

    /**
     * @covers Zorille\framework\sitescope_soap_preferences::connect
     */
    public function testConnect_False()
    {
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('setCacheWsdl')
            ->will($this->returnSelf());
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('retrouve_variables_tableau')
            ->will($this->returnSelf());
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('connect')
            ->will($this->returnValue(true));
        
        $this->assertFalse($this->object->connect("SIS_TEST"));
    }

    /**
     * @covers Zorille\framework\sitescope_soap_preferences::retrouve_donnees_machine
     */
    public function testretrouve_donnees_machine_arrayOfarray()
    {
        $stdclass = new stdClass();
        $stdclass->item = array(
            array(
                "_id" => "11122233334444",
                "_host" => "HOST1"
            )
        );
        $arbre_machines = array();
        $this->assertSame($this->object, $this->object->retrouve_donnees_machine($stdclass, 'Unix', false, $arbre_machines));
        $this->assertEquals(array(
            'RemoteUnixInstancePreferences_11122233334444' => Array(
                '_id' => '11122233334444',
                '_host' => 'HOST1'
            ),
            'machines' => Array(
                'HOST1' => 'RemoteUnixInstancePreferences_11122233334444'
            )
        ), $arbre_machines);
    }

    /**
     * @covers Zorille\framework\sitescope_soap_preferences::retrouve_donnees_machine
     */
    public function testretrouve_donnees_machine_array()
    {
        $stdclass = new stdClass();
        $stdclass->item = array(
            "_id" => "11122233334444",
            "_host" => "HOST1",
            "_credentials" => "NAME1"
        );
        $arbre_credentials = array(
            "NAME1" => array(
                "_name" => "DONNEES_CREDS"
            )
        );
        $this->object->setArbreCredentials($arbre_credentials);
        
        $arbre_machines = array();
        $this->assertSame($this->object, $this->object->retrouve_donnees_machine($stdclass, 'NT', true, $arbre_machines));
        $this->assertEquals(array(
            'RemoteNTInstancePreferences_11122233334444' => Array(
                '_id' => '11122233334444',
                '_host' => 'HOST1',
                '_credentials' => 'DONNEES_CREDS'
            ),
            'machines' => Array(
                'HOST1' => 'RemoteNTInstancePreferences_11122233334444'
            )
        ), $arbre_machines);
    }

    /**
     * @covers Zorille\framework\sitescope_soap_preferences::retrouve_arbre_machines
     */
    public function testRetrouve_arbre_machines_Exception()
    {
        $this->_prepareException();
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(sitescope_soap_preferences) EXCEP1');
        $this->object->retrouve_arbre_machines();
    }

    /**
     * @covers Zorille\framework\sitescope_soap_preferences::retrouve_arbre_machines
     */
    public function testRetrouve_arbre_machines_True()
    {
        $stdclass = new stdClass();
        $stdclass->item = array(
            array(
                "_id" => "11122233334444",
                "_host" => "HOST1"
            )
        );
        
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->any())
            ->method('__call')
            ->with('getInstances')
            ->will($this->returnValue($stdclass));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertSame($this->object, $this->object->retrouve_arbre_machines());
    }

    /**
     * @covers Zorille\framework\sitescope_soap_preferences::retrouve_donnees_credentials
     */
    public function testretrouve_donnees_credentials_arrayOfarray()
    {
        $stdclass = new stdClass();
        $stdclass->item = array(
            array(
                "_id" => "NAME1",
                "_name" => "DONNEES_CREDS"
            )
        );
        
        $arbre_creds = array();
        $this->assertSame($this->object, $this->object->retrouve_donnees_credentials($stdclass, $arbre_creds));
        $this->assertEquals(array(
            "NAME1" => array(
                "_id" => "NAME1",
                "_name" => "DONNEES_CREDS"
            )
        ), $arbre_creds);
    }

    /**
     * @covers Zorille\framework\sitescope_soap_preferences::retrouve_donnees_credentials
     */
    public function testretrouve_donnees_credentials_array()
    {
        $stdclass = new stdClass();
        $stdclass->item = array(
            "_id" => "NAME1",
            "_name" => "DONNEES_CREDS"
        );
        
        $arbre_creds = array();
        $this->assertSame($this->object, $this->object->retrouve_donnees_credentials($stdclass, $arbre_creds));
        $this->assertEquals(array(
            "NAME1" => array(
                "_id" => "NAME1",
                "_name" => "DONNEES_CREDS"
            )
        ), $arbre_creds);
    }

    /**
     * @covers Zorille\framework\sitescope_soap_preferences::retrouve_arbre_credentials
     */
    public function testRetrouve_arbre_credentials_Exception()
    {
        $this->_prepareException();
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(sitescope_soap_preferences) EXCEP1');
        $this->object->retrouve_arbre_credentials();
    }

    /**
     * @covers Zorille\framework\sitescope_soap_preferences::retrouve_arbre_credentials
     */
    public function testRetrouve_arbre_credentials_valide()
    {
        $stdclass_creds = new stdClass();
        $stdclass_creds->item = array(
            "_id" => "11122233334444"
        );
        
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->at(0))
            ->method('__call')
            ->with('getInstances')
            ->will($this->returnValue($stdclass_creds));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertTrue($this->object->retrouve_arbre_credentials());
    }

    /**
     * @covers Zorille\framework\sitescope_soap_preferences::retrouve_liste_preferences
     */
    public function testretrouve_liste_preferences_Exception()
    {
        $this->_prepareException('getPreferenceTypes');
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(sitescope_soap_preferences) EXCEP1');
        $this->object->retrouve_liste_preferences();
    }

    /**
     * @covers Zorille\framework\sitescope_soap_preferences::retrouve_liste_preferences
     */
    public function testretrouve_liste_preferences_valide()
    {
        $stdclass_creds = new stdClass();
        $stdclass_creds->item = array(
            array(
                "_id" => "11122233334444"
            )
        );
        
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->at(0))
            ->method('__call')
            ->with('getPreferenceTypes')
            ->will($this->returnValue($stdclass_creds));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertEquals(array(
            '_id' => '11122233334444'
        ), $this->object->retrouve_liste_preferences());
    }

    /**
     * @covers Zorille\framework\sitescope_soap_preferences::retrouve_donnees_instances
     */
    public function testretrouve_donnees_instances_arrayOfarray()
    {
        $stdclass = new stdClass();
        $stdclass->item = array(
            array(
                "_key1" => "NAME1",
                "_name" => "DONNEES_CREDS"
            )
        );
        
        $arbre_donnees = array(
            "TEST" => array()
        );
        $this->assertSame($this->object, $this->object->retrouve_donnees_instances($stdclass, $arbre_donnees["TEST"]));
        $this->assertEquals(array(
            "TEST" => array(
                "_key1" => "NAME1",
                "_name" => "DONNEES_CREDS"
            )
        ), $arbre_donnees);
    }

    /**
     * @covers Zorille\framework\sitescope_soap_preferences::retrouve_donnees_instances
     */
    public function testretrouve_donnees_instances_array()
    {
        $stdclass = new stdClass();
        $stdclass->item = array(
            "_key2" => "NAME1",
            "_name" => "DONNEES_CREDS"
        );
        
        $arbre_donnees = array(
            "TEST2" => array()
        );
        $this->assertSame($this->object, $this->object->retrouve_donnees_instances($stdclass, $arbre_donnees["TEST2"]));
        $this->assertEquals(array(
            "TEST2" => array(
                "_key2" => "NAME1",
                "_name" => "DONNEES_CREDS"
            )
        ), $arbre_donnees);
    }

    /**
     * @covers Zorille\framework\sitescope_soap_preferences::retrouve_liste_preferences
     */
    public function testretrouve_toutes_les_preferences_Exception()
    {
        $this->_prepareException('getPreferenceTypes');
        
        $this->expectException(Exception::class);
        $this->expectExceptionMessage('(sitescope_soap_preferences) EXCEP1');
        $this->object->retrouve_toutes_les_preferences();
    }

    /**
     * @covers Zorille\framework\sitescope_soap_preferences::retrouve_toutes_les_preferences
     */
    public function testRetrouve_toutes_les_preferences()
    {
        $stdclass_PreferenceTypes = new stdClass();
        $stdclass_PreferenceTypes->item = array(
            array(
                "RemoteNTInstancePreferences",
                "RemoteUnixInstancePreferences",
                "VAL1",
                " "
            )
        );
        $stdclass_Instances = new stdClass();
        $stdclass_Instances->item = array(
            "_key3" => "NAME1",
            "_name" => "DONNEES_CREDS"
        );
        
        $this->object->getListeOptions()
            ->method('getOption')
            ->will($this->returnValue(false));
        $SoapClient = $this->createMock('SoapClient');
        
        $SoapClient->expects($this->at(0))
            ->method('__call')
            ->will($this->returnValue($stdclass_PreferenceTypes));
        $SoapClient->expects($this->at(1))
            ->method('__getLastRequest')
            ->will($this->returnValue($stdclass_Instances));
        $SoapClient->expects($this->at(2))
            ->method('__call')
            ->will($this->returnValue($stdclass_Instances));
        $this->object->getSoapConnection()
            ->expects($this->any())
            ->method('getSoapClient')
            ->will($this->returnValue($SoapClient));
        
        $this->assertEquals(array(
            "VAL1" => array(
                "_key3" => "NAME1",
                "_name" => "DONNEES_CREDS"
            )
        ), $this->object->retrouve_toutes_les_preferences());
    }
}
