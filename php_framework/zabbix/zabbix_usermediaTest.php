<?php
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-03-20 at 10:12:22.
 */
class zabbix_usermediaTest extends MockedListeOptions {
	/**
     * @var zabbix_usermedia
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$zabbix_wsclient = $this ->createMock ( "zabbix_wsclient" );
		
		$this->object = new zabbix_usermedia ( false, "zabbix_usermedia" );
		$this->object ->setObjetZabbixWsclient ( $zabbix_wsclient );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers zabbix_usermedia::retrouve_zabbix_param
     */
	public function testRetrouve_zabbix_param_Exception() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( false ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_usermedia) Il manque le parametre : zabbix_usermedia_sendto' );
		$this->object ->retrouve_zabbix_param ();
	}

	/**
	 * @covers zabbix_usermedia::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( "sento" ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
		$this ->assertEquals ( "sento", $this->object ->getSendto () );
	}

	/**
     * @covers zabbix_usermedia::creer_definition_usermedia_create_ws
     */
	public function testCreer_definition_usermedia_create_ws() {
		$this->object ->setSendto ( "SendTo" );
		$this->object ->setMediaTypeId ( 10 );
		$this->object ->setUserId ( 5 );
		$this->object ->setMediaId ( 6 );
		
		$this ->assertEquals ( array ( 
				"active" => 0, 
				"period" => "1-7,00:00-24:00", 
				"sendto" => "SendTo", 
				"severity" => "63", 
				"mediatypeid" => 10, 
				"userid" => 5, 
				"mediaid" => 6 ), $this->object ->creer_definition_usermedia_create_ws () );
	}

	/**
     * @covers zabbix_usermedia::creer_usermedia
     */
	public function testCreer_usermedia() {
		$this->object ->setSendto ( "SendTo" );
		
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'userAddMedia' ) 
			->will ( $this ->returnValue ( array ( 
				"usermediaid" => array ( 
						10 ) ) ) );
		
		$this ->assertEquals ( array ( 
				"usermediaid" => array ( 
						10 ) ), $this->object ->creer_usermedia () );
	}

	/**
     * @covers zabbix_usermedia::creer_definition_usermedia_delete_ws
     */
	public function testCreer_definition_usermedia_delete_ws() {
		$this ->assertEquals ( array (), $this->object ->creer_definition_usermedia_delete_ws () );
		$this->object ->setMediaId ( 10 );
		$this ->assertEquals ( array ( 
				10 ), $this->object ->creer_definition_usermedia_delete_ws () );
	}

	/**
     * @covers zabbix_usermedia::supprime_usermedia
     */
	public function testSupprime_usermedia() {
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'userDeleteMedia' ) 
			->will ( $this ->returnValue ( array ( 
				"usermediaids" => array ( 
						10 ) ) ) );
		
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'usermediaGet' ) 
			->will ( $this ->onConsecutiveCalls ( array (), array ( 
				"mediaids" => array ( 
						"mediaid" => 10 ) ) ) );
		
		$this ->assertEquals ( array (), $this->object ->supprime_usermedia () );
		$this ->assertEquals ( array ( 
				"usermediaids" => array ( 
						10 ) ), $this->object ->supprime_usermedia () );
	}

	/**
     * @covers zabbix_usermedia::creer_definition_usermedia_get_ws
     */
	public function testCreer_definition_usermedia_get_ws() {
		$this->object ->setSendto ( "SendTo" );
		$this ->assertEquals ( array ( 
				"output" => "mediaid", 
				"filter" => array ( 
						"sendto" => "SendTo" ) ), $this->object ->creer_definition_usermedia_get_ws () );
	}

	/**
     * @covers zabbix_usermedia::recherche_usermedia
     */
	public function testRecherche_usermedia() {
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'usermediaGet' ) 
			->will ( $this ->returnValue ( array ( 
				"mediaids" => array ( 
						"mediaid" => 10 ) ) ) );
		
		$this ->assertEquals ( array ( 
				"mediaids" => array ( 
						"mediaid" => 10 ) ), $this->object ->recherche_usermedia () );
	}

	/**
     * @covers zabbix_usermedia::retrouve_Active
     */
	public function testRetrouve_Active() {
		$this ->assertEquals ( 0, $this->object ->retrouve_Active ( "" ) );
		$this ->assertEquals ( 0, $this->object ->retrouve_Active ( "enabled" ) );
		$this ->assertEquals ( 1, $this->object ->retrouve_Active ( "disabled" ) );
		$this ->assertEquals ( 10, $this->object ->retrouve_Active ( 10 ) );
	}
}
