<?php
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-03-20 at 10:23:08.
 */
class zabbix_itemsTest extends MockedListeOptions {
	/**
     * @var zabbix_items
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$zabbix_wsclient = $this ->createMock ( "zabbix_wsclient" );
		$zabbix_item_reference = $this ->createMock ( "zabbix_item" );
		
		$this->object = new zabbix_items ( false, "zabbix_items" );
		$this->object ->setObjetZabbixWsclient ( $zabbix_wsclient ) 
			->setObjetItemRef ( $zabbix_item_reference );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers zabbix_items::retrouve_zabbix_param
     */
	public function testRetrouve_zabbix_param_Exception() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( false ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_items) Il manque le parametre : zabbix_items' );
		$this->object ->retrouve_zabbix_param ();
		
		$this ->assertEquals ( array (), $this->object ->getListeItemCli () );
	}

	/**
	 * @covers zabbix_items::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->onConsecutiveCalls ( 'val1', array ( 
				'val2' ) ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		$this->object ->getObjetItemRef () 
			->expects ( $this ->any () ) 
			->method ( 'setName' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetItemRef () ) );
		$this->object ->getObjetItemRef () 
			->expects ( $this ->any () ) 
			->method ( 'getName' ) 
			->will ( $this ->returnValue ( 'HOST1' ) );
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
	}

	/**
     * @covers zabbix_items::recherche_liste_items
     */
	public function testRecherche_liste_items() {
		$this->object ->getObjetItemRef () 
			->expects ( $this ->any () ) 
			->method ( 'setName' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetItemRef () ) );
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'itemGet' ) 
			->will ( $this ->returnValue ( array ( 
				array ( 
						"itemid" => 10, 
						"name" => "NOM1" ) ) ) );
		
		$this ->assertSame ( $this->object, $this->object ->recherche_liste_items () );
	}

	/**
	 * @covers zabbix_items::recherche_liste_items_par_filtre
	 */
	public function testrecherche_liste_items_par_filtre() {
		$this->object ->getObjetItemRef () 
			->expects ( $this ->any () ) 
			->method ( 'setName' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetItemRef () ) );
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'itemGet' ) 
			->will ( $this ->returnValue ( array ( 
				array ( 
						"itemid" => 10, 
						"name" => "NOM1" ) ) ) );
		
		$this ->assertSame ( $this->object, $this->object ->recherche_liste_items_par_filtre ( "NOM1", "KEY", "10000", "TYPE" ) );
	}

	/**
     * @covers zabbix_items::valide_liste_items
     */
	public function testValide_liste_items() {
		$liste_item_cli = array ( 
				"NOM1" => array ( 
						"name" => "NOM1", 
						"exist" => false ), 
				"NOM2" => array ( 
						"name" => "NOM2", 
						"itemid" => 2, 
						"exist" => true ) );
		$this->object ->setListeItemCli ( $liste_item_cli );
		$this->object ->getObjetItemRef () 
			->expects ( $this ->any () ) 
			->method ( 'setName' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetItemRef () ) );
		$this->object ->getObjetItemRef () 
			->expects ( $this ->any () ) 
			->method ( 'getName' ) 
			->will ( $this ->returnValue ( "NOM1" ) );
		$this->object ->getObjetItemRef () 
			->expects ( $this ->any () ) 
			->method ( 'compare_item' ) 
			->will ( $this ->onConsecutiveCalls ( false, true ) );
		$liste_items = array ( 
				array ( 
						"itemid" => 10, 
						"name" => "NOM1" ), 
				array ( 
						"itemid" => 12, 
						"name" => "NOM2" ) );
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'itemGet' ) 
			->will ( $this ->returnValue ( $liste_items ) );
		$this ->assertSame ( $this->object, $this->object ->valide_liste_items () );
		$this ->assertEquals ( array ( 
				"NOM1" => $this->object ->getObjetItemRef () ), $this->object ->getListeItem () );
	}

	/**
     * @covers zabbix_items::creer_item
     */
	public function testCreer_item() {
		$this->object ->getObjetItemRef () 
			->expects ( $this ->any () ) 
			->method ( 'setName' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetItemRef () ) );
		$iteme_zabbix = array ( 
				"itemid" => 10, 
				"name" => "NOM1" );
		$this ->assertEquals ( $this->object ->getObjetItemRef (), $this->object ->creer_item ( $iteme_zabbix ) );
	}

	/**
     * @covers zabbix_items::ajoute_items
     */
	public function testAjoute_items() {
		$liste_item = array ( 
				"NOM1" => $this->object ->getObjetItemRef (), 
				"NOM2" => $this->object ->getObjetItemRef () );
		$this->object ->setListeItem ( $liste_item );
		$liste_item_cli = array ( 
				array ( 
						"itemid" => 10, 
						"name" => "NOM3" ), 
				array ( 
						"itemid" => 12, 
						"name" => "NOM4" ) );
		
		$this->object ->getObjetItemRef () 
			->expects ( $this ->any () ) 
			->method ( 'setName' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetItemRef () ) );
		$this->object ->getObjetItemRef () 
			->expects ( $this ->any () ) 
			->method ( 'getName' ) 
			->will ( $this ->returnValue ( "NOM3" ) );
		$this->object ->getObjetItemRef () 
			->expects ( $this ->any () ) 
			->method ( 'compare_item' ) 
			->will ( $this ->onConsecutiveCalls ( false, true ) );
		
		$this ->assertSame ( $this->object, $this->object ->ajoute_items ( $liste_item_cli ) );
		$this ->assertEquals ( array ( 
				"NOM1" => $this->object ->getObjetItemRef (), 
				"NOM2" => $this->object ->getObjetItemRef (), 
				"NOM3" => $this->object ->getObjetItemRef () ), $this->object ->getListeItem () );
	}

	/**
     * @covers zabbix_items::supprime_items
     */
	public function testSupprime_items() {
		$liste_item = array ( 
				"NOM1" => $this->object ->getObjetItemRef (), 
				"NOM2" => $this->object ->getObjetItemRef () );
		$this->object ->setListeItem ( $liste_item );
		$liste_item_cli = array ( 
				array ( 
						"itemid" => 10, 
						"name" => "NOM1" ), 
				array ( 
						"itemid" => 12, 
						"name" => "NOM2" ) );
		
		$this->object ->getObjetItemRef () 
			->expects ( $this ->any () ) 
			->method ( 'setName' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetItemRef () ) );
		$this->object ->getObjetItemRef () 
			->expects ( $this ->any () ) 
			->method ( 'getName' ) 
			->will ( $this ->returnValue ( "NOM1" ) );
		$this->object ->getObjetItemRef () 
			->expects ( $this ->any () ) 
			->method ( 'compare_item' ) 
			->will ( $this ->onConsecutiveCalls ( false, true ) );
		
		$this ->assertSame ( $this->object, $this->object ->supprime_items ( $liste_item_cli ) );
		$this ->assertEquals ( array ( 
				"NOM1" => $this->object ->getObjetItemRef () ), $this->object ->getListeItem () );
	}

	/**
     * @covers zabbix_items::creer_definition_items_ws
     */
	public function testCreer_definition_items_ws() {
		$this->object ->getObjetItemRef () 
			->expects ( $this ->any () ) 
			->method ( 'creer_definition_item_ws' ) 
			->will ( $this ->onConsecutiveCalls ( 10, 20 ) );
		$liste_item = array ( 
				"NOM1" => $this->object ->getObjetItemRef (), 
				"NOM2" => $this->object ->getObjetItemRef () );
		$this->object ->setListeItem ( $liste_item );
		$this ->assertEquals ( array ( 
				0 => 10, 
				1 => 20 ), $this->object ->creer_definition_items_ws () );
	}

	/**
     * @covers zabbix_items::creer_definition_itemids_ws
     */
	public function testCreer_definition_itemids_ws() {
		$this->object ->getObjetItemRef () 
			->expects ( $this ->any () ) 
			->method ( 'getItemId' ) 
			->will ( $this ->onConsecutiveCalls ( 10, 20 ) );
		$liste_item = array ( 
				"NOM1" => $this->object ->getObjetItemRef (), 
				"NOM2" => $this->object ->getObjetItemRef () );
		$this->object ->setListeItem ( $liste_item );
		$this ->assertEquals ( array ( 
				0 => array ( 
						"itemid" => 10 ), 
				1 => array ( 
						"itemid" => 20 ) ), $this->object ->creer_definition_itemids_ws () );
	}

	/**
	 * @covers zabbix_items::creer_definition_itemids_sans_champ_itemid_ws
	 */
	public function testcreer_definition_itemids_sans_champ_itemid_ws() {
		$this->object ->getObjetItemRef () 
			->expects ( $this ->any () ) 
			->method ( 'getItemId' ) 
			->will ( $this ->onConsecutiveCalls ( 10, 20 ) );
		$liste_item = array ( 
				"NOM1" => $this->object ->getObjetItemRef (), 
				"NOM2" => $this->object ->getObjetItemRef () );
		$this->object ->setListeItem ( $liste_item );
		$this ->assertEquals ( array ( 
				10, 
				20 ), $this->object ->creer_definition_itemids_sans_champ_itemid_ws () );
	}
}
