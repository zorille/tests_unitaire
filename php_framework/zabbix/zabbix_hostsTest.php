<?php
namespace Zorille\framework;
use \Exception as Exception;
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-03-20 at 10:23:08.
 */
class zabbix_hostsTest extends MockedListeOptions {
	/**
     * @var zabbix_hosts
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$zabbix_wsclient = $this ->createMock('Zorille\framework\zabbix_wsclient' );
		$zabbix_host_reference = $this ->createMock('Zorille\framework\zabbix_host' );
		
		$this->object = new zabbix_hosts ( false, "zabbix_hosts" );
		$this->object ->setObjetZabbixWsclient ( $zabbix_wsclient ) 
			->setObjetHostRef ( $zabbix_host_reference );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers Zorille\framework\zabbix_hosts::retrouve_liste_hosts
     */
	public function testretrouve_liste_hosts_Exception() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( false ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_hosts) Il manque le parametre : zabbix_hosts' );
		$this ->assertEquals ( 'Never Reached', $this->object ->retrouve_liste_hosts ( true ) );
		$this ->assertEquals ( array (), $this->object ->getListeHostCli () );
	}

	/**
	 * @covers Zorille\framework\zabbix_hosts::retrouve_liste_hosts
	 */
	public function testretrouve_liste_hosts_vide() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( false ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->assertEquals ( Array (), $this->object ->retrouve_liste_hosts ( false ) );
	}

	/**
	 * @covers Zorille\framework\zabbix_hosts::retrouve_liste_hosts
	 */
	public function testretrouve_liste_hosts() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->onConsecutiveCalls ( 'val1', array ( 
				'val2' ) ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->assertSame ( array ( 
				'val1' ), $this->object ->retrouve_liste_hosts ( true ) );
		$this ->assertSame ( array ( 
				'val2' ), $this->object ->retrouve_liste_hosts ( true ) );
	}

	/**
	 * @covers Zorille\framework\zabbix_hosts::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->onConsecutiveCalls ( 'val1', array ( 
				'val2' ) ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		$this->object ->getObjetHostRef () 
			->expects ( $this ->any () ) 
			->method ( 'setHost' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetHostRef () ) );
		$this->object ->getObjetHostRef () 
			->expects ( $this ->any () ) 
			->method ( 'getHost' ) 
			->will ( $this ->returnValue ( 'HOST1' ) );
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
	}

	/**
     * @covers Zorille\framework\zabbix_hosts::recherche_liste_hosts
     */
	public function testRecherche_liste_hosts() {
		$this->object ->getObjetHostRef () 
			->expects ( $this ->any () ) 
			->method ( 'setHost' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetHostRef () ) );
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'hostGet' ) 
			->will ( $this ->returnValue ( array ( 
				array ( 
						"hostid" => 10, 
						"host" => "NOM1" ) ) ) );
		
		$this ->assertSame ( $this->object, $this->object ->recherche_liste_hosts () );
	}

	/**
     * @covers Zorille\framework\zabbix_hosts::valide_liste_hosts
     */
	public function testValide_liste_hosts() {
		$liste_host_cli = array ( 
				"NOM1" => array ( 
						"host" => "NOM1", 
						"exist" => false ), 
				"NOM2" => array ( 
						"host" => "NOM2", 
						"hostid" => 2, 
						"exist" => true ) );
		$this->object ->setListeHostCli ( $liste_host_cli );
		$this->object ->getObjetHostRef () 
			->expects ( $this ->any () ) 
			->method ( 'setHost' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetHostRef () ) );
		$this->object ->getObjetHostRef () 
			->expects ( $this ->any () ) 
			->method ( 'getHost' ) 
			->will ( $this ->returnValue ( "NOM1" ) );
		$this->object ->getObjetHostRef () 
			->expects ( $this ->any () ) 
			->method ( 'compare_host' ) 
			->will ( $this ->onConsecutiveCalls ( false, true ) );
		$liste_hosts = array ( 
				array ( 
						"hostid" => 10, 
						"host" => "NOM1" ), 
				array ( 
						"hostid" => 12, 
						"host" => "NOM2" ) );
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'hostGet' ) 
			->will ( $this ->returnValue ( $liste_hosts ) );
		$this ->assertSame ( $this->object, $this->object ->valide_liste_hosts () );
		$this ->assertEquals ( array ( 
				"NOM1" => $this->object ->getObjetHostRef () ), $this->object ->getListeHost () );
	}

	/**
     * @covers Zorille\framework\zabbix_hosts::creer_host
     */
	public function testCreer_host() {
		$this->object ->getObjetHostRef () 
			->expects ( $this ->any () ) 
			->method ( 'setHost' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetHostRef () ) );
		$hoste_zabbix = array ( 
				"hostid" => 10, 
				"host" => "NOM1" );
		$this ->assertEquals ( $this->object ->getObjetHostRef (), $this->object ->creer_host ( $hoste_zabbix ) );
	}

	/**
     * @covers Zorille\framework\zabbix_hosts::ajoute_hosts
     */
	public function testAjoute_hosts() {
		$liste_host = array ( 
				"NOM1" => $this->object ->getObjetHostRef (), 
				"NOM2" => $this->object ->getObjetHostRef () );
		$this->object ->setListeHost ( $liste_host );
		$liste_host_cli = array ( 
				array ( 
						"hostid" => 10, 
						"host" => "NOM3" ), 
				array ( 
						"hostid" => 12, 
						"host" => "NOM4" ) );
		
		$this->object ->getObjetHostRef () 
			->expects ( $this ->any () ) 
			->method ( 'setHost' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetHostRef () ) );
		$this->object ->getObjetHostRef () 
			->expects ( $this ->any () ) 
			->method ( 'getHost' ) 
			->will ( $this ->returnValue ( "NOM3" ) );
		$this->object ->getObjetHostRef () 
			->expects ( $this ->any () ) 
			->method ( 'compare_host' ) 
			->will ( $this ->onConsecutiveCalls ( false, true ) );
		
		$this ->assertSame ( $this->object, $this->object ->ajoute_hosts ( $liste_host_cli ) );
		$this ->assertEquals ( array ( 
				"NOM1" => $this->object ->getObjetHostRef (), 
				"NOM2" => $this->object ->getObjetHostRef (), 
				"NOM3" => $this->object ->getObjetHostRef () ), $this->object ->getListeHost () );
	}

	/**
     * @covers Zorille\framework\zabbix_hosts::supprime_hosts
     */
	public function testSupprime_hosts() {
		$liste_host = array ( 
				"NOM1" => $this->object ->getObjetHostRef (), 
				"NOM2" => $this->object ->getObjetHostRef () );
		$this->object ->setListeHost ( $liste_host );
		$liste_host_cli = array ( 
				array ( 
						"hostid" => 10, 
						"host" => "NOM1" ), 
				array ( 
						"hostid" => 12, 
						"host" => "NOM2" ) );
		
		$this->object ->getObjetHostRef () 
			->expects ( $this ->any () ) 
			->method ( 'setHost' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetHostRef () ) );
		$this->object ->getObjetHostRef () 
			->expects ( $this ->any () ) 
			->method ( 'getHost' ) 
			->will ( $this ->returnValue ( "NOM1" ) );
		$this->object ->getObjetHostRef () 
			->expects ( $this ->any () ) 
			->method ( 'compare_host' ) 
			->will ( $this ->onConsecutiveCalls ( false, true ) );
		
		$this ->assertSame ( $this->object, $this->object ->supprime_hosts ( $liste_host_cli ) );
		$this ->assertEquals ( array ( 
				"NOM1" => $this->object ->getObjetHostRef () ), $this->object ->getListeHost () );
	}

	/**
     * @covers Zorille\framework\zabbix_hosts::creer_definition_hosts_ws
     */
	public function testCreer_definition_hosts_ws() {
		$this->object ->getObjetHostRef () 
			->expects ( $this ->any () ) 
			->method ( 'creer_definition_host_ws' ) 
			->will ( $this ->onConsecutiveCalls ( 10, 20 ) );
		$liste_host = array ( 
				"NOM1" => $this->object ->getObjetHostRef (), 
				"NOM2" => $this->object ->getObjetHostRef () );
		$this->object ->setListeHost ( $liste_host );
		$this ->assertEquals ( array ( 
				0 => 10, 
				1 => 20 ), $this->object ->creer_definition_hosts_ws () );
	}

	/**
     * @covers Zorille\framework\zabbix_hosts::creer_definition_hostids_ws
     */
	public function testCreer_definition_hostids_ws() {
		$this->object ->getObjetHostRef () 
			->expects ( $this ->any () ) 
			->method ( 'getHostId' ) 
			->will ( $this ->onConsecutiveCalls ( 10, 20 ) );
		$liste_host = array ( 
				"NOM1" => $this->object ->getObjetHostRef (), 
				"NOM2" => $this->object ->getObjetHostRef () );
		$this->object ->setListeHost ( $liste_host );
		$this ->assertEquals ( array ( 
				0 => array ( 
						"hostid" => 10 ), 
				1 => array ( 
						"hostid" => 20 ) ), $this->object ->creer_definition_hostids_ws () );
	}

	/**
	 * @covers Zorille\framework\zabbix_hosts::creer_definition_hostids_sans_champ_hostid_ws
	 */
	public function testcreer_definition_hostids_sans_champ_hostid_ws() {
		$this->object ->getObjetHostRef () 
			->expects ( $this ->any () ) 
			->method ( 'getHostId' ) 
			->will ( $this ->onConsecutiveCalls ( 10, 20 ) );
		$liste_host = array ( 
				"NOM1" => $this->object ->getObjetHostRef (), 
				"NOM2" => $this->object ->getObjetHostRef () );
		$this->object ->setListeHost ( $liste_host );
		$this ->assertEquals ( array ( 
				10, 
				20 ), $this->object ->creer_definition_hostids_sans_champ_hostid_ws () );
	}
}
