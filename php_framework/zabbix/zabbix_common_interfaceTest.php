<?php
namespace Zorille\framework;
use \Exception as Exception;
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-25 at 16:53:15.
 */
class zabbix_common_interfaceTest extends MockedListeOptions {
	/**
     * @var zabbix_common_interface
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		
		$this->object = new zabbix_common_interface ( false, "TESTS zabbix HOST" );
		$this->object ->setListeOptions ( $this ->getListeOption () );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * @covers Zorille\framework\zabbix_common_interface::retrouve_zabbix_common_param
	 */
	public function testRetrouve_zabbix_common_param_Exception2() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( '' ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS zabbix HOST) Il faut une IP ou un FQDN pour travailler.' );
		$this->object ->retrouve_zabbix_common_param ();
	}

	/**
	 * @covers Zorille\framework\zabbix_common_interface::retrouve_zabbix_common_param
	 */
	public function testRetrouve_zabbix_common_param_Exception3() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->onconsecutiveCalls ( 'IP', 'FQDN', '' ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS zabbix HOST) Il n\'y a pas resolv_fqdn defini pour travailler' );
		$this->object ->retrouve_zabbix_common_param ();
	}

	/**
	 * @covers Zorille\framework\zabbix_common_interface::retrouve_zabbix_common_param
	 */
	public function testRetrouve_zabbix_common_param_valide1() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->onconsecutiveCalls ( 'IP', '', 'IP' ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_common_param () );
	}

	/**
	 * @covers Zorille\framework\zabbix_common_interface::retrouve_zabbix_common_param
	 */
	public function testRetrouve_zabbix_common_param_valide2() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->onconsecutiveCalls ( '', 'FQDN', 'FQDN' ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_common_param () );
	}

	/**
	 * @covers Zorille\framework\zabbix_common_interface::creer_une_interface
	 */
	public function testCreer_une_interface_exception1() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS zabbix HOST) Une interface ne peut pas avoir plusieurs IPs' );
		$this->object ->creer_une_interface ( "USEIP", array ( 
				1, 
				2 ), "FQDN" );
	}

	/**
	 * @covers Zorille\framework\zabbix_common_interface::creer_une_interface
	 */
	public function testCreer_une_interface_exception2() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS zabbix HOST) Une interface ne peut pas avoir plusieurs FQDNs' );
		$this->object ->creer_une_interface ( "USEIP", "IP", array ( 
				1, 
				2 ) );
	}

	/**
	 * @covers Zorille\framework\zabbix_common_interface::creer_une_interface
	 */
	public function testCreer_une_interface_valide() {
		$this ->assertSame ( $this->object, $this->object ->creer_une_interface ( "USEIP", "IP", "FQDN" ) );
		$this ->assertSame ( $this->object, $this->object ->creer_une_interface ( "USEIP", array (), "FQDN" ) );
		$this ->assertSame ( $this->object, $this->object ->creer_une_interface ( "USEIP", array ( 
				"IP" ), "FQDN" ) );
		$this ->assertSame ( $this->object, $this->object ->creer_une_interface ( "USEIP", "IP", array () ) );
		$this ->assertSame ( $this->object, $this->object ->creer_une_interface ( "USEIP", "IP", array ( 
				"FQDN" ) ) );
		$this ->assertSame ( $this->object, $this->object ->creer_une_interface ( "USEIP", "IP", "FQDN", array () ) );
		$this ->assertSame ( $this->object, $this->object ->creer_une_interface ( "USEIP", "IP", "FQDN", array ( 
				"PORT1" ) ) );
	}

	/**
	 * @covers Zorille\framework\zabbix_common_interface::retrouve_useip
	 */
	public function testRetrouve_useip() {
		$this ->assertEquals ( 0, $this->object ->retrouve_useip ( "" ) );
		$this ->assertEquals ( 1, $this->object ->retrouve_useip ( "IP" ) );
		$this ->assertEquals ( 0, $this->object ->retrouve_useip ( "FQDN" ) );
		$this ->assertEquals ( 10, $this->object ->retrouve_useip ( 10 ) );
	}
}
