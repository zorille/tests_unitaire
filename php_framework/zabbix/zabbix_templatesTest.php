<?php
namespace Zorille\framework;
use \Exception as Exception;
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-25 at 16:53:15.
 */
class zabbix_templatesTest extends MockedListeOptions {
	/**
     * @var zabbix_templates
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		
		$zabbix_wsclient = $this ->createMock('Zorille\framework\zabbix_wsclient' );
		$zabbix_template_reference = $this ->createMock('Zorille\framework\zabbix_template' );
		
		$this->object = new zabbix_templates ( false, "TESTS zabbix HOST" );
		$this->object ->setListeOptions ( $this ->getListeOption () ) 
			->setObjetZabbixWsclient ( $zabbix_wsclient ) 
			->setObjetTemplateRef ( $zabbix_template_reference );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * @covers Zorille\framework\zabbix_templates::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param_Exception() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( false ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS zabbix HOST) Il manque le parametre : zabbix_templates' );
		$this->object ->retrouve_zabbix_param ();
		$this ->assertEquals ( array (), $this->object ->getListeTemplatesCli () );
	}

	/**
	 * @covers Zorille\framework\zabbix_templates::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->onConsecutiveCalls ( 'val1', array ( 
				'val2' ) ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param ( false ) );
		$this ->assertSame ( array ( 
				"val1" ), $this->object ->getListeTemplatesCli () );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param ( true ) );
		$this ->assertSame ( array ( 
				"val2" ), $this->object ->getListeTemplatesCli () );
		$this ->assertSame ( array ( 
				"val2" => array ( 
						"templateid" => '', 
						"name" => "val2", 
						"exist" => false ) ), $this->object ->getListeTemplates () );
	}

	/**
	 * @covers Zorille\framework\zabbix_templates::ajoute_template_a_partir_cli
	 */
	public function testAjoute_template_a_partir_cli() {
		$liste_templates_cli = array ( 
				"val1", 
				"val2" );
		$liste_templates = array ( 
				"val1" => array ( 
						"templateid" => '', 
						"name" => "val1", 
						"exist" => false ), 
				"val2" => array ( 
						"templateid" => '', 
						"name" => "val2", 
						"exist" => false ) );
		$this->object ->setListeTemplatesCli ( $liste_templates_cli );
		$this->object ->setListeTemplates ( $liste_templates );
		
		$this ->assertSame ( $this->object, $this->object ->ajoute_template_a_partir_cli () );
		$this ->assertSame ( array ( 
				"val1" => array ( 
						"templateid" => '', 
						"name" => "val1", 
						"exist" => true ), 
				"val2" => array ( 
						"templateid" => '', 
						"name" => "val2", 
						"exist" => true ) ), $this->object ->getListeTemplates () );
	}

	/**
	 * @covers Zorille\framework\zabbix_templates::retire_template_a_partir_cli
	 */
	public function testRetire_template_a_partir_cli() {
		$liste_templates_cli = array ( 
				"val1" );
		$liste_templates = array ( 
				"val1" => array ( 
						"templateid" => '', 
						"name" => "val1", 
						"exist" => true ), 
				"val2" => array ( 
						"templateid" => '', 
						"name" => "val2", 
						"exist" => true ) );
		$this->object ->setListeTemplatesCli ( $liste_templates_cli );
		$this->object ->setListeTemplates ( $liste_templates );
		
		$this ->assertSame ( $this->object, $this->object ->retire_template_a_partir_cli () );
		$this ->assertSame ( array ( 
				"val1" => array ( 
						"templateid" => '', 
						"name" => "val1", 
						"exist" => false ), 
				"val2" => array ( 
						"templateid" => '', 
						"name" => "val2", 
						"exist" => true ) ), $this->object ->getListeTemplates () );
	}

	/**
	 * @covers Zorille\framework\zabbix_templates::RemplaceValeurListeTemplates
	 */
	public function testRemplaceValeurListeTemplates_exception() {
		$liste_groups = array ( 
				"NOM1" => array ( 
						"name" => "NOM1", 
						"templateid" => 1, 
						"exist" => true ), 
				"NOM2" => array ( 
						"name" => "NOM2", 
						"templateid" => 2, 
						"exist" => false ) );
		$this->object ->setListeTemplates ( $liste_groups );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS zabbix HOST) le template NOM10 n\'existe pas.' );
		$this->object ->RemplaceValeurListeTemplates ( "NOM10", "exist", false );
		
		$this ->assertSame ( array ( 
				"NOM1" => array ( 
						"name" => "NOM1", 
						"templateid" => 1, 
						"exist" => true ), 
				"NOM2" => array ( 
						"name" => "NOM2", 
						"templateid" => 2, 
						"exist" => false ) ), $this->object ->getListeTemplates () );
	}

	/**
	 * @covers Zorille\framework\zabbix_templates::RemplaceValeurListeTemplates
	 */
	public function testRemplaceValeurListeTemplates_valide() {
		$liste_groups = array ( 
				"NOM1" => array ( 
						"name" => "NOM1", 
						"templateid" => 1, 
						"exist" => true ), 
				"NOM2" => array ( 
						"name" => "NOM2", 
						"templateid" => 2, 
						"exist" => false ) );
		$this->object ->setListeTemplates ( $liste_groups );
		$this ->assertSame ( $this->object, $this->object ->RemplaceValeurListeTemplates ( "NOM10", "exist", false, false ) );
		$this ->assertSame ( array ( 
				"NOM1" => array ( 
						"name" => "NOM1", 
						"templateid" => 1, 
						"exist" => true ), 
				"NOM2" => array ( 
						"name" => "NOM2", 
						"templateid" => 2, 
						"exist" => false ) ), $this->object ->getListeTemplates () );
		$this ->assertSame ( $this->object, $this->object ->RemplaceValeurListeTemplates ( "NOM1", "exist", false, false ) );
		$this ->assertSame ( array ( 
				"NOM1" => array ( 
						"name" => "NOM1", 
						"templateid" => 1, 
						"exist" => false ), 
				"NOM2" => array ( 
						"name" => "NOM2", 
						"templateid" => 2, 
						"exist" => false ) ), $this->object ->getListeTemplates () );
	}

	/**
	 * @covers Zorille\framework\zabbix_templates::creer_liste_templates
	 */
	public function testCreer_liste_templates() {
		$liste_templates = array ( 
				"NOM1" => array ( 
						"name" => "NOM1", 
						"exist" => false ), 
				"NOM2" => array ( 
						"name" => "NOM2", 
						"templateid" => 2, 
						"exist" => true ) );
		$this->object ->setListeTemplates ( $liste_templates );
		
		$this->object ->getObjetTemplateRef () 
			->expects ( $this ->any () ) 
			->method ( 'creer_template' ) 
			->will ( $this ->onConsecutiveCalls ( false, array ( 
				"templateids" => array ( 
						10 ) ) ) );
		
		//Creation impossible
		$this ->assertSame ( $this->object, $this->object ->creer_liste_templates () );
		$this ->assertSame ( array ( 
				"NOM1" => array ( 
						"name" => "NOM1", 
						"exist" => false ), 
				"NOM2" => array ( 
						"name" => "NOM2", 
						"templateid" => 2, 
						"exist" => true ) ), $this->object ->getListeTemplates () );
		
		//Creation reussi
		$this ->assertSame ( $this->object, $this->object ->creer_liste_templates () );
		$this ->assertSame ( array ( 
				"NOM1" => array ( 
						"name" => "NOM1", 
						"exist" => true, 
						"templateid" => 10 ), 
				"NOM2" => array ( 
						"name" => "NOM2", 
						"templateid" => 2, 
						"exist" => true ) ), $this->object ->getListeTemplates () );
	}

	/**
	 * @covers Zorille\framework\zabbix_templates::recherche_liste_templates
	 */
	public function testRecherche_liste_templates() {
		$liste_templates = array ( 
				array ( 
						"templateid" => 1, 
						"host" => "NOM1" ), 
				array ( 
						"templateid" => 2, 
						"host" => "NOM2" ) );
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'templateGet' ) 
			->will ( $this ->returnValue ( $liste_templates ) );
		$this ->assertSame ( $this->object, $this->object ->recherche_liste_templates () );
		$this ->assertSame ( array ( 
				"NOM1" => array ( 
						"templateid" => 1, 
						"name" => "NOM1", 
						"exist" => true ), 
				"NOM2" => array ( 
						"templateid" => 2, 
						"name" => "NOM2", 
						"exist" => true ) ), $this->object ->getListeTemplates () );
	}

	/**
	 * @covers Zorille\framework\zabbix_templates::valide_liste_templates
	 */
	public function testValide_liste_templates() {
		$liste_templates = array ( 
				array ( 
						"host" => "NOM1", 
						"templateid" => 1 ), 
				array ( 
						"host" => "NOM2", 
						"templateid" => 2 ) );
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'templateGet' ) 
			->will ( $this ->returnValue ( $liste_templates ) );
		$this ->assertSame ( $this->object, $this->object ->valide_liste_templates () );
		$this ->assertSame ( array (), $this->object ->getListeTemplates () );
	}

	/**
	 * @covers Zorille\framework\zabbix_templates::ajoute_liste_templates_a_partir_de_tableau
	 */
	public function testAjoute_liste_templates_a_partir_de_tableau() {
		$liste_templates = array ( 
				"NOM1" => array ( 
						"name" => "NOM1", 
						"templateid" => 1, 
						"exist" => false ), 
				"NOM2" => array ( 
						"name" => "NOM2", 
						"templateid" => 2, 
						"exist" => false ) );
		$this->object ->setListeTemplates ( $liste_templates );
		
		$liste_ids = array ( 
				10, 
				2 );
		
		$this ->assertSame ( $this->object, $this->object ->ajoute_liste_templates_a_partir_de_tableau ( $liste_ids ) );
		$this ->assertSame ( array ( 
				"NOM1" => array ( 
						"name" => "NOM1", 
						"templateid" => 1, 
						"exist" => false ), 
				"NOM2" => array ( 
						"name" => "NOM2", 
						"templateid" => 2, 
						"exist" => true ) ), $this->object ->getListeTemplates () );
	}

	/**
	 * @covers Zorille\framework\zabbix_templates::valide_liste_templates_a_partir_de_tableau
	 */
	public function testValide_liste_templates_a_partir_de_tableau() {
		$liste_templates = array ( 
				"NOM1" => array ( 
						"name" => "NOM1", 
						"templateid" => 1, 
						"exist" => true ), 
				"NOM2" => array ( 
						"name" => "NOM2", 
						"templateid" => 2, 
						"exist" => false ) );
		$this->object ->setListeTemplates ( $liste_templates );
		
		$liste_ids = array ( 
				10, 
				2 );
		
		$this ->assertSame ( $this->object, $this->object ->valide_liste_templates_a_partir_de_tableau ( $liste_ids ) );
		$this ->assertSame ( array ( 
				"NOM1" => array ( 
						"name" => "NOM1", 
						"templateid" => 1, 
						"exist" => false ), 
				"NOM2" => array ( 
						"name" => "NOM2", 
						"templateid" => 2, 
						"exist" => true ) ), $this->object ->getListeTemplates () );
	}

	/**
	 * @covers Zorille\framework\zabbix_templates::invalide_liste_templates_a_partir_de_tableau
	 */
	public function testInvalide_liste_templates_a_partir_de_tableau() {
		$liste_templates = array ( 
				"NOM1" => array ( 
						"name" => "NOM1", 
						"templateid" => 1, 
						"exist" => false ), 
				"NOM2" => array ( 
						"name" => "NOM2", 
						"templateid" => 2, 
						"exist" => true ), 
				"NOM3" => array ( 
						"name" => "NOM3", 
						"templateid" => 3, 
						"exist" => true ) );
		$this->object ->setListeTemplates ( $liste_templates );
		
		$liste_ids = array ( 
				10, 
				2 );
		
		$this ->assertSame ( $this->object, $this->object ->invalide_liste_templates_a_partir_de_tableau ( $liste_ids ) );
		$this ->assertSame ( 
				array ( 
							"NOM1" => array ( 
									"name" => "NOM1", 
									"templateid" => 1, 
									"exist" => false ), 
							"NOM2" => array ( 
									"name" => "NOM2", 
									"templateid" => 2, 
									"exist" => false ), 
							"NOM3" => array ( 
									"name" => "NOM3", 
									"templateid" => 3, 
									"exist" => true ) ), 
					$this->object ->getListeTemplates () );
	}

	/**
	 * @covers Zorille\framework\zabbix_templates::creer_definition_templatesids_ws
	 */
	public function testcreer_definition_templatesids_ws() {
		$liste_templates = array ( 
				array ( 
						"host" => "NOM1", 
						"templateid" => 1 ), 
				array ( 
						"host" => "NOM2", 
						"templateid" => 2 ) );
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'templateGet' ) 
			->will ( $this ->returnValue ( $liste_templates ) );
		$this->object ->recherche_liste_templates ();
		
		$this ->assertEquals ( array ( 
				0 => array ( 
						"templateid" => 1 ), 
				1 => array ( 
						"templateid" => 2 ) ), $this->object ->creer_definition_templatesids_ws () );
	}

	/**
	 * @covers Zorille\framework\zabbix_templates::creer_definition_templatesids_sans_champ_templateid_ws
	 */
	public function testcreer_definition_templatesids_sans_champ_templateid_ws() {
		$liste_templates = array ( 
				array ( 
						"host" => "NOM1", 
						"templateid" => 1 ), 
				array ( 
						"host" => "NOM2", 
						"templateid" => 2 ) );
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'templateGet' ) 
			->will ( $this ->returnValue ( $liste_templates ) );
		$this->object ->recherche_liste_templates ();
		
		$this ->assertEquals ( array ( 
				1, 
				2 ), $this->object ->creer_definition_templatesids_sans_champ_templateid_ws () );
	}
}
