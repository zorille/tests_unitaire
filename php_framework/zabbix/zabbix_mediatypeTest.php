<?php
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-03-20 at 10:10:11.
 */
class zabbix_mediatypeTest extends MockedListeOptions {
	/**
     * @var zabbix_mediatype
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$zabbix_wsclient = $this->createMock ( "zabbix_wsclient" );
		
		$this->object = new zabbix_mediatype ( false, "zabbix_mediatype" );
		$this->object->setObjetZabbixWsclient ( $zabbix_wsclient );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers zabbix_mediatype::retrouve_zabbix_param
     */
	public function testRetrouve_zabbix_param_Exception1() {
			
			$this->getListeOption ()
				->expects ( $this->any () )
				->method ( 'verifie_variable_standard' )
				->will ( $this->returnValue ( false ) );
			$this->object->setListeOptions ( $this->getListeOption () );
			
			$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_mediatype) Il manque le parametre : zabbix_mediatype_nom' );
			$this->object->retrouve_zabbix_param ();
			$this->assertEquals ( "", $this->object->getDescription () );
			
	}

	/**
	 * @covers zabbix_mediatype::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param_Exception2() {
			
			$this->getListeOption ()
				->expects ( $this->any () )
				->method ( 'verifie_variable_standard' )
				->will ( $this->returnValue ( true ) );
			$this->getListeOption ()
				->expects ( $this->any () )
				->method ( 'renvoi_variables_standard' )
				->will ( $this->returnValue ( 1001 ) );
			$this->object->setListeOptions ( $this->getListeOption () );
			
			$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_mediatype) Type inconnu : 1001' );
			$this->object->retrouve_zabbix_param ();
			$this->assertEquals ( 1001, $this->object->getDescription () );
	}

	/**
	 * @covers zabbix_mediatype::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param_0() {
		$this->getListeOption ()
			->expects ( $this->any () )
			->method ( 'verifie_variable_standard' )
			->will ( $this->returnValue ( true ) );
		$this->getListeOption ()
			->expects ( $this->any () )
			->method ( 'renvoi_variables_standard' )
			->will ( $this->returnValue ( 0 ) );
		$this->object->setListeOptions ( $this->getListeOption () );
		
		$this->assertSame ( $this->object, $this->object->retrouve_zabbix_param () );
		$this->assertEquals ( 0, $this->object->getType () );
	}

	/**
	 * @covers zabbix_mediatype::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param_1() {
		$this->getListeOption ()
			->expects ( $this->any () )
			->method ( 'verifie_variable_standard' )
			->will ( $this->returnValue ( true ) );
		$this->getListeOption ()
			->expects ( $this->any () )
			->method ( 'renvoi_variables_standard' )
			->will ( $this->returnValue ( 1 ) );
		$this->object->setListeOptions ( $this->getListeOption () );
		
		$this->assertSame ( $this->object, $this->object->retrouve_zabbix_param () );
		$this->assertEquals ( 1, $this->object->getType () );
	}

	/**
	 * @covers zabbix_mediatype::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param_2() {
		$this->getListeOption ()
			->expects ( $this->any () )
			->method ( 'verifie_variable_standard' )
			->will ( $this->returnValue ( true ) );
		$this->getListeOption ()
			->expects ( $this->any () )
			->method ( 'renvoi_variables_standard' )
			->will ( $this->returnValue ( 2 ) );
		$this->object->setListeOptions ( $this->getListeOption () );
		
		$this->assertSame ( $this->object, $this->object->retrouve_zabbix_param () );
		$this->assertEquals ( 2, $this->object->getType () );
	}

	/**
	 * @covers zabbix_mediatype::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param_3() {
		$this->getListeOption ()
			->expects ( $this->any () )
			->method ( 'verifie_variable_standard' )
			->will ( $this->returnValue ( true ) );
		$this->getListeOption ()
			->expects ( $this->any () )
			->method ( 'renvoi_variables_standard' )
			->will ( $this->returnValue ( 3 ) );
		$this->object->setListeOptions ( $this->getListeOption () );
		
		$this->assertSame ( $this->object, $this->object->retrouve_zabbix_param () );
		$this->assertEquals ( 3, $this->object->getType () );
	}

	/**
	 * @covers zabbix_mediatype::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param_100() {
		$this->getListeOption ()
			->expects ( $this->any () )
			->method ( 'verifie_variable_standard' )
			->will ( $this->returnValue ( true ) );
		$this->getListeOption ()
			->expects ( $this->any () )
			->method ( 'renvoi_variables_standard' )
			->will ( $this->returnValue ( 100 ) );
		$this->object->setListeOptions ( $this->getListeOption () );
		
		$this->assertSame ( $this->object, $this->object->retrouve_zabbix_param () );
		$this->assertEquals ( 100, $this->object->getType () );
	}

	/**
	 * @covers zabbix_mediatype::creer_definition_mediatype_ws
	 */
	public function testCreer_definition_mediatype_ws_exception() {
			$this->object->setType ( 1001 );
			$this->object->setExecPath ( "/exec/path" );
				
			$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_mediatype) Type inconnu : 1001' );
			$this->object->creer_definition_mediatype_ws ();
	}
	
	/**
     * @covers zabbix_mediatype::creer_definition_mediatype_ws
     */
	public function testCreer_definition_mediatype_ws_valide() {
		$this->object->setDescription ( "DESC" );
		$this->object->setType ( 0 );
		$this->object->setStatus ( "enable" );
		$this->object->setSmtpHelo ( "helo" );
		$this->object->setSmtpServer ( "SMTP.server" );
		$this->object->setSmtpEmail ( "mail@mail.com" );
		$this->assertEquals ( array (
				"description" => "DESC",
				"type" => 0,
				"status" => 0,
				"smtp_helo" => "helo",
				"smtp_server" => "SMTP.server",
				"smtp_email" => "mail@mail.com" 
		), $this->object->creer_definition_mediatype_ws () );
		
		$this->object->setType ( 1 );
		$this->object->setExecPath ( "/exec/path" );
		$this->assertEquals ( array (
				"description" => "DESC",
				"type" => 1,
				"status" => 0,
				"exec_path" => "/exec/path" 
		), $this->object->creer_definition_mediatype_ws () );
		
		$this->object->setType ( 2 );
		$this->object->setGsmModem ( "/dev/gsm" );
		$this->assertEquals ( array (
				"description" => "DESC",
				"type" => 2,
				"status" => 0,
				"gsm_modem" => "/dev/gsm" 
		), $this->object->creer_definition_mediatype_ws () );
		
		$this->object->setType ( 3 );
		$this->object->setUsername ( "user" );
		$this->object->setPassword ( "pass" );
		$this->assertEquals ( array (
				"description" => "DESC",
				"type" => 3,
				"status" => 0,
				"username" => "user",
				"passwd" => "pass" 
		), $this->object->creer_definition_mediatype_ws () );
		
		$this->object->setType ( 100 );
		$this->object->setExecPath ( "/exec/path" );
		$this->object->setUsername ( "user" );
		$this->object->setPassword ( "pass" );
		$this->object->setMediatypeId ( "60" );
		$this->assertEquals ( array (
				"mediatypeid" => "60",
				"description" => "DESC",
				"type" => 100,
				"status" => 0,
				"exec_path" => 0,
				"username" => "user",
				"passwd" => "pass" 
		), $this->object->creer_definition_mediatype_ws () );
	}

	/**
     * @covers zabbix_mediatype::creer_mediatype
     */
	public function testCreer_mediatype() {
		$this->object->setDescription ( "DESC" );
		$this->object->setType ( 0 );
		$this->object->setStatus ( "enable" );
		$this->object->setSmtpHelo ( "helo" );
		$this->object->setSmtpServer ( "SMTP.server" );
		$this->object->setSmtpEmail ( "mail@mail.com" );
		
		$this->object->getObjetZabbixWsclient ()
			->expects ( $this->any () )
			->method ( 'mediatypeCreate' )
			->will ( $this->returnValue ( array (
				"mediatypeids" => array (
						1 
				) 
		) ) );
		
		$this->assertEquals ( array (
				"mediatypeids" => array (
						1 
				) 
		), $this->object->creer_mediatype () );
	}

	/**
     * @covers zabbix_mediatype::creer_definition_mediatype_delete_ws
     */
	public function testCreer_definition_mediatype_delete_ws() {
		$this->assertEquals ( array (), $this->object->creer_definition_mediatype_delete_ws () );
		$this->object->setMediatypeId ( 10 );
		$this->assertEquals ( array (
				10 
		), $this->object->creer_definition_mediatype_delete_ws () );
	}

	/**
     * @covers zabbix_mediatype::supprime_mediatype
     */
	public function testSupprime_mediatype() {
		$this->object->getObjetZabbixWsclient ()
			->expects ( $this->any () )
			->method ( 'mediatypeGet' )
			->will ( $this->returnValue ( array (
				"mediatypeids" => array (
						"mediatypeid" => 10 
				) 
		) ) );
		$this->object->getObjetZabbixWsclient ()
			->expects ( $this->any () )
			->method ( 'mediatypeDelete' )
			->will ( $this->returnValue ( array (
				"mediatypeids" => array (
						10 
				) 
		) ) );
		
		$this->object->setMediatypeId ( 10 );
		$this->assertEquals ( array (
				"mediatypeids" => array (
						10 
				) 
		), $this->object->supprime_mediatype () );
	}

	/**
     * @covers zabbix_mediatype::creer_definition_mediatype_get_ws
     */
	public function testCreer_definition_mediatype_get_ws() {
		$this->object->setDescription ( "TEST" );
		$this->assertEquals ( array (
				"output" => "mediatypeid",
				"filter" => array (
						"description" => "TEST" 
				) 
		), $this->object->creer_definition_mediatype_get_ws () );
	}

	/**
     * @covers zabbix_mediatype::recherche_mediatype
     */
	public function testRecherche_mediatype() {
		$this->object->getObjetZabbixWsclient ()
			->expects ( $this->any () )
			->method ( 'mediatypeGet' )
			->will ( $this->returnValue ( array (
				"mediatypeids" => array (
						"mediatypeid" => 10 
				) 
		) ) );
		
		$this->assertEquals ( array (
				"mediatypeids" => array (
						"mediatypeid" => 10 
				) 
		), $this->object->recherche_mediatype () );
	}

	/**
     * @covers zabbix_mediatype::recherche_mediatypeid_by_Name
     */
	public function testRecherche_mediatypeid_by_Name() {
		$this->object->setDescription ( "All" );
		$this->assertSame ( $this->object, $this->object->recherche_mediatypeid_by_Name () );
		$this->assertEquals ( "0", $this->object->getMediatypeId () );
		
		$this->object->setDescription ( "TEST" );
		$this->object->getObjetZabbixWsclient ()
			->expects ( $this->any () )
			->method ( 'mediatypeGet' )
			->will ( $this->returnValue ( array (
				"mediatypeids" => array (
						"mediatypeid" => 10 
				) 
		) ) );
		
		$this->object->setMediatypeId ( "10" );
		$this->assertSame ( $this->object, $this->object->recherche_mediatypeid_by_Name () );
		$this->assertEquals ( "10", $this->object->getMediatypeId () );
	}

	/**
     * @covers zabbix_mediatype::retrouve_Type
     */
	public function testRetrouve_Type() {
		$this->assertEquals ( 0, $this->object->retrouve_Type ( "" ) );
		$this->assertEquals ( 0, $this->object->retrouve_Type ( "email" ) );
		$this->assertEquals ( 1, $this->object->retrouve_Type ( "script" ) );
		$this->assertEquals ( 2, $this->object->retrouve_Type ( "sms" ) );
		$this->assertEquals ( 3, $this->object->retrouve_Type ( "jabber" ) );
		$this->assertEquals ( 100, $this->object->retrouve_Type ( "ez texting" ) );
		$this->assertEquals ( 10, $this->object->retrouve_Type ( 10 ) );
	}

	/**
     * @covers zabbix_mediatype::retrouve_Status
     */
	public function testRetrouve_Status() {
		$this->assertEquals ( 0, $this->object->retrouve_Status ( "" ) );
		$this->assertEquals ( 0, $this->object->retrouve_Status ( "enabled" ) );
		$this->assertEquals ( 1, $this->object->retrouve_Status ( "disabled" ) );
		$this->assertEquals ( 10, $this->object->retrouve_Status ( 10 ) );
	}

	/**
     * @covers zabbix_mediatype::retrouve_ExecPath
     */
	public function testRetrouve_ExecPath() {
		$this->object->setType ( 1001 );
		$this->assertEquals ( "", $this->object->retrouve_ExecPath ( "" ) );
		
		$this->object->setType ( "script" );
		$this->assertEquals ( "/path/to/script", $this->object->retrouve_ExecPath ( "/path/to/script" ) );
		
		$this->object->setType ( "ez texting" );
		$this->assertEquals ( 0, $this->object->retrouve_ExecPath ( "Usa" ) );
		$this->assertEquals ( 1, $this->object->retrouve_ExecPath ( "Canada" ) );
	}
}
