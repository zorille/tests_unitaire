<?php
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-03-20 at 10:16:37.
 */
class zabbix_permissionsTest extends MockedListeOptions {
	/**
     * @var zabbix_permissions
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		
		$this->object = new zabbix_permissions ( false, "TESTS zabbix permissions" );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers zabbix_permissions::decoupe_permission
     */
	public function testDecoupe_permission_exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS zabbix permissions) permission non utilisable : champ1|champ2|champ3' );
		$this->object ->decoupe_permission ( "champ1|champ2|champ3" );
	}

	/**
	 * @covers zabbix_permissions::decoupe_permission
	 */
	public function testDecoupe_permission_valide() {
		$this ->assertSame ( $this->object, $this->object ->decoupe_permission ( "champ1|champ2" ) );
	}

	/**
     * @covers zabbix_permissions::retrouve_zabbix_param
     */
	public function testRetrouve_zabbix_param_Exception() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( 'val1' ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS zabbix permissions) permission non utilisable : val1' );
		$this->object ->retrouve_zabbix_param ();
	}

	/**
	 * @covers zabbix_permissions::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param_vide() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( false ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( array () ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
		$this ->assertEquals ( array (), $this->object ->getPermissions () );
	}

	/**
	 * @covers zabbix_permissions::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( 'champ1|champ2' ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
		$this ->assertEquals ( "champ1", $this->object ->getHostGroupName () );
		$this ->assertEquals ( 0, $this->object ->getPermission () );
		$this ->assertEquals ( array ( 
				array ( 
						"name" => "champ1", 
						"permission" => 0 ) ), $this->object ->getPermissions () );
	}

	/**
	 * @covers zabbix_permissions::retrouve_hostgroupsIds
	 */
	public function testRetrouve_hostgroupsIds() {
		$zabbix_hostgroups = $this ->createMock ( "zabbix_hostgroups" );
		$zabbix_hostgroups ->expects ( $this ->any () ) 
			->method ( 'recherche_liste_groups' ) 
			->will ( $this ->returnValue ( true ) );
		$zabbix_hostgroups ->expects ( $this ->any () ) 
			->method ( 'retrouve_hostgroupId' ) 
			->will ( $this ->onConsecutiveCalls ( false, 1, 2, 3 ) );
		$this->object ->setObjetHostGroups ( $zabbix_hostgroups );
		
		$this->object ->setAjoutPermissions ( array ( 
				"name" => "NOM1", 
				"permission" => 0 ) );
		$this->object ->setAjoutPermissions ( array ( 
				"name" => "NOM2", 
				"permission" => 0 ) );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_hostgroupsIds () );
		$this ->assertEquals ( array ( 
				array ( 
						"name" => "NOM1", 
						"permission" => 0 ), 
				array ( 
						"name" => "NOM2", 
						"permission" => 0, 
						'hostgroupid' => 1 ) ), $this->object ->getPermissions () );
	}

	/**
	 * @covers zabbix_permissions::creer_definition_permissions_create_ws
	 */
	public function testCreer_definition_permissions_create_ws() {
		$this ->assertEquals ( array (), $this->object ->creer_definition_permissions_create_ws () );
		
		$this->object ->setAjoutPermissions ( array ( 
				"name" => "NOM1", 
				"permission" => 0, 
				"hostgroupid" => 10 ) );
		$this->object ->setAjoutPermissions ( array ( 
				"name" => "NOM2", 
				"permission" => 2, 
				"hostgroupid" => 11 ) );
		$this->object ->setAjoutPermissions ( array ( 
				"name" => "NOM3", 
				"permission" => 0 ) );
		
		$this ->assertEquals ( array ( 
				array ( 
						'permission' => 0, 
						'id' => 10 ), 
				array ( 
						'permission' => 2, 
						'id' => 11 ) ), $this->object ->creer_definition_permissions_create_ws () );
	}

	/**
     * @covers zabbix_permissions::retrouve_Permission
     */
	public function testRetrouve_Permission() {
		$this ->assertEquals ( 0, $this->object ->retrouve_Permission ( "" ) );
		$this ->assertEquals ( 0, $this->object ->retrouve_Permission ( "denied" ) );
		$this ->assertEquals ( 2, $this->object ->retrouve_Permission ( "read-only" ) );
		$this ->assertEquals ( 3, $this->object ->retrouve_Permission ( "read-write" ) );
		$this ->assertEquals ( 10, $this->object ->retrouve_Permission ( 10 ) );
	}
}
