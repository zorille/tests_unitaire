<?php
namespace Zorille\framework;
use \Exception as Exception;
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-03-20 at 10:23:08.
 */
class zabbix_usergroupsTest extends MockedListeOptions {
	/**
     * @var zabbix_usergroups
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$zabbix_wsclient = $this ->createMock('Zorille\framework\zabbix_wsclient' );
		$zabbix_group_reference = $this ->createMock('Zorille\framework\zabbix_usergroup' );
		
		$this->object = new zabbix_usergroups ( false, "TESTS zabbix_usergroups" );
		$this->object ->setObjetZabbixWsclient ( $zabbix_wsclient ) 
			->setObjetUserGroupRef ( $zabbix_group_reference );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers Zorille\framework\zabbix_usergroups::retrouve_zabbix_param
     */
	public function testRetrouve_zabbix_param_Exception() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( false ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS zabbix_usergroups) Il manque le parametre : zabbix_usergroups' );
		$this->object ->retrouve_zabbix_param ();
		
		$this ->assertEquals ( array (), $this->object ->getListeGroupCli () );
	}

	/**
	 * @covers Zorille\framework\zabbix_usergroups::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->onConsecutiveCalls ( 'val1', array ( 
				'val2' ) ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
	}

	/**
     * @covers Zorille\framework\zabbix_usergroups::recherche_liste_groups
     */
	public function testRecherche_liste_groups() {
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'setName' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetUserGroupRef () ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'setGuiAccess' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetUserGroupRef () ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'setUsersStatus' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetUserGroupRef () ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'setDebugMode' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetUserGroupRef () ) );
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'usergroupGet' ) 
			->will ( $this ->returnValue ( array ( 
				array ( 
						"usrgrpid" => 10, 
						"name" => "NOM1", 
						"gui_access" => "enabled", 
						"users_status" => "internal", 
						"debug_mode" => "enabled" ) ) ) );
		
		$this ->assertSame ( $this->object, $this->object ->recherche_liste_groups () );
	}

	/**
     * @covers Zorille\framework\zabbix_usergroups::valide_liste_groups
     */
	public function testValide_liste_groups() {
		$liste_group_cli = array ( 
				"NOM1" => array ( 
						"name" => "NOM1", 
						"exist" => false ), 
				"NOM2" => array ( 
						"name" => "NOM2", 
						"groupid" => 2, 
						"exist" => true ) );
		$this->object ->setListeGroupCli ( $liste_group_cli );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'setName' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetUserGroupRef () ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'getName' ) 
			->will ( $this ->returnValue ( "NOM1" ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'setGuiAccess' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetUserGroupRef () ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'setUsersStatus' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetUserGroupRef () ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'setDebugMode' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetUserGroupRef () ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'compare_usergroup' ) 
			->will ( $this ->onConsecutiveCalls ( false, true ) );
		$liste_groups = array ( 
				array ( 
						"usrgrpid" => 10, 
						"name" => "NOM1", 
						"gui_access" => "enabled", 
						"users_status" => "internal", 
						"debug_mode" => "enabled" ), 
				array ( 
						"usrgrpid" => 12, 
						"name" => "NOM2", 
						"gui_access" => "enabled", 
						"users_status" => "internal", 
						"debug_mode" => "enabled" ) );
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'usergroupGet' ) 
			->will ( $this ->returnValue ( $liste_groups ) );
		$this ->assertSame ( $this->object, $this->object ->valide_liste_groups () );
		$this ->assertEquals ( array ( 
				"NOM1" => $this->object ->getObjetUserGroupRef () ), $this->object ->getListeGroup () );
	}

	/**
     * @covers Zorille\framework\zabbix_usergroups::creer_usergroup
     */
	public function testCreer_usergroup() {
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'setName' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetUserGroupRef () ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'setGuiAccess' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetUserGroupRef () ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'setUsersStatus' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetUserGroupRef () ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'setDebugMode' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetUserGroupRef () ) );
		$groupe_zabbix = array ( 
				"usrgrpid" => 10, 
				"name" => "NOM1", 
				"gui_access" => "enabled", 
				"users_status" => "internal", 
				"debug_mode" => "enabled" );
		$this ->assertEquals ( $this->object ->getObjetUserGroupRef (), $this->object ->creer_usergroup ( $groupe_zabbix ) );
	}

	/**
     * @covers Zorille\framework\zabbix_usergroups::ajoute_groups
     */
	public function testAjoute_groups() {
		$liste_group = array ( 
				"NOM1" => $this->object ->getObjetUserGroupRef (), 
				"NOM2" => $this->object ->getObjetUserGroupRef () );
		$this->object ->setListeGroup ( $liste_group );
		$liste_group_cli = array ( 
				array ( 
						"usrgrpid" => 10, 
						"name" => "NOM3", 
						"gui_access" => "enabled", 
						"users_status" => "internal", 
						"debug_mode" => "enabled" ), 
				array ( 
						"usrgrpid" => 12, 
						"name" => "NOM4", 
						"gui_access" => "enabled", 
						"users_status" => "internal", 
						"debug_mode" => "enabled" ) );
		
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'setName' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetUserGroupRef () ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'getName' ) 
			->will ( $this ->returnValue ( "NOM3" ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'setGuiAccess' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetUserGroupRef () ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'setUsersStatus' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetUserGroupRef () ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'setDebugMode' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetUserGroupRef () ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'compare_usergroup' ) 
			->will ( $this ->onConsecutiveCalls ( false, true ) );
		
		$this ->assertSame ( $this->object, $this->object ->ajoute_groups ( $liste_group_cli ) );
		$this ->assertEquals ( array ( 
				"NOM1" => $this->object ->getObjetUserGroupRef (), 
				"NOM2" => $this->object ->getObjetUserGroupRef (), 
				"NOM3" => $this->object ->getObjetUserGroupRef () ), $this->object ->getListeGroup () );
	}

	/**
     * @covers Zorille\framework\zabbix_usergroups::supprime_groups
     */
	public function testSupprime_groups() {
		$liste_group = array ( 
				"NOM1" => $this->object ->getObjetUserGroupRef (), 
				"NOM2" => $this->object ->getObjetUserGroupRef () );
		$this->object ->setListeGroup ( $liste_group );
		$liste_group_cli = array ( 
				array ( 
						"usrgrpid" => 10, 
						"name" => "NOM1", 
						"gui_access" => "enabled", 
						"users_status" => "internal", 
						"debug_mode" => "enabled" ), 
				array ( 
						"usrgrpid" => 12, 
						"name" => "NOM2", 
						"gui_access" => "enabled", 
						"users_status" => "internal", 
						"debug_mode" => "enabled" ) );
		
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'setName' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetUserGroupRef () ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'getName' ) 
			->will ( $this ->returnValue ( "NOM1" ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'setGuiAccess' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetUserGroupRef () ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'setUsersStatus' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetUserGroupRef () ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'setDebugMode' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetUserGroupRef () ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'compare_usergroup' ) 
			->will ( $this ->onConsecutiveCalls ( false, true ) );
		
		$this ->assertSame ( $this->object, $this->object ->supprime_groups ( $liste_group_cli ) );
		$this ->assertEquals ( array ( 
				"NOM1" => $this->object ->getObjetUserGroupRef () ), $this->object ->getListeGroup () );
	}

	/**
     * @covers Zorille\framework\zabbix_usergroups::creer_definition_usergroups_ws
     */
	public function testCreer_definition_usergroups_ws() {
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'creer_definition_userGroup_get_ws' ) 
			->will ( $this ->onConsecutiveCalls ( 10, 20 ) );
		$liste_group = array ( 
				"NOM1" => $this->object ->getObjetUserGroupRef (), 
				"NOM2" => $this->object ->getObjetUserGroupRef () );
		$this->object ->setListeGroup ( $liste_group );
		$this ->assertEquals ( array ( 
				0 => 10, 
				1 => 20 ), $this->object ->creer_definition_usergroups_ws () );
	}

	/**
     * @covers Zorille\framework\zabbix_usergroups::creer_definition_usergroupsids_ws
     */
	public function testCreer_definition_usergroupsids_ws() {
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'getUsrgrpId' ) 
			->will ( $this ->onConsecutiveCalls ( 10, 20 ) );
		$liste_group = array ( 
				"NOM1" => $this->object ->getObjetUserGroupRef (), 
				"NOM2" => $this->object ->getObjetUserGroupRef () );
		$this->object ->setListeGroup ( $liste_group );
		$this ->assertEquals ( array ( 
				0 => array ( 
						"usrgrpid" => 10 ), 
				1 => array ( 
						"usrgrpid" => 20 ) ), $this->object ->creer_definition_usergroupsids_ws () );
	}
}
