<?php
namespace Zorille\framework;
use \Exception as Exception;
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-03-24 at 08:44:01.
 */
class zabbix_action_operation_conditionTest extends MockedListeOptions {
	/**
     * @var zabbix_action_operation_condition
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = new zabbix_action_operation_condition ( false, "zabbix_action_operation_condition" );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers Zorille\framework\zabbix_action_operation_condition::retrouve_zabbix_param
     */
	public function testRetrouve_zabbix_param_Exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_action_operation_condition) Parametre inutilisable : test|erreur' );
		$this->object ->retrouve_zabbix_param ( "test|erreur" );
	}

	/**
	 * @covers Zorille\framework\zabbix_action_operation_condition::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( false ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
		$this ->assertEquals ( 14, $this->object ->getConditionType () );
		
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( "event acknowledged" ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
		$this ->assertEquals ( "14", $this->object ->getConditionType () );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param ( "test|operator|valeur" ) );
		$this ->assertEquals ( "14", $this->object ->getConditionType () );
		$this ->assertEquals ( 0, $this->object ->getOperator () );
		$this ->assertEquals ( "valeur", $this->object ->getValue () );
	}

	/**
     * @covers Zorille\framework\zabbix_action_operation_condition::creer_definition_zabbix_operation_condition_ws
     */
	public function testCreer_definition_zabbix_operation_condition_ws() {
		$this->object ->setConditionType ( "event acknowledged" );
		$this ->assertEquals ( array (), $this->object ->creer_definition_zabbix_operation_condition_ws () );
		$this->object ->setValue ( "Ack" );
		
		$this ->assertEquals ( array ( 
				"conditiontype" => 14, 
				"operator" => 0, 
				"value" => "Ack" ), $this->object ->creer_definition_zabbix_operation_condition_ws () );
		
		$this->object ->setOpConditionId ( 10 );
		$this->object ->setConditionId ( 20 );
		$this ->assertEquals ( array ( 
				"conditiontype" => 14, 
				"operator" => 0, 
				"value" => "Ack", 
				"opconditionid" => 10, 
				"conditionid" => 20 ), $this->object ->creer_definition_zabbix_operation_condition_ws () );
	}

	/**
     * @covers Zorille\framework\zabbix_action_operation_condition::retrouve_ConditionOperator
     */
	public function testRetrouve_ConditionOperator() {
		$this ->assertEquals ( 0, $this->object ->retrouve_ConditionOperator ( "" ) );
		$this ->assertEquals ( 0, $this->object ->retrouve_ConditionOperator ( "=" ) );
		$this ->assertEquals ( 10, $this->object ->retrouve_ConditionOperator ( 10 ) );
	}

	/**
     * @covers Zorille\framework\zabbix_action_operation_condition::retrouve_ConditionType
     */
	public function testRetrouve_ConditionType() {
		$this ->assertEquals ( 14, $this->object ->retrouve_ConditionType ( "" ) );
		$this ->assertEquals ( 14, $this->object ->retrouve_ConditionType ( "event acknowledged" ) );
		$this ->assertEquals ( 10, $this->object ->retrouve_ConditionType ( 10 ) );
	}
}
