<?php
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-03-24 at 14:53:56.
 */
class zabbix_action_operationTest extends MockedListeOptions {
	/**
     * @var zabbix_action_operation
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$zabbix_wsclient = $this ->createMock ( "zabbix_wsclient" );
		$zabbix_action_operation_command = $this ->createMock ( "zabbix_action_operation_command" );
		$zabbix_action_operation_condition = $this ->createMock ( "zabbix_action_operation_condition" );
		$zabbix_action_operation_message = $this ->createMock ( "zabbix_action_operation_message" );
		$zabbix_host = $this ->createMock ( "zabbix_host" );
		$zabbix_hostgroup = $this ->createMock ( "zabbix_hostgroup" );
		
		$this->object = new zabbix_action_operation ( false, "zabbix_action_operation" );
		$this->object ->setObjetZabbixWsclient ( $zabbix_wsclient ) 
			->setObjetOpCommand ( $zabbix_action_operation_command ) 
			->setObjetOpConditionRef ( $zabbix_action_operation_condition ) 
			->setObjetOpMessage ( $zabbix_action_operation_message ) 
			->setObjetHostRef ( $zabbix_host ) 
			->setObjetHostGroupRef ( $zabbix_hostgroup );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * @covers zabbix_action_operation::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param_Exception() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( false ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_action_operation) Il manque le parametre : zabbix_action_operation_operationtype' );
		$this->object ->retrouve_zabbix_param ();
	}

	/**
	 * @covers zabbix_action_operation::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param_0() {
		$opcondition_ref = $this ->createMock ( "zabbix_action_operation_condition" );
		$opcondition_ref ->expects ( $this ->any () ) 
			->method ( 'retrouve_zabbix_param' ) 
			->will ( $this ->returnValue ( true ) );
		$this->object ->setObjetOpConditionRef ( $opcondition_ref );
		
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( "send message" ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
		$this ->assertEquals ( 0, $this->object ->getOperationType () );
	}

	/**
	 * @covers zabbix_action_operation::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param_1() {
		$opcondition_ref = $this ->createMock ( "zabbix_action_operation_condition" );
		$opcondition_ref ->expects ( $this ->any () ) 
			->method ( 'retrouve_zabbix_param' ) 
			->will ( $this ->returnValue ( true ) );
		$this->object ->setObjetOpConditionRef ( $opcondition_ref );
		
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( "remote command" ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
		$this ->assertEquals ( 1, $this->object ->getOperationType () );
	}

	/**
	 * @covers zabbix_action_operation::retrouve_opconditions
	 */
	public function testRetrouve_opconditions_valide() {
		$opcondition_ref = $this ->createMock ( "zabbix_action_operation_condition" );
		$opcondition_ref ->expects ( $this ->any () ) 
			->method ( 'retrouve_zabbix_param' ) 
			->will ( $this ->returnValue ( true ) );
		$this->object ->setObjetOpConditionRef ( $opcondition_ref );
		
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( "send message" ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		$this ->assertSame ( $this->object, $this->object ->retrouve_opconditions () );
	}

	/**
     * @covers zabbix_action_operation::creer_definition_action_operation_ws
     */
	public function testCreer_definition_action_operation_ws() {
		$opcondition_ref = $this ->createMock ( "zabbix_action_operation_condition" );
		$opcondition_ref ->expects ( $this ->any () ) 
			->method ( 'creer_definition_zabbix_operation_condition_ws' ) 
			->will ( $this ->returnValue ( array ( 
				"conditiontype" => 14, 
				"operator" => 0, 
				"value" => "Ack" ) ) );
		
		$opconditions = array ( 
				$opcondition_ref, 
				$opcondition_ref );
		$this->object ->setOpConditions ( $opconditions );
		$operation_command = $this ->createMock ( "zabbix_action_operation_command" );
		$operation_command ->expects ( $this ->any () ) 
			->method ( 'creer_definition_zabbix_operation_command_ws' ) 
			->will ( $this ->returnValue ( array () ) );
		$this->object ->setObjetOpCommand ( $operation_command );
		$operation_message = $this ->createMock ( "zabbix_action_operation_message" );
		$operation_message ->expects ( $this ->any () ) 
			->method ( 'creer_definition_zabbix_operation_message_ws' ) 
			->will ( $this ->returnValue ( array () ) );
		$this->object ->setObjetOpMessage ( $operation_message );
		
		$this->object ->setOperationId ( 100 );
		$this->object ->setActionId ( 101 );
		$retour = array ( 
				"operationtype" => "", 
				"esc_period" => "0", 
				"esc_step_from" => "1", 
				"esc_step_to" => "1", 
				"evaltype" => 1, 
				"opgroup" => array (), 
				"optemplate" => array (), 
				"opcommand" => array (), 
				"opconditions" => array ( 
						array ( 
								"conditiontype" => 14, 
								"operator" => 0, 
								"value" => "Ack" ), 
						array ( 
								"conditiontype" => 14, 
								"operator" => 0, 
								"value" => "Ack" ) ), 
				"opmessage" => array (), 
				"operationid" => 100, 
				"actionid" => 101 );
		$this ->assertEquals ( $retour, $this->object ->creer_definition_action_operation_ws () );
	}

	/**
     * @covers zabbix_action_operation::creer_definition_action_operation_conditions_ws
     */
	public function testCreer_definition_action_operation_conditions_ws() {
		$opcondition_ref = $this ->createMock ( "zabbix_action_operation_condition" );
		$opcondition_ref ->expects ( $this ->any () ) 
			->method ( 'creer_definition_zabbix_operation_condition_ws' ) 
			->will ( $this ->returnValue ( array ( 
				"conditiontype" => 14, 
				"operator" => 0, 
				"value" => "Ack" ) ) );
		
		$opconditions = array ( 
				$opcondition_ref, 
				$opcondition_ref );
		$this->object ->setOpConditions ( $opconditions );
		
		$this ->assertEquals ( array ( 
				"opconditions" => array ( 
						array ( 
								"conditiontype" => 14, 
								"operator" => 0, 
								"value" => "Ack" ), 
						array ( 
								"conditiontype" => 14, 
								"operator" => 0, 
								"value" => "Ack" ) ) ), $this->object ->creer_definition_action_operation_conditions_ws () );
	}

	/**
     * @covers zabbix_action_operation::creer_definition_action_operation_command_ws
     */
	public function testCreer_definition_action_operation_command_ws_exception() {
		$operation_command = $this ->createMock ( "zabbix_action_operation_command" );
		$operation_command ->expects ( $this ->any () ) 
			->method ( 'creer_definition_zabbix_operation_command_ws' ) 
			->will ( $this ->returnValue ( array ( 
				"type" => 1, 
				"command" => "COMMAND" ) ) );
		
		$this->object ->setObjetOpCommand ( $operation_command );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_action_operation) Il faut un zabbix_action_operation_opcommand_grp ou un zabbix_action_operation_opcommand_hst pour un opcommand' );
		$this->object ->creer_definition_action_operation_command_ws ();
	}

	/**
	 * @covers zabbix_action_operation::creer_definition_action_operation_command_ws
	 */
	public function testCreer_definition_action_operation_command_ws_valide() {
		$operation_command = $this ->createMock ( "zabbix_action_operation_command" );
		$operation_command ->expects ( $this ->any () ) 
			->method ( 'creer_definition_zabbix_operation_command_ws' ) 
			->will ( $this ->returnValue ( array ( 
				"type" => 1, 
				"command" => "COMMAND" ) ) );
		
		$this->object ->setObjetOpCommand ( $operation_command );
		$this->object ->setOpCommandGrp ( array ( 
				111 ) );
		$this ->assertEquals ( array ( 
				"opcommand" => array ( 
						"type" => 1, 
						"command" => "COMMAND" ), 
				"opcommand_grp" => array ( 
						111 ) ), $this->object ->creer_definition_action_operation_command_ws () );
		
		$this->object ->setOpCommandGrp ( array () );
		$this->object ->setOpCommandHst ( array ( 
				112 ) );
		$this ->assertEquals ( array ( 
				"opcommand" => array ( 
						"type" => 1, 
						"command" => "COMMAND" ), 
				"opcommand_hst" => array ( 
						112 ) ), $this->object ->creer_definition_action_operation_command_ws () );
	}

	/**
     * @covers zabbix_action_operation::creer_definition_action_operation_message_ws
     */
	public function testCreer_definition_action_operation_message_ws_exception() {
		$operation_message = $this ->createMock ( "zabbix_action_operation_message" );
		$operation_message ->expects ( $this ->any () ) 
			->method ( 'creer_definition_zabbix_operation_message_ws' ) 
			->will ( $this ->returnValue ( array ( 
				"default_msg" => 0, 
				"mediatypeid" => 1, 
				"message" => "message", 
				"subject" => "subject" ) ) );
		$zabbix_user = $this ->createMock ( "zabbix_user" );
		$zabbix_user ->expects ( $this ->any () ) 
			->method ( 'setAlias' ) 
			->will ( $this ->returnSelf () );
		$zabbix_user ->expects ( $this ->any () ) 
			->method ( 'recherche_userid_by_Alias' ) 
			->will ( $this ->returnSelf () );
		
		$zabbix_usergroup = $this ->createMock ( "zabbix_usergroup" );
		$zabbix_usergroup ->expects ( $this ->any () ) 
			->method ( 'setName' ) 
			->will ( $this ->returnSelf () );
		$zabbix_usergroup ->expects ( $this ->any () ) 
			->method ( 'recherche_userGroupid_by_Name' ) 
			->will ( $this ->returnSelf () );
		
		$this->object ->setObjetOpMessage ( $operation_message ) 
			->setObjetUserRef ( $zabbix_user ) 
			->setObjetUserGroupRef ( $zabbix_usergroup );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_action_operation) Il faut un zabbix_action_operation_opmessage_grp ou un zabbix_action_operation_opmessage_usr pour un opcommand' );
		$this->object ->creer_definition_action_operation_message_ws ();
	}

	/**
	 * @covers zabbix_action_operation::creer_definition_action_operation_message_ws
	 */
	public function testCreer_definition_action_operation_message_ws_valide() {
		$operation_message = $this ->createMock ( "zabbix_action_operation_message" );
		$operation_message ->expects ( $this ->any () ) 
			->method ( 'creer_definition_zabbix_operation_message_ws' ) 
			->will ( $this ->returnValue ( array ( 
				"default_msg" => 0, 
				"mediatypeid" => 1, 
				"message" => "message", 
				"subject" => "subject" ) ) );
		$zabbix_user = $this ->createMock ( "zabbix_user" );
		$zabbix_user ->expects ( $this ->any () ) 
			->method ( 'setAlias' ) 
			->will ( $this ->returnSelf () );
		$zabbix_user ->expects ( $this ->any () ) 
			->method ( 'recherche_userid_by_Alias' ) 
			->will ( $this ->returnSelf () );
		
		$zabbix_usergroup = $this ->createMock ( "zabbix_usergroup" );
		$zabbix_usergroup ->expects ( $this ->any () ) 
			->method ( 'setName' ) 
			->will ( $this ->returnSelf () );
		$zabbix_usergroup ->expects ( $this ->any () ) 
			->method ( 'recherche_userGroupid_by_Name' ) 
			->will ( $this ->returnSelf () );
		
		$this->object ->setObjetOpMessage ( $operation_message ) 
			->setObjetUserRef ( $zabbix_user ) 
			->setObjetUserGroupRef ( $zabbix_usergroup );
		
		$this->object ->setOpMessageGroup ( array ( 
				"GROUP1" ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'creer_definition_usrgrpid_get_ws' ) 
			->will ( $this ->returnValue ( array ( 
				"usrgrpid" => 111 ) ) );
		$this->object ->getObjetUserGroupRef () 
			->expects ( $this ->any () ) 
			->method ( 'getUsrgrpId' ) 
			->will ( $this ->returnValue ( 111 ) );
		
		$this ->assertEquals ( array ( 
				"opmessage" => array ( 
						"default_msg" => 0, 
						"mediatypeid" => 1, 
						"message" => "message", 
						"subject" => "subject" ), 
				"opmessage_grp" => array ( 
						array ( 
								"usrgrpid" => 111 ) ) ), $this->object ->creer_definition_action_operation_message_ws () );
		
		$this->object ->setOpMessageGroup ( array () );
		$this->object ->setOpMessageUser ( array ( 
				"NOM1" ) );
		$this->object ->getObjetUserRef () 
			->expects ( $this ->any () ) 
			->method ( 'creer_definition_userid_get_ws' ) 
			->will ( $this ->returnValue ( array ( 
				"userpid" => 112 ) ) );
		
		$this ->assertEquals ( array ( 
				"opmessage" => array ( 
						"default_msg" => 0, 
						"mediatypeid" => 1, 
						"message" => "message", 
						"subject" => "subject" ), 
				"opmessage_usr" => array ( 
						array ( 
								"userpid" => 112 ) ) ), $this->object ->creer_definition_action_operation_message_ws () );
	}

	/**
	 * @covers zabbix_action_operation::retrouve_userId
	 */
	public function testRetrouve_userId_exception() {
		$zabbix_user = $this ->createMock ( "zabbix_user" );
		$zabbix_user ->expects ( $this ->any () ) 
			->method ( 'setAlias' ) 
			->will ( $this ->returnSelf () );
		$zabbix_user ->expects ( $this ->any () ) 
			->method ( 'recherche_userid_by_Alias' ) 
			->will ( $this ->returnSelf () );
		$zabbix_user ->expects ( $this ->any () ) 
			->method ( 'creer_definition_userid_get_ws' ) 
			->will ( $this ->returnValue ( array ( 
				"userid" => 112 ) ) );
		$zabbix_user ->expects ( $this ->any () ) 
			->method ( 'getUsrId' ) 
			->will ( $this ->returnValue ( "" ) );
		
		$this->object ->setObjetUserRef ( $zabbix_user );
		$this->object ->setOpMessageUser ( array ( 
				"NOM1" ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_action_operation) Aucun User avec le nom ' );
		$this->object ->retrouve_userId ();
	}

	/**
	 * @covers zabbix_action_operation::retrouve_userId
	 */
	public function testRetrouve_userId_valide() {
		$zabbix_user = $this ->createMock ( "zabbix_user" );
		$zabbix_user ->expects ( $this ->any () ) 
			->method ( 'setAlias' ) 
			->will ( $this ->returnSelf () );
		$zabbix_user ->expects ( $this ->any () ) 
			->method ( 'recherche_userid_by_Alias' ) 
			->will ( $this ->returnSelf () );
		$zabbix_user ->expects ( $this ->any () ) 
			->method ( 'creer_definition_userid_get_ws' ) 
			->will ( $this ->returnValue ( array ( 
				"userid" => 112 ) ) );
		$zabbix_user ->expects ( $this ->any () ) 
			->method ( 'getUsrId' ) 
			->will ( $this ->returnValue ( 112 ) );
		
		$this->object ->setObjetUserRef ( $zabbix_user );
		$this->object ->setOpMessageUser ( array ( 
				"NOM1" ) );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_userId () );
		$this ->assertEquals ( array ( 
				array ( 
						"userid" => 112 ) ), $this->object ->getOpMessageUser () );
	}

	/**
	 * @covers zabbix_action_operation::retrouve_usrgrpId
	 */
	public function testRetrouve_usrgrpId_exception() {
		$zabbix_usergroup = $this ->createMock ( "zabbix_usergroup" );
		$zabbix_usergroup ->expects ( $this ->any () ) 
			->method ( 'setName' ) 
			->will ( $this ->returnSelf () );
		$zabbix_usergroup ->expects ( $this ->any () ) 
			->method ( 'recherche_userGroupid_by_Name' ) 
			->will ( $this ->returnSelf () );
		$zabbix_usergroup ->expects ( $this ->any () ) 
			->method ( 'creer_definition_usrgrpid_get_ws' ) 
			->will ( $this ->returnValue ( array ( 
				"usrgrpid" => 111 ) ) );
		$zabbix_usergroup ->expects ( $this ->any () ) 
			->method ( 'getUsrgrpId' ) 
			->will ( $this ->returnValue ( "" ) );
		
		$this->object ->setObjetUserGroupRef ( $zabbix_usergroup );
		$this->object ->setOpMessageGroup ( array ( 
				"GROUP1" ) );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_action_operation) Aucun UserGroup avec le nom ' );
		$this->object ->retrouve_usrgrpId ();
	}

	/**
	 * @covers zabbix_action_operation::retrouve_usrgrpId
	 */
	public function testRetrouve_usrgrpId_valide() {
		$zabbix_usergroup = $this ->createMock ( "zabbix_usergroup" );
		$zabbix_usergroup ->expects ( $this ->any () ) 
			->method ( 'setName' ) 
			->will ( $this ->returnSelf () );
		$zabbix_usergroup ->expects ( $this ->any () ) 
			->method ( 'recherche_userGroupid_by_Name' ) 
			->will ( $this ->returnSelf () );
		$zabbix_usergroup ->expects ( $this ->any () ) 
			->method ( 'creer_definition_usrgrpid_get_ws' ) 
			->will ( $this ->returnValue ( array ( 
				"usrgrpid" => 111 ) ) );
		$zabbix_usergroup ->expects ( $this ->any () ) 
			->method ( 'getUsrgrpId' ) 
			->will ( $this ->returnValue ( 111 ) );
		
		$this->object ->setObjetUserGroupRef ( $zabbix_usergroup );
		$this->object ->setOpMessageGroup ( array ( 
				"GROUP1" ) );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_usrgrpId () );
		$this ->assertEquals ( array ( 
				array ( 
						"usrgrpid" => 111 ) ), $this->object ->getOpMessageGroup () );
	}

	/**
     * @covers zabbix_action_operation::retrouve_OperationType
     */
	public function testRetrouve_OperationType() {
		$this ->assertEquals ( 0, $this->object ->retrouve_OperationType ( "" ) );
		$this ->assertEquals ( 0, $this->object ->retrouve_OperationType ( "send message" ) );
		$this ->assertEquals ( 1, $this->object ->retrouve_OperationType ( "remote command" ) );
		$this ->assertEquals ( 2, $this->object ->retrouve_OperationType ( "add host" ) );
		$this ->assertEquals ( 3, $this->object ->retrouve_OperationType ( "remove host" ) );
		$this ->assertEquals ( 4, $this->object ->retrouve_OperationType ( "add to host group" ) );
		$this ->assertEquals ( 5, $this->object ->retrouve_OperationType ( "remove from host group" ) );
		$this ->assertEquals ( 6, $this->object ->retrouve_OperationType ( "link to template" ) );
		$this ->assertEquals ( 7, $this->object ->retrouve_OperationType ( "unlink from template" ) );
		$this ->assertEquals ( 8, $this->object ->retrouve_OperationType ( "enable host" ) );
		$this ->assertEquals ( 9, $this->object ->retrouve_OperationType ( "disable host" ) );
		$this ->assertEquals ( 10, $this->object ->retrouve_OperationType ( 10 ) );
	}

	/**
     * @covers zabbix_action_operation::retrouve_EvalType
     */
	public function testRetrouve_EvalType() {
		$this ->assertEquals ( 0, $this->object ->retrouve_EvalType ( "" ) );
		$this ->assertEquals ( 0, $this->object ->retrouve_EvalType ( "and/or" ) );
		$this ->assertEquals ( 1, $this->object ->retrouve_EvalType ( "and" ) );
		$this ->assertEquals ( 2, $this->object ->retrouve_EvalType ( "or" ) );
		$this ->assertEquals ( 10, $this->object ->retrouve_EvalType ( 10 ) );
	}
}
