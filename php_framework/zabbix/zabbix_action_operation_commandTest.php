<?php
namespace Zorille\framework;
use \Exception as Exception;
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-03-24 at 13:26:55.
 */
class zabbix_action_operation_commandTest extends MockedListeOptions {
	/**
     * @var zabbix_action_operation_command
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = new zabbix_action_operation_command ( false, "zabbix_action_operation_command" );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers Zorille\framework\zabbix_action_operation_command::retrouve_zabbix_param
     */
	public function testRetrouve_zabbix_param_Exception1() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( false ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_action_operation_command) Il manque le parametre : zabbix_action_operation_command_command' );
		$this->object ->retrouve_zabbix_param ();
	}

	/**
	 * @covers Zorille\framework\zabbix_action_operation_command::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param_Exception2() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( 100 ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_action_operation_command) Type inconnu : 100' );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
	}

	/**
	 * @covers Zorille\framework\zabbix_action_operation_command::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param_0() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( 0 ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
		$this ->assertEquals ( 0, $this->object ->getType () );
	}

	/**
	 * @covers Zorille\framework\zabbix_action_operation_command::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param_1() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( 1 ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
		$this ->assertEquals ( 1, $this->object ->getType () );
	}

	/**
	 * @covers Zorille\framework\zabbix_action_operation_command::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param_2() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( 2 ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
		$this ->assertEquals ( 2, $this->object ->getType () );
	}

	/**
	 * @covers Zorille\framework\zabbix_action_operation_command::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param_3() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( 3 ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
		$this ->assertEquals ( 3, $this->object ->getType () );
	}

	/**
	 * @covers Zorille\framework\zabbix_action_operation_command::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param_4() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( 4 ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
		$this ->assertEquals ( 4, $this->object ->getType () );
	}

	/**
     * @covers Zorille\framework\zabbix_action_operation_command::creer_definition_zabbix_operation_command_ws
     */
	public function testCreer_definition_zabbix_operation_command_ws_exception1() {
		$this->object ->setType ( 0 );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_action_operation_command) Il faut une commande pour continuer' );
		$this->object ->creer_definition_zabbix_operation_command_ws ();
	}

	/**
	 * @covers Zorille\framework\zabbix_action_operation_command::creer_definition_zabbix_operation_command_ws
	 */
	public function testCreer_definition_zabbix_operation_command_ws_exception2() {
		$this->object ->setCommand ( "COMMAND" );
		$this->object ->setExecuteOn ( "client" );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_action_operation_command) Type inconnu : 1001' );
		$this->object ->setType ( 1001 );
		$this->object ->creer_definition_zabbix_operation_command_ws ();
	}

	/**
	 * @covers Zorille\framework\zabbix_action_operation_command::creer_definition_zabbix_operation_command_ws
	 */
	public function testCreer_definition_zabbix_operation_command_ws_valide() {
		$this ->assertEquals ( array (), $this->object ->creer_definition_zabbix_operation_command_ws () );
		$this->object ->setType ( 0 );
		$this->object ->setCommand ( "COMMAND" );
		$this->object ->setExecuteOn ( "client" );
		$this ->assertEquals ( array ( 
				"type" => 0, 
				"command" => "COMMAND", 
				"execute_on" => 0 ), $this->object ->creer_definition_zabbix_operation_command_ws () );
		
		$this->object ->setType ( 1 );
		$this ->assertEquals ( array ( 
				"type" => 1, 
				"command" => "COMMAND" ), $this->object ->creer_definition_zabbix_operation_command_ws () );
		
		$this->object ->setType ( 2 );
		$this->object ->setAuthtype ( "password" );
		$this->object ->setPrivatekey ( "privkey" );
		$this->object ->setPublickey ( "pubkey" );
		$this->object ->setUsername ( "username" );
		$this->object ->setPassword ( "password" );
		$this->object ->setPort ( "22" );
		$this ->assertEquals ( array ( 
				"type" => 2, 
				"command" => "COMMAND", 
				"authtype" => 0, 
				"privatekey" => "privkey", 
				"publickey" => "pubkey", 
				"username" => "username", 
				"passwd" => "password", 
				"port" => "22" ), $this->object ->creer_definition_zabbix_operation_command_ws () );
		
		$this->object ->setType ( 3 );
		$this->object ->setUsername ( "username" );
		$this->object ->setPassword ( "password" );
		$this->object ->setPort ( "23" );
		$this->object ->setOperationId ( 10 );
		$this ->assertEquals ( array ( 
				"type" => 3, 
				"command" => "COMMAND", 
				"username" => "username", 
				"passwd" => "password", 
				"port" => "23", 
				"operationid" => 10 ), $this->object ->creer_definition_zabbix_operation_command_ws () );
		
		$this->object ->setType ( 4 );
		$this->object ->setScriptid ( "15" );
		$this ->assertEquals ( array ( 
				"type" => 4, 
				"command" => "COMMAND", 
				"scriptid" => "15", 
				"operationid" => 10 ), $this->object ->creer_definition_zabbix_operation_command_ws () );
	}

	/**
     * @covers Zorille\framework\zabbix_action_operation_command::retrouve_Type
     */
	public function testRetrouve_Type() {
		$this ->assertEquals ( 0, $this->object ->retrouve_Type ( "" ) );
		$this ->assertEquals ( 0, $this->object ->retrouve_Type ( "custom_script" ) );
		$this ->assertEquals ( 1, $this->object ->retrouve_Type ( "ipmi" ) );
		$this ->assertEquals ( 2, $this->object ->retrouve_Type ( "ssh" ) );
		$this ->assertEquals ( 3, $this->object ->retrouve_Type ( "telnet" ) );
		$this ->assertEquals ( 4, $this->object ->retrouve_Type ( "global_script" ) );
		$this ->assertEquals ( 10, $this->object ->retrouve_Type ( 10 ) );
	}

	/**
     * @covers Zorille\framework\zabbix_action_operation_command::retrouve_ExecuteOn
     */
	public function testRetrouve_ExecuteOn() {
		$this ->assertEquals ( 0, $this->object ->retrouve_ExecuteOn ( "" ) );
		$this ->assertEquals ( 0, $this->object ->retrouve_ExecuteOn ( "agent" ) );
		$this ->assertEquals ( 1, $this->object ->retrouve_ExecuteOn ( "server" ) );
		$this ->assertEquals ( 10, $this->object ->retrouve_ExecuteOn ( 10 ) );
	}

	/**
     * @covers Zorille\framework\zabbix_action_operation_command::retrouve_Authtype
     */
	public function testRetrouve_Authtype() {
		$this ->assertEquals ( 0, $this->object ->retrouve_Authtype ( "" ) );
		$this ->assertEquals ( 0, $this->object ->retrouve_Authtype ( "operation" ) );
		$this ->assertEquals ( 1, $this->object ->retrouve_Authtype ( "action" ) );
		$this ->assertEquals ( 10, $this->object ->retrouve_Authtype ( 10 ) );
	}
}
