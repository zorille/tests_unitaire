<?php
namespace Zorille\framework;
use \Exception as Exception;
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-03-24 at 08:44:01.
 */
class zabbix_action_conditionTest extends MockedListeOptions {
	/**
     * @var zabbix_action_condition
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = new zabbix_action_condition ( false, "zabbix_action_condition" );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers Zorille\framework\zabbix_action_condition::retrouve_zabbix_param
     */
	public function testRetrouve_zabbix_param_Exception() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( false ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_action_condition) Il manque le parametre : zabbix_action_condition_type' );
		$this->object ->retrouve_zabbix_param ( 0 );
	}

	/**
	 * @covers Zorille\framework\zabbix_action_condition::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param_ExceptionParam() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_action_condition) Parametre inutilisable : test|erreur' );
		$this->object ->retrouve_zabbix_param ( 0, "test|erreur" );
	}

	/**
	 * @covers Zorille\framework\zabbix_action_condition::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( "host" ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param ( 0 ) );
		$this ->assertEquals ( "1", $this->object ->getConditionType () );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param ( 0, "test|operator|valeur" ) );
		$this ->assertEquals ( "0", $this->object ->getConditionType () );
		$this ->assertEquals ( 0, $this->object ->getOperator () );
		$this ->assertEquals ( "valeur", $this->object ->getValue () );
	}

	/**
     * @covers Zorille\framework\zabbix_action_condition::creer_definition_action_condition_ws
     */
	public function testCreer_definition_action_condition_ws() {
		$this->object ->setConditionType ( "host", 0 );
		$this ->assertEquals ( array (), $this->object ->creer_definition_action_condition_ws () );
		$this->object ->setValue ( "hostname" );
		
		$this ->assertEquals ( array ( 
				"conditiontype" => 1, 
				"operator" => 0, 
				"value" => "hostname" ), $this->object ->creer_definition_action_condition_ws () );
		
		$this->object ->setActionId ( 10 );
		$this->object ->setConditionId ( 20 );
		$this ->assertEquals ( array ( 
				"conditiontype" => 1, 
				"operator" => 0, 
				"value" => "hostname", 
				"conditionid" => 20, 
				"actionid" => 10 ), $this->object ->creer_definition_action_condition_ws () );
	}

	/**
     * @covers Zorille\framework\zabbix_action_condition::retrouve_ConditionOperator
     */
	public function testRetrouve_ConditionOperator() {
		$this ->assertEquals ( 0, $this->object ->retrouve_ConditionOperator ( "" ) );
		$this ->assertEquals ( 0, $this->object ->retrouve_ConditionOperator ( "=" ) );
		$this ->assertEquals ( 1, $this->object ->retrouve_ConditionOperator ( "<>" ) );
		$this ->assertEquals ( 2, $this->object ->retrouve_ConditionOperator ( "like" ) );
		$this ->assertEquals ( 3, $this->object ->retrouve_ConditionOperator ( "not like" ) );
		$this ->assertEquals ( 4, $this->object ->retrouve_ConditionOperator ( "in" ) );
		$this ->assertEquals ( 5, $this->object ->retrouve_ConditionOperator ( ">=" ) );
		$this ->assertEquals ( 6, $this->object ->retrouve_ConditionOperator ( "<=" ) );
		$this ->assertEquals ( 7, $this->object ->retrouve_ConditionOperator ( "not in" ) );
		$this ->assertEquals ( 10, $this->object ->retrouve_ConditionOperator ( 10 ) );
	}

	/**
     * @covers Zorille\framework\zabbix_action_condition::retrouve_ConditionType
     */
	public function testRetrouve_ConditionType() {
		$this ->assertEquals ( 0, $this->object ->retrouve_ConditionType ( "", 6 ) );
		
		//event_source = trigger actions : 0
		$this ->assertEquals ( 0, $this->object ->retrouve_ConditionType ( "", 0 ) );
		$this ->assertEquals ( 0, $this->object ->retrouve_ConditionType ( "host group", 0 ) );
		$this ->assertEquals ( 1, $this->object ->retrouve_ConditionType ( "host", 0 ) );
		$this ->assertEquals ( 2, $this->object ->retrouve_ConditionType ( "trigger", 0 ) );
		$this ->assertEquals ( 3, $this->object ->retrouve_ConditionType ( "trigger name", 0 ) );
		$this ->assertEquals ( 4, $this->object ->retrouve_ConditionType ( "trigger severity", 0 ) );
		$this ->assertEquals ( 5, $this->object ->retrouve_ConditionType ( "trigger value", 0 ) );
		$this ->assertEquals ( 6, $this->object ->retrouve_ConditionType ( "time period", 0 ) );
		$this ->assertEquals ( 13, $this->object ->retrouve_ConditionType ( "host template", 0 ) );
		$this ->assertEquals ( 15, $this->object ->retrouve_ConditionType ( "application", 0 ) );
		$this ->assertEquals ( 16, $this->object ->retrouve_ConditionType ( "maintenance status", 0 ) );
		$this ->assertEquals ( 17, $this->object ->retrouve_ConditionType ( "node", 0 ) );
		
		//event_source = discovery actions : 1 ou 2
		$this ->assertEquals ( 7, $this->object ->retrouve_ConditionType ( "", 1 ) );
		$this ->assertEquals ( 7, $this->object ->retrouve_ConditionType ( "host IP", 1 ) );
		$this ->assertEquals ( 8, $this->object ->retrouve_ConditionType ( "discovered service type", 1 ) );
		$this ->assertEquals ( 9, $this->object ->retrouve_ConditionType ( "discovered service port", 1 ) );
		$this ->assertEquals ( 10, $this->object ->retrouve_ConditionType ( "discovery status", 1 ) );
		$this ->assertEquals ( 11, $this->object ->retrouve_ConditionType ( "uptime or downtime duration", 1 ) );
		$this ->assertEquals ( 12, $this->object ->retrouve_ConditionType ( "received value", 1 ) );
		$this ->assertEquals ( 18, $this->object ->retrouve_ConditionType ( "discovery rule", 1 ) );
		$this ->assertEquals ( 19, $this->object ->retrouve_ConditionType ( "discovery check", 1 ) );
		$this ->assertEquals ( 20, $this->object ->retrouve_ConditionType ( "proxy", 1 ) );
		$this ->assertEquals ( 21, $this->object ->retrouve_ConditionType ( "discovery object", 1 ) );
		$this ->assertEquals ( 7, $this->object ->retrouve_ConditionType ( "", 2 ) );
		$this ->assertEquals ( 7, $this->object ->retrouve_ConditionType ( "host IP", 2 ) );
		$this ->assertEquals ( 8, $this->object ->retrouve_ConditionType ( "discovered service type", 2 ) );
		$this ->assertEquals ( 9, $this->object ->retrouve_ConditionType ( "discovered service port", 2 ) );
		$this ->assertEquals ( 10, $this->object ->retrouve_ConditionType ( "discovery status", 2 ) );
		$this ->assertEquals ( 11, $this->object ->retrouve_ConditionType ( "uptime or downtime duration", 2 ) );
		$this ->assertEquals ( 12, $this->object ->retrouve_ConditionType ( "received value", 2 ) );
		$this ->assertEquals ( 18, $this->object ->retrouve_ConditionType ( "discovery rule", 2 ) );
		$this ->assertEquals ( 19, $this->object ->retrouve_ConditionType ( "discovery check", 2 ) );
		$this ->assertEquals ( 20, $this->object ->retrouve_ConditionType ( "proxy", 2 ) );
		$this ->assertEquals ( 21, $this->object ->retrouve_ConditionType ( "discovery object", 2 ) );
		
		//event_source = auto-registration actions : 3
		$this ->assertEquals ( 20, $this->object ->retrouve_ConditionType ( "", 3 ) );
		$this ->assertEquals ( 20, $this->object ->retrouve_ConditionType ( "proxy", 3 ) );
		$this ->assertEquals ( 22, $this->object ->retrouve_ConditionType ( "host name", 3 ) );
		$this ->assertEquals ( 24, $this->object ->retrouve_ConditionType ( "host metadata", 3 ) );
		
		//event_source = internal actions : 4 ou 5
		$this ->assertEquals ( 0, $this->object ->retrouve_ConditionType ( "", 4 ) );
		$this ->assertEquals ( 0, $this->object ->retrouve_ConditionType ( "host group", 4 ) );
		$this ->assertEquals ( 1, $this->object ->retrouve_ConditionType ( "host", 4 ) );
		$this ->assertEquals ( 13, $this->object ->retrouve_ConditionType ( "host template", 4 ) );
		$this ->assertEquals ( 15, $this->object ->retrouve_ConditionType ( "application", 4 ) );
		$this ->assertEquals ( 23, $this->object ->retrouve_ConditionType ( "event type", 4 ) );
		$this ->assertEquals ( 17, $this->object ->retrouve_ConditionType ( "node", 4 ) );
		$this ->assertEquals ( 0, $this->object ->retrouve_ConditionType ( "", 5 ) );
		$this ->assertEquals ( 0, $this->object ->retrouve_ConditionType ( "host group", 5 ) );
		$this ->assertEquals ( 1, $this->object ->retrouve_ConditionType ( "host", 5 ) );
		$this ->assertEquals ( 13, $this->object ->retrouve_ConditionType ( "host template", 5 ) );
		$this ->assertEquals ( 15, $this->object ->retrouve_ConditionType ( "application", 5 ) );
		$this ->assertEquals ( 23, $this->object ->retrouve_ConditionType ( "event type", 5 ) );
		$this ->assertEquals ( 17, $this->object ->retrouve_ConditionType ( "node", 5 ) );
		
		$this ->assertEquals ( 10, $this->object ->retrouve_ConditionType ( 10, 0 ) );
	}

	/**
	 * @covers Zorille\framework\zabbix_action_condition::retrouve_Value
	 */
	public function testRetrouve_Value() {
		$this->object ->setConditionType ( "trigger name", 0 );
		$this ->assertEquals ( "VAL1", $this->object ->retrouve_Value ( "VAL1" ) );
		$this->object ->setConditionType ( "trigger value", 0 );
		$this ->assertEquals ( 0, $this->object ->retrouve_Value ( "" ) );
		$this ->assertEquals ( 0, $this->object ->retrouve_Value ( "oK" ) );
		$this ->assertEquals ( 1, $this->object ->retrouve_Value ( "Problem" ) );
	}
}
