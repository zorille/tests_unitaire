<?php
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-25 at 16:53:15.
 */
class zabbix_host_interfacesTest extends MockedListeOptions {
	/**
     * @var zabbix_host_interfaces
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		
		$zabbix_wsclient = $this ->createMock ( "zabbix_wsclient" );
		$zabbix_interface_reference = $this ->createMock ( "zabbix_host_interface" );
		
		$this->object = new zabbix_host_interfaces ( false, "TESTS zabbix HOST_interfaces" );
		$this->object ->setListeOptions ( $this ->getListeOption () ) 
			->setObjetZabbixWsclient ( $zabbix_wsclient ) 
			->setObjetHostInterfaceRef ( $zabbix_interface_reference );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * @covers zabbix_host_interfaces::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param_Exception() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( false ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS zabbix HOST_interfaces) Il manque le parametre : zabbix_interfaces' );
		$this->object ->retrouve_zabbix_param ();
		
		$this ->assertEquals ( array (), $this->object ->getListeInterfaceCli () );
	}

	/**
	 * @covers zabbix_host_interfaces::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->onConsecutiveCalls ( 'val1', array ( 
				'val2' ) ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
	}

	/**
	 * @covers zabbix_host_interfaces::verifie_interface_existe
	 */
	public function testverifie_interface_existe_no_duplicate_interface() {
		$interface1 = $this ->createMock ( "zabbix_host_interface" );
		$interface1 ->expects ( $this ->any () ) 
			->method ( 'compare_interface' ) 
			->will ( $this ->returnValue ( false ) );
		$interface2 = $this ->createMock ( "zabbix_host_interface" );
		$interface2 ->expects ( $this ->any () ) 
			->method ( 'compare_interface' ) 
			->will ( $this ->returnValue ( false ) );
		$this->object ->setListeInterface ( array ( 
				$interface1, 
				$interface2 ) );
		
		$this ->assertFalse ( $this->object ->verifie_interface_existe ( $this->object ->getObjetHostInterfaceRef () ) );
	}

	/**
	 * @covers zabbix_host_interfaces::verifie_interface_existe
	 */
	public function testverifie_interface_existe_duplicate_interface() {
		$interface1 = $this ->createMock ( "zabbix_host_interface" );
		$interface1 ->expects ( $this ->any () ) 
			->method ( 'compare_interface' ) 
			->will ( $this ->returnValue ( true ) );
		$interface2 = $this ->createMock ( "zabbix_host_interface" );
		$interface2 ->expects ( $this ->any () ) 
			->method ( 'compare_interface' ) 
			->will ( $this ->returnValue ( false ) );
		$this->object ->setListeInterface ( array ( 
				$interface1, 
				$interface2 ) );
		
		$this ->assertSame ( $interface1, $this->object ->verifie_interface_existe ( $this->object ->getObjetHostInterfaceRef () ) );
	}

	/**
	 * @covers zabbix_host_interfaces::ajoute_interfaces_par_ligne
	 */
	public function testajoute_interfaces_par_ligne_Exception() {
		$this->object ->getObjetHostInterfaceRef () 
			->expects ( $this ->any () ) 
			->method ( 'retrouve_zabbix_param' ) 
			->will ( $this ->throwException ( new Exception ( '(TESTS zabbix_host_interface) Parametre inutilisable : val1' ) ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS zabbix_host_interface) Parametre inutilisable : val1' );
		$this->object ->ajoute_interfaces_par_ligne ( array ( 
				'val1' ) );
	}

	/**
	 * @covers zabbix_host_interfaces::ajoute_interfaces_par_ligne
	 */
	public function testajoute_interfaces_par_ligne_no_duplicate_interface() {
		$this->object ->getObjetHostInterfaceRef () 
			->expects ( $this ->any () ) 
			->method ( 'retrouve_zabbix_param' ) 
			->will ( $this ->returnValue ( true ) );
		
		$interface1 = $this ->createMock ( "zabbix_host_interface" );
		$interface1 ->expects ( $this ->any () ) 
			->method ( 'compare_interface' ) 
			->will ( $this ->returnValue ( false ) );
		$interface2 = $this ->createMock ( "zabbix_host_interface" );
		$interface2 ->expects ( $this ->any () ) 
			->method ( 'compare_interface' ) 
			->will ( $this ->returnValue ( false ) );
		$this->object ->setListeInterface ( array ( 
				$interface1, 
				$interface2 ) );
		
		$this ->assertSame ( $this->object, $this->object ->ajoute_interfaces_par_ligne ( array ( 
				'test1' ) ) );
		$this ->assertEquals ( array ( 
				$interface1, 
				$interface2, 
				$this->object ->getObjetHostInterfaceRef () ), $this->object ->getListeInterface () );
	}

	/**
	 * @covers zabbix_host_interfaces::ajoute_interfaces_par_ligne
	 */
	public function testajoute_interfaces_par_ligne_duplicate_interface() {
		$this->object ->getObjetHostInterfaceRef () 
			->expects ( $this ->any () ) 
			->method ( 'retrouve_zabbix_param' ) 
			->will ( $this ->returnValue ( true ) );
		
		$interface1 = $this ->createMock ( "zabbix_host_interface" );
		$interface1 ->expects ( $this ->any () ) 
			->method ( 'compare_interface' ) 
			->will ( $this ->returnValue ( false ) );
		$interface2 = $this ->createMock ( "zabbix_host_interface" );
		$interface2 ->expects ( $this ->any () ) 
			->method ( 'compare_interface' ) 
			->will ( $this ->returnValue ( true ) );
		$this->object ->setListeInterface ( array ( 
				$interface1, 
				$interface2 ) );
		
		$this ->assertSame ( $this->object, $this->object ->ajoute_interfaces_par_ligne ( array ( 
				'test1' ) ) );
		$this ->assertEquals ( array ( 
				$interface1, 
				$interface2 ), $this->object ->getListeInterface () );
	}

	/**
	 * @covers zabbix_host_interfaces::ajoute_interfaces
	 */
	public function testAjoute_interfaces_duplicate() {
		//["type"]["main"]["useip"]["ip"]["dns"]["port"]["interfaceid"]["hostid"]
		$interfaces_du_host_dans_zabbix = array ( 
				array ( 
						"type" => "agent", 
						"main" => "oui", 
						"useip" => "oui", 
						"ip" => "IP1", 
						"dns" => "FQDN1", 
						"port" => "Port1", 
						"interfaceid" => "IT1", 
						"hostid" => "H1" ) );
		
		$zabbix_interface_reference1 = $this ->createMock ( "zabbix_host_interface" );
		$zabbix_interface_reference1 ->expects ( $this ->any () ) 
			->method ( 'compare_interface' ) 
			->will ( $this ->returnValue ( false ) );
		
		$zabbix_interface_reference2 = $this ->createMock ( "zabbix_host_interface" );
		$zabbix_interface_reference2 ->expects ( $this ->any () ) 
			->method ( 'compare_interface' ) 
			->will ( $this ->returnValue ( true ) );
		
		$liste_interface = array ( 
				$zabbix_interface_reference1, 
				$zabbix_interface_reference2 );
		$this->object ->setListeInterface ( $liste_interface );
		
		$this ->assertSame ( $this->object, $this->object ->ajoute_interfaces ( $interfaces_du_host_dans_zabbix ) );
		$this ->assertEquals ( array ( 
				$zabbix_interface_reference1, 
				$zabbix_interface_reference2 ), $this->object ->getListeInterface () );
	}

	/**
	 * @covers zabbix_host_interfaces::ajoute_interfaces
	 */
	public function testAjoute_interfaces_no_duplicate() {
		//["type"]["main"]["useip"]["ip"]["dns"]["port"]["interfaceid"]["hostid"]
		$interfaces_du_host_dans_zabbix = array ( 
				array ( 
						"type" => "agent", 
						"main" => "oui", 
						"useip" => "oui", 
						"ip" => "IP1", 
						"dns" => "FQDN1", 
						"port" => "Port1", 
						"interfaceid" => "IT1", 
						"hostid" => "H1" ) );
		
		$zabbix_interface_reference1 = $this ->createMock ( "zabbix_host_interface" );
		$zabbix_interface_reference1 ->expects ( $this ->any () ) 
			->method ( 'compare_interface' ) 
			->will ( $this ->returnValue ( false ) );
		
		$zabbix_interface_reference2 = $this ->createMock ( "zabbix_host_interface" );
		$zabbix_interface_reference2 ->expects ( $this ->any () ) 
			->method ( 'compare_interface' ) 
			->will ( $this ->returnValue ( false ) );
		
		$liste_interface = array ( 
				$zabbix_interface_reference1, 
				$zabbix_interface_reference2 );
		$this->object ->setListeInterface ( $liste_interface );
		
		$this ->assertSame ( $this->object, $this->object ->ajoute_interfaces ( $interfaces_du_host_dans_zabbix ) );
		$this ->assertEquals ( array ( 
				$zabbix_interface_reference1, 
				$zabbix_interface_reference2, 
				$this->object ->getObjetHostInterfaceRef () ), $this->object ->getListeInterface () );
	}

	/**
	 * @covers zabbix_host_interfaces::supprime_interfaces
	 */
	public function testSupprime_interfaces_existe_dans_zabbix() {
		//["type"]["main"]["useip"]["ip"]["dns"]["port"]["interfaceid"]["hostid"]
		$interfaces_du_host_dans_zabbix = array ( 
				array ( 
						"type" => "agent", 
						"main" => "oui", 
						"useip" => "oui", 
						"ip" => "IP1", 
						"dns" => "FQDN1", 
						"port" => "Port1", 
						"interfaceid" => "IT1", 
						"hostid" => "H1" ), 
				array ( 
						"type" => "JMX", 
						"main" => "oui", 
						"useip" => "oui", 
						"ip" => "IP1", 
						"dns" => "FQDN2", 
						"port" => "Port2", 
						"interfaceid" => "IT2", 
						"hostid" => "H1" ) );
		
		$zabbix_interface_reference1 = $this ->createMock ( "zabbix_host_interface" );
		$zabbix_interface_reference1 ->expects ( $this ->any () ) 
			->method ( 'compare_interface' ) 
			->will ( $this ->onConsecutiveCalls ( false, true ) );
		
		$liste_interface = array ( 
				$zabbix_interface_reference1 );
		$this->object ->setListeInterface ( $liste_interface );
		
		$this ->assertSame ( $this->object, $this->object ->supprime_interfaces ( $interfaces_du_host_dans_zabbix ) );
		$this ->assertEquals ( array ( 
				$this->object ->getObjetHostInterfaceRef () ), $this->object ->getListeInterface () );
	}

	/**
	 * @covers zabbix_host_interfaces::supprime_interfaces
	 */
	public function testSupprime_interfaces_qui_n_existe_pas() {
		//["type"]["main"]["useip"]["ip"]["dns"]["port"]["interfaceid"]["hostid"]
		$interfaces_du_host_dans_zabbix = array ( 
				array ( 
						"type" => "agent", 
						"main" => "oui", 
						"useip" => "oui", 
						"ip" => "IP1", 
						"dns" => "FQDN1", 
						"port" => "Port1", 
						"interfaceid" => "IT1", 
						"hostid" => "H1" ), 
				array ( 
						"type" => "JMX", 
						"main" => "oui", 
						"useip" => "oui", 
						"ip" => "IP1", 
						"dns" => "FQDN2", 
						"port" => "Port2", 
						"interfaceid" => "IT2", 
						"hostid" => "H1" ) );
		
		$zabbix_interface_reference1 = $this ->createMock ( "zabbix_host_interface" );
		$zabbix_interface_reference1 ->expects ( $this ->any () ) 
			->method ( 'compare_interface' ) 
			->will ( $this ->returnValue ( false ) );
		
		$liste_interface = array ( 
				$zabbix_interface_reference1 );
		$this->object ->setListeInterface ( $liste_interface );
		
		$this ->assertSame ( $this->object, $this->object ->supprime_interfaces ( $interfaces_du_host_dans_zabbix ) );
		$this ->assertEquals ( array ( 
				$this->object ->getObjetHostInterfaceRef (), 
				$this->object ->getObjetHostInterfaceRef () ), $this->object ->getListeInterface () );
	}

	/**
     * @covers zabbix_host_interfaces::creer_definition_host_interfaces_ws
     */
	public function testCreer_definition_host_interfaces_ws() {
		$zabbix_interface_reference1 = $this ->createMock ( "zabbix_host_interface" );
		$zabbix_interface_reference1 ->expects ( $this ->any () ) 
			->method ( 'creer_definition_host_interface_ws' ) 
			->will ( $this ->returnValue ( array ( 
				"type" => 1, 
				"main" => 1, 
				"useip" => 0, 
				"ip" => "IP1", 
				"dns" => "FQDN1", 
				"port" => "Port1" ) ) );
		
		$zabbix_interface_reference2 = $this ->createMock ( "zabbix_host_interface" );
		$zabbix_interface_reference2 ->expects ( $this ->any () ) 
			->method ( 'creer_definition_host_interface_ws' ) 
			->will ( $this ->returnValue ( array ( 
				"type" => 2, 
				"main" => 0, 
				"useip" => 0, 
				"ip" => "IP1", 
				"dns" => "FQDN1", 
				"port" => "Port2" ) ) );
		
		$liste_interface = array ( 
				$zabbix_interface_reference1, 
				$zabbix_interface_reference2 );
		$this->object ->setListeInterface ( $liste_interface );
		
		$this ->assertEquals ( 
				array ( 
							array ( 
									"type" => 1, 
									"main" => 1, 
									"useip" => 0, 
									"ip" => "IP1", 
									"dns" => "FQDN1", 
									"port" => "Port1" ), 
							array ( 
									"type" => 2, 
									"main" => 0, 
									"useip" => 0, 
									"ip" => "IP1", 
									"dns" => "FQDN1", 
									"port" => "Port2" ) ), 
					$this->object ->creer_definition_host_interfaces_ws () );
	}
}
