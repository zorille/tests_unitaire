<?php
namespace Zorille\framework;
use \Exception as Exception;
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-03-20 at 10:12:22.
 */
class zabbix_valuemappingTest extends MockedListeOptions {
	/**
     * @var zabbix_valuemapping
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$zabbix_wsclient = $this ->createMock('Zorille\framework\zabbix_wsclient' );
		$zabbix_mappings = $this ->createMock('Zorille\framework\zabbix_mappings' );
		
		$this->object = new zabbix_valuemapping ( false, "zabbix_valuemapping" );
		$this->object ->setObjetZabbixWsclient ( $zabbix_wsclient ) 
			->setObjetMappings ( $zabbix_mappings );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers Zorille\framework\zabbix_valuemapping::retrouve_zabbix_param
     */
	public function testRetrouve_zabbix_param_Exception() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( false ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_valuemapping) Il manque le parametre : zabbix_valuemapping_nom' );
		$this->object ->retrouve_zabbix_param ();
	}

	/**
	 * @covers Zorille\framework\zabbix_valuemapping::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( "NAME1" ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
		$this ->assertEquals ( "NAME1", $this->object ->getName () );
	}

	/**
     * @covers Zorille\framework\zabbix_valuemapping::creer_definition_valuemapping_create_ws
     */
	public function testCreer_definition_valuemapping_create_ws() {
		$this->object ->setName ( "Name1" );
		$this->object ->getObjetMappings () 
			->expects ( $this ->any () ) 
			->method ( 'creer_definition_mappings_create_ws' ) 
			->will ( $this ->returnValue ( array () ) );
		$this ->assertEquals ( array ( 
				'name' => 'Name1', 
				'mappings' => Array () ), $this->object ->creer_definition_valuemapping_create_ws () );
	}

	/**
     * @covers Zorille\framework\zabbix_valuemapping::creer_valuemapping
     */
	public function testCreer_valuemapping() {
		$this->object ->setName ( "Name1" );
		$this->object ->getObjetMappings () 
			->expects ( $this ->any () ) 
			->method ( 'creer_definition_mappings_create_ws' ) 
			->will ( $this ->returnValue ( array () ) );
		
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'valuemappingCreate' ) 
			->will ( $this ->returnValue ( array ( 
				"valuemapid" => array ( 
						10 ) ) ) );
		
		$this ->assertEquals ( array ( 
				"valuemapid" => array ( 
						10 ) ), $this->object ->creer_valuemapping () );
	}

	/**
     * @covers Zorille\framework\zabbix_valuemapping::creer_definition_valuemapping_delete_ws
     */
	public function testCreer_definition_valuemapping_delete_ws() {
		$this ->assertEquals ( array (), $this->object ->creer_definition_valuemapping_delete_ws () );
		$this->object ->setValueMapId ( 10 );
		$this ->assertEquals ( array ( 
				10 ), $this->object ->creer_definition_valuemapping_delete_ws () );
	}

	/**
     * @covers Zorille\framework\zabbix_valuemapping::supprime_valuemapping
     */
	public function testSupprime_valuemapping() {
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'valuemappingDelete' ) 
			->will ( $this ->returnValue ( array ( 
				"valuemapids" => array ( 
						10 ) ) ) );
		
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'valuemappingGet' ) 
			->will ( $this ->onConsecutiveCalls ( array (), array ( 
				"valuemapids" => array ( 
						"valuemapid" => 10 ) ) ) );
		
		$this ->assertEquals ( array (), $this->object ->supprime_valuemapping () );
		$this ->assertEquals ( array ( 
				"valuemapids" => array ( 
						10 ) ), $this->object ->supprime_valuemapping () );
	}

	/**
     * @covers Zorille\framework\zabbix_valuemapping::creer_definition_valuemapping_get_ws
     */
	public function testCreer_definition_valuemapping_get_ws_without_mapping() {
		$this->object ->setName ( "Name1" );
		$this ->assertEquals ( array ( 
				"output" => "valuemapid", 
				"filter" => array ( 
						"name" => "Name1" ) ), $this->object ->creer_definition_valuemapping_get_ws ( false ) );
	}

	/**
	 * @covers Zorille\framework\zabbix_valuemapping::creer_definition_valuemapping_get_ws
	 */
	public function testCreer_definition_valuemapping_get_ws_with_mapping() {
		$this->object ->setName ( "Name1" );
		$this ->assertEquals ( array ( 
				"output" => "valuemapid", 
				"filter" => array ( 
						"name" => "Name1" ), 
				'with_mappings' => true ), $this->object ->creer_definition_valuemapping_get_ws ( true ) );
	}

	/**
	 * @covers Zorille\framework\zabbix_valuemapping::creer_definition_valuemapping_get_ws
	 */
	public function testCreer_definition_valuemapping_get_ws_extend() {
		$this->object ->setName ( "Name2" );
		$this ->assertEquals ( array ( 
				"output" => "extend", 
				"filter" => array ( 
						"name" => "Name2" ), 
				'with_mappings' => true ), $this->object ->creer_definition_valuemapping_get_ws ( true, "extend" ) );
	}

	/**
     * @covers Zorille\framework\zabbix_valuemapping::recherche_valuemapping
     */
	public function testRecherche_valuemapping() {
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'valuemappingGet' ) 
			->will ( $this ->returnValue ( array ( 
				"valuemapids" => array ( 
						"valuemapid" => 10 ) ) ) );
		
		$this ->assertEquals ( array ( 
				"valuemapids" => array ( 
						"valuemapid" => 10 ) ), $this->object ->recherche_valuemapping () );
	}

	/**
	 * @covers Zorille\framework\zabbix_valuemapping::recherche_valuemappingid_by_Name
	 */
	public function testRecherche_valuemappingid_by_Name() {
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'valuemappingGet' ) 
			->will ( $this ->returnValue ( array ( 
				"valuemapids" => array ( 
						"valuemapid" => 10 ) ) ) );
		
		$this ->assertSame ( $this->object, $this->object ->recherche_valuemappingid_by_Name () );
		$this ->assertEquals ( 10, $this->object ->getValueMapId () );
	}
}
