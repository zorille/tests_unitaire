<?php
namespace Zorille\framework;
use \Exception as Exception;
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-25 at 16:53:15.
 */
class zabbix_wsclientTest extends MockedListeOptions {
	/**
     * @var zabbix_wsclient
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		
		$utilisateurs = $this ->createMock('Zorille\framework\utilisateurs' );
		$gestion_connexion_url = $this ->createMock('Zorille\framework\gestion_connexion_url' );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getObjetUtilisateurs' ) 
			->will ( $this ->returnValue ( $utilisateurs ) );
		$zabbix_datas = $this ->createMock('Zorille\framework\zabbix_datas' );
		$curl = $this ->createMock('Zorille\framework\curl' );
		$curl ->expects ( $this ->any () )
		->method ( 'setUserPasswd', 'setHttpHAuth' )
		->will ( $this ->returnSelf () );
		$this->object = new zabbix_wsclient ( false, "zabbix_wsclient" );
		$this->object ->setListeOptions ( $this ->getListeOption () ) 
			->setGestionConnexionUrl ( $gestion_connexion_url ) 
			->setObjetZabbixDatas ( $zabbix_datas ) 
			->setObjetCurl ( $curl );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers Zorille\framework\zabbix_wsclient::prepare_connexion
     */
	public function testPrepare_connexion_exception1() {
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'retrouve_connexion_params', 'prepare_prepend_url' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'getPrependUrl' ) 
			->will ( $this ->returnValue ( "http://localhost:80" ) );
		$this->object ->getObjetZabbixDatas () 
			->method ( 'valide_presence_zabbix_data' ) 
			->will ( $this ->returnValue ( false ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_wsclient) Aucune definition de zabbix pour NOM1' );
		$this->object ->prepare_connexion ( "NOM1" );
	}

	/**
	 * @covers Zorille\framework\zabbix_wsclient::prepare_connexion
	 */
	public function testPrepare_connexion_exception2() {
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'retrouve_connexion_params', 'prepare_prepend_url' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'getPrependUrl' ) 
			->will ( $this ->returnValue ( "http://localhost:80" ) );
		$this->object ->getObjetZabbixDatas () 
			->method ( 'valide_presence_zabbix_data' ) 
			->will ( $this ->returnValue ( array () ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_wsclient) Il faut un username dans la liste des parametres zabbix' );
		$this->object ->prepare_connexion ( "NOM1" );
	}

	/**
	 * @covers Zorille\framework\zabbix_wsclient::prepare_connexion
	 */
	public function testPrepare_connexion_exception3() {
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'retrouve_connexion_params', 'prepare_prepend_url' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'getPrependUrl' ) 
			->will ( $this ->returnValue ( "http://localhost:80" ) );
		$this->object ->getObjetZabbixDatas () 
			->method ( 'valide_presence_zabbix_data' ) 
			->will ( $this ->returnValue ( array ( 
				"username" => "user" ) ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_wsclient) Il faut un password dans la liste des parametres zabbix' );
		$this->object ->prepare_connexion ( "NOM1" );
	}

	/**
	 * @covers Zorille\framework\zabbix_wsclient::prepare_connexion
	 */
	public function testPrepare_connexion_exception4() {
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'retrouve_connexion_params', 'prepare_prepend_url' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'getPrependUrl' ) 
			->will ( $this ->returnValue ( "http://localhost:80" ) );
		$this->object ->getObjetZabbixDatas () 
			->method ( 'valide_presence_zabbix_data' ) 
			->will ( $this ->returnValue ( array ( 
				"username" => "user", 
				"password" => "pwd" ) ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_wsclient) Il faut une url dans la liste des parametres zabbix' );
		$this->object ->prepare_connexion ( "NOM1" );
	}

	/**
	 * @covers Zorille\framework\zabbix_wsclient::prepare_connexion
	 */
	public function testPrepare_connexion_valide() {
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'retrouve_connexion_params', 'prepare_prepend_url' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'getPrependUrl' ) 
			->will ( $this ->returnValue ( "http://localhost:80" ) );
		$this->object ->getObjetZabbixDatas () 
			->method ( 'valide_presence_zabbix_data' ) 
			->will ( $this ->returnValue ( array ( 
				"username" => "user", 
				"password" => "pwd", 
				"url" => "localhost" ) ) );
		
		$this ->assertSame ( $this->object, $this->object ->prepare_connexion ( "NOM1" ) );
	}

	/**
	 * @covers Zorille\framework\zabbix_wsclient::encode_json
	 */
	public function testencode_json_vide() {
		$this ->assertContains ( '{"jsonrpc":"2.0","method":"action.get","params":[],"id":', $this->object ->encode_json ( "action.get", "", false ) );
	}

	/**
	 * @covers Zorille\framework\zabbix_wsclient::encode_json
	 */
	public function testencode_json_auth() {
		$this ->assertContains ( '{"jsonrpc":"2.0","method":"action.get","params":["params"],"id":"', $this->object ->encode_json ( "action.get", "params", true ) );
		$this ->assertContains ( '","auth":""}', $this->object ->encode_json ( "action.get", "params", true ) );
	}

	/**
	 * @covers Zorille\framework\zabbix_wsclient::prepare_requete_json
	 */
	public function testprepare_requete_json_exception() {
		$this->object ->getObjetCurl () 
			->method ( 'send_curl' ) 
			->will ( $this ->throwException ( new Exception ( '(zabbix_wsclient) error 404' ) ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_wsclient) Requete  en erreur' );
		$this->object ->prepare_requete_json ( "action.get" );
	}

	/**
	 * @covers Zorille\framework\zabbix_wsclient::prepare_requete_json
	 */
	public function testprepare_requete_json_dry_run() {
		$this->object ->getListeOptions () 
			->method ( 'verifie_option_existe' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->assertSame ( '', $this->object ->prepare_requete_json ( "action.create" ) );
	}

	/**
	 * @covers Zorille\framework\zabbix_wsclient::prepare_requete_json
	 */
	public function testprepare_requete_json_valide1() {
		$this ->assertSame ( '', $this->object ->prepare_requete_json ( "action.get" ) );
	}

	/**
	 * @covers Zorille\framework\zabbix_wsclient::prepare_requete_json
	 */
	public function testprepare_requete_json_valide2() {
		$retour_json = '{"result":{"response":"TEST2","traitement":"T2"}}';
		$this->object ->getObjetCurl () 
			->method ( 'send_curl' ) 
			->will ( $this ->returnValue ( $retour_json ) );
		$this ->assertSame ( array ( 
				'response' => 'TEST2', 
				'traitement' => 'T2' ), $this->object ->prepare_requete_json ( "action.get" ) );
	}

	/**
	 * @covers Zorille\framework\zabbix_wsclient::gestion_retour
	 */
	public function testgestion_retour_exception() {
		$retour = array ( 
				"error" => array ( 
						"message" => "TEST2", 
						"data" => "T2", 
						"code" => "155" ) );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_wsclient) TEST2 : T2' );
		$this ->assertSame ( '', $this->object ->gestion_retour ( $retour, array () ) );
	}

	/**
	 * @covers Zorille\framework\zabbix_wsclient::gestion_retour
	 */
	public function testgestion_retour_valide() {
		$retour = array ( 
				"result" => array ( 
						"response" => "TEST2", 
						"traitement" => "T2" ) );
		$this ->assertSame ( array ( 
				'response' => 'TEST2', 
				'traitement' => 'T2' ), $this->object ->gestion_retour ( $retour, array () ) );
	}

	/**
	 * @covers Zorille\framework\zabbix_wsclient::gestion_retour
	 */
	public function testgestion_retour_valide2() {
		$retour = 'string';
		$this ->assertSame ( '', $this->object ->gestion_retour ( $retour, array () ) );
	}
}
