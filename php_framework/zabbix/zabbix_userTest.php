<?php
namespace Zorille\framework;
use \Exception as Exception;
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-03-20 at 10:22:19.
 */
class zabbix_userTest extends MockedListeOptions {
	/**
     * @var zabbix_user
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$zabbix_wsclient = $this ->createMock('Zorille\framework\zabbix_wsclient' );
		$zabbix_usergroups = $this ->createMock('Zorille\framework\zabbix_usergroups' );
		$zabbix_usermedia = $this ->createMock('Zorille\framework\zabbix_usermedia' );
		
		$this->object = new zabbix_user ( false, "zabbix_user" );
		$this->object ->setObjetZabbixWsclient ( $zabbix_wsclient ) 
			->setObjetListeUserGroups ( $zabbix_usergroups ) 
			->setObjetListeMedia ( $zabbix_usermedia );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers Zorille\framework\zabbix_user::retrouve_zabbix_param
     */
	public function testRetrouve_zabbix_param_Exception() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( false ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_user) Il manque le parametre : zabbix_user_username' );
		$this->object ->retrouve_zabbix_param ();
	}

	/**
	 * @covers Zorille\framework\zabbix_user::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->onConsecutiveCalls ( 'val1', 'disabled', 'system', 'enabled' ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
	}

	/**
     * @covers Zorille\framework\zabbix_user::creer_definition_user_create_ws
     */
	public function testCreer_definition_user_create_ws() {
		$this->object ->setAlias ( "ALIAS1" );
		
		$this->object ->getObjetListeUserGroups () 
			->expects ( $this ->any () ) 
			->method ( 'creer_definition_usergroupsids_ws' ) 
			->will ( $this ->returnValue ( array () ) );
		$this->object ->getObjetListeMedia () 
			->expects ( $this ->any () ) 
			->method ( 'creer_definition_usermedia_create_ws' ) 
			->will ( $this ->returnValue ( array () ) );
		
		$this ->assertEquals ( 
				array ( 
							"alias" => "ALIAS1", 
							"name" => "", 
							"autologin" => 0, 
							"autologout" => 900, 
							"lang" => "en_GB", 
							"refresh" => 30, 
							"rows_per_page" => 50, 
							"surname" => "", 
							"theme" => "default", 
							"type" => '1', 
							"url" => "", 
							"passwd" => "", 
							"usrgrps" => array (), 
							"user_medias" => array ( 
									array () ) ), 
					$this->object ->creer_definition_user_create_ws () );
	}

	/**
     * @covers Zorille\framework\zabbix_user::creer_user
     */
	public function testCreer_user() {
		$this->object ->setAlias ( "ALIAS1" );
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'userCreate' ) 
			->will ( $this ->returnValue ( array ( 
				"usrids" => array ( 
						10 ) ) ) );
		
		$this ->assertEquals ( array ( 
				"usrids" => array ( 
						10 ) ), $this->object ->creer_user () );
	}

	/**
     * @covers Zorille\framework\zabbix_user::creer_definition_user_delete_ws
     */
	public function testCreer_definition_user_delete_ws() {
		$this ->assertEquals ( array (), $this->object ->creer_definition_user_delete_ws () );
		$this->object ->setUsrId ( 10 );
		$this ->assertEquals ( array ( 
				10 ), $this->object ->creer_definition_user_delete_ws () );
	}

	/**
     * @covers Zorille\framework\zabbix_user::supprime_user
     */
	public function testSupprime_user() {
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'userDelete' ) 
			->will ( $this ->returnValue ( array ( 
				"usrids" => array ( 
						10 ) ) ) );
		
		$this ->assertEquals ( array ( 
				"usrids" => array ( 
						10 ) ), $this->object ->supprime_user () );
	}

	/**
     * @covers Zorille\framework\zabbix_user::creer_definition_user_get_ws
     */
	public function testCreer_definition_user_get_ws() {
		$this->object ->setAlias ( "ALIAS1" );
		$this->object ->setName ( "NAME1" );
		
		$this ->assertEquals ( array ( 
				"output" => "userid", 
				"filter" => array ( 
						"alias" => "ALIAS1", 
						"name" => "NAME1" ) ), $this->object ->creer_definition_user_get_ws () );
	}

	/**
     * @covers Zorille\framework\zabbix_user::recherche_user
     */
	public function testRecherche_user() {
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'userGet' ) 
			->will ( $this ->returnValue ( array ( 
				array ( 
						"userid" => "7" ) ) ) );
		
		$this ->assertEquals ( array ( 
				array ( 
						"userid" => "7" ) ), $this->object ->recherche_user () );
	}

	/**
     * @covers Zorille\framework\zabbix_user::creer_definition_userByAlias_get_ws
     */
	public function testCreer_definition_userByAlias_get_ws() {
		$this->object ->setAlias ( "ALIAS1" );
		
		$this ->assertEquals ( array ( 
				"output" => "userid", 
				"filter" => array ( 
						"alias" => "ALIAS1" ) ), $this->object ->creer_definition_userByAlias_get_ws () );
	}

	/**
	 * @covers Zorille\framework\zabbix_user::creer_definition_userid_get_ws
	 */
	public function testCreer_definition_userid_get_ws() {
		$this->object ->setUsrId ( 10 );
		$this ->assertEquals ( array ( 
				"userid" => "10" ), $this->object ->creer_definition_userid_get_ws () );
	}

	/**
     * @covers Zorille\framework\zabbix_user::recherche_userid_by_Alias
     */
	public function testRecherche_userid_by_Alias() {
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'userGet' ) 
			->will ( $this ->returnValue ( array ( 
				array ( 
						"userid" => "7" ) ) ) );
		
		$this ->assertSame ( $this->object, $this->object ->recherche_userid_by_Alias () );
		$this ->assertEquals ( "7", $this->object ->getUsrId () );
	}

	/**
     * @covers Zorille\framework\zabbix_user::retrouve_Autologin
     */
	public function testRetrouve_Autologin() {
		$this ->assertEquals ( 0, $this->object ->retrouve_Autologin ( "" ) );
		$this ->assertEquals ( 0, $this->object ->retrouve_Autologin ( "disabled" ) );
		$this ->assertEquals ( 1, $this->object ->retrouve_Autologin ( "enabled" ) );
		$this ->assertEquals ( 10, $this->object ->retrouve_Autologin ( 10 ) );
	}

	/**
     * @covers Zorille\framework\zabbix_user::retrouve_Type
     */
	public function testRetrouve_Type() {
		$this ->assertEquals ( 1, $this->object ->retrouve_Type ( "" ) );
		$this ->assertEquals ( 1, $this->object ->retrouve_Type ( "zabbix user" ) );
		$this ->assertEquals ( 2, $this->object ->retrouve_Type ( "zabbix admin" ) );
		$this ->assertEquals ( 3, $this->object ->retrouve_Type ( "zabbix super admin" ) );
		$this ->assertEquals ( 10, $this->object ->retrouve_Type ( 10 ) );
	}
}
