<?php
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-25 at 16:53:15.
 */
class zabbix_hostTest extends MockedListeOptions {
	/**
     * @var zabbix_host
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		
		$HostInterfaces = $this ->createMock ( "zabbix_host_interfaces" );
		$HostTemplates = $this ->createMock ( "zabbix_templates" );
		$HostGroups = $this ->createMock ( "zabbix_hostgroups" );
		$zabbix_wsclient = $this ->createMock ( "zabbix_wsclient" );
		
		$this->object = new zabbix_host ( false, "TESTS zabbix HOST" );
		$this->object ->setListeOptions ( $this ->getListeOption () ) 
			->setObjetInterfaces ( $HostInterfaces ) 
			->setObjetTemplates ( $HostTemplates ) 
			->setObjetGroups ( $HostGroups ) 
			->setObjetZabbixWsclient ( $zabbix_wsclient );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * @covers zabbix_host::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param_Exception() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( false ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS zabbix HOST) Il manque le parametre : zabbix_host_host' );
		$this->object ->retrouve_zabbix_param ();
		$this ->assertEquals ( "", $this->object ->getHost () );
	}

	/**
	 * @covers zabbix_host::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( 'val1' ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
		$this ->assertEquals ( "val1", $this->object ->getHost () );
	}

	/**
     * @covers zabbix_host::creer_definition_host_ws
     */
	public function testCreer_definition_host_ws() {
		$this->object ->setHost ( "CI1" );
		$liste_groups_final = array ( 
				"NOM1" );
		$liste_templates_final = array ( 
				"NOM1" );
		$this->object ->getObjetTemplates () 
			->expects ( $this ->any () ) 
			->method ( 'creer_definition_templatesids_ws' ) 
			->will ( $this ->returnValue ( array ( 
				1 ) ) );
		$this->object ->getObjetGroups () 
			->expects ( $this ->any () ) 
			->method ( 'creer_definition_groupsids_ws' ) 
			->will ( $this ->returnValue ( array ( 
				1 ) ) );
		$this->object ->getObjetInterfaces () 
			->expects ( $this ->any () ) 
			->method ( 'creer_definition_host_interfaces_ws' ) 
			->will ( $this ->returnValue ( array ( 
				1 ) ) );
		
		$this ->assertEquals ( array ( 
				"host" => "CI1", 
				'status' => 0, 
				"interfaces" => array ( 
						1 ), 
				"groups" => array ( 
						1 ), 
				"templates" => array ( 
						1 ), 
				"inventory" => array () ), $this->object ->creer_definition_host_ws ( $liste_templates_final, $liste_groups_final ) );
		
		$this->object ->setProxyId ( 1000 );
		$this ->assertEquals ( array ( 
				"host" => "CI1", 
				'status' => 0, 
				'proxy_hostid' => 1000, 
				"interfaces" => array ( 
						1 ), 
				"groups" => array ( 
						1 ), 
				"templates" => array ( 
						1 ), 
				"inventory" => array () ), $this->object ->creer_definition_host_ws ( $liste_templates_final, $liste_groups_final ) );
	}

	/**
	 * @covers zabbix_host::creer_host
	 */
	public function testCreer_host() {
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'hostCreate' ) 
			->will ( $this ->returnValue ( array ( 
				"hostids" => array ( 
						1 ) ) ) );
		$this->object ->setHost ( "CI1" );
		$liste_groups_final = array ( 
				"NOM1" );
		$liste_templates_final = array ( 
				"NOM1" );
		$this->object ->getObjetTemplates () 
			->expects ( $this ->at ( 0 ) ) 
			->method ( 'creer_definition_templatesids_ws' ) 
			->will ( $this ->returnValue ( array ( 
				1 ) ) );
		$this->object ->getObjetGroups () 
			->expects ( $this ->at ( 0 ) ) 
			->method ( 'creer_definition_groupsids_ws' ) 
			->will ( $this ->returnValue ( array ( 
				1 ) ) );
		$this->object ->getObjetInterfaces () 
			->expects ( $this ->at ( 0 ) ) 
			->method ( 'creer_definition_host_interfaces_ws' ) 
			->will ( $this ->returnValue ( array ( 
				1 ) ) );
		
		$this ->assertEquals ( array ( 
				"hostids" => array ( 
						1 ) ), $this->object ->creer_host () );
	}

	/**
	 * @covers zabbix_host::compare_host
	 */
	public function testCompare_host() {
		$this->object ->setHost ( "NAME1" );
		$objet_test = clone $this->object;
		$this ->assertTrue ( $this->object ->compare_host ( $objet_test ) );
		$this->object ->setHostId ( 10 );
		$this ->assertTrue ( $this->object ->compare_host ( $objet_test ) );
		$objet_test ->setHostId ( 11 );
		$this ->assertFalse ( $this->object ->compare_host ( $objet_test ) );
		$objet_test ->setHostId ( 10 );
		$objet_test ->setHost ( "NAME2" );
		$this ->assertFalse ( $this->object ->compare_host ( $objet_test ) );
	}

	/**
	 * @covers zabbix_host::creer_definition_host_delete_ws
	 */
	public function testCreer_definition_host_delete_ws() {
		$this ->assertEquals ( array (), $this->object ->creer_definition_host_delete_ws () );
		$this->object ->setHostId ( 10 );
		$this ->assertEquals ( array ( 
				10 ), $this->object ->creer_definition_host_delete_ws () );
	}

	/**
	 * @covers zabbix_host::supprime_host
	 */
	public function testSupprime_host() {
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'hostDelete' ) 
			->will ( $this ->returnValue ( array ( 
				"hostids" => array ( 
						10 ) ) ) );
		$this ->assertEquals ( array (), $this->object ->supprime_host () );
		
		$this->object ->setHostId ( 10 );
		$this ->assertEquals ( array ( 
				"hostids" => array ( 
						10 ) ), $this->object ->supprime_host () );
	}

	/**
	 * @covers zabbix_host::creer_definition_hostByName_get_ws
	 */
	public function testCreer_definition_hostByName_get_ws() {
		$this->object ->setHost ( "TEST" );
		$this ->assertEquals ( array ( 
				"output" => "hostid", 
				"filter" => array ( 
						"host" => "TEST" ) ), $this->object ->creer_definition_hostByName_get_ws () );
	}

	/**
	 * @covers zabbix_host::recherche_hostid_by_Name
	 */
	public function testRecherche_hostid_by_Name() {
		$this->object ->setHost ( "TEST" );
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'hostGet' ) 
			->will ( $this ->returnValue ( array ( 
				0 => array ( 
						"hostid" => 10 ) ) ) );
		$this ->assertSame ( $this->object, $this->object ->recherche_hostid_by_Name () );
	}

	/**
	 * @covers zabbix_host::creer_definition_hostNameByHostId_get_ws
	 */
	public function testcreer_definition_hostNameByHostId_get_ws() {
		$this->object ->setHostId ( 1000 );
		$this ->assertEquals ( array ( 
				"output" => array ( 
						"hostid", 
						"host" ), 
				"filter" => array ( 
						"hostid" => 1000 ) ), $this->object ->creer_definition_hostNameByHostId_get_ws () );
	}

	/**
	 * @covers zabbix_host::recherche_Name_by_hostid
	 */
	public function testrecherche_Name_by_hostid() {
		$this->object ->setHostId ( 1001 );
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'hostGet' ) 
			->will ( $this ->returnValue ( array ( 
				0 => array ( 
						"host" => "NAME1" ) ) ) );
		$this ->assertSame ( $this->object, $this->object ->recherche_Name_by_hostid () );
		$this ->assertEquals ( "NAME1", $this->object ->getHost () );
	}

	/**
	 * @covers zabbix_host::valide_hostid_present
	 */
	public function testvalide_hostid_present_exception() {
		$this->object ->setHost ( "MACHINE1" ) 
			->setHostId ( "" );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS zabbix HOST) Il faut un host valide : MACHINE1' );
		$this->object ->valide_hostid_present ();
	}

	/**
	 * @covers zabbix_host::valide_hostid_present
	 */
	public function testvalide_hostid_present_valide() {
		$this->object ->setHostId ( 1001 );
		
		$this ->assertSame ( $this->object, $this->object ->valide_hostid_present () );
	}

	/********************** GESTION DES HOSTGROUPS ***********************/
	/**
	 * @covers zabbix_host::creer_definition_hostListeGroups_ws
	 */
	public function testcreer_definition_hostListeGroups_ws() {
		$this->object ->setHost ( "MACHINE1" ) 
			->setHostId ( "10" );
		$this ->assertEquals ( array ( 
				"output" => "hostid", 
				'filter' => array ( 
						'host' => 'MACHINE1' ), 
				'selectGroups' => array ( 
						'groupid', 
						'name' ) ), $this->object ->creer_definition_hostListeGroups_ws () );
	}

	/**
	 * @covers zabbix_host::retrouve_liste_groups_par_host
	 */
	public function testretrouve_liste_groups_par_host() {
		$this->object ->setHost ( "MACHINE1" ) 
			->setHostId ( "10" );
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'hostGet' ) 
			->will ( $this ->onConsecutiveCalls ( array (), array ( 
				0 => array ( 
						"groups" => 10 ) ) ) );
		
		$this ->assertFalse ( $this->object ->retrouve_liste_groups_par_host () );
		
		$this ->assertEquals ( 10, $this->object ->retrouve_liste_groups_par_host () );
	}

	/**
	 * @covers zabbix_host::ajouter_groups_au_host
	 */
	public function testajouter_groups_au_host() {
		$this->object ->setHostId ( "10" );
		$this->object ->getObjetGroups () 
			->expects ( $this ->any () ) 
			->method ( 'valide_liste_groupes_a_partir_de_tableau' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetGroups () ) );
		$this->object ->getObjetGroups () 
			->expects ( $this ->any () ) 
			->method ( 'ajoute_groupe_a_partir_cli' ) 
			->will ( $this ->returnValue ( true ) );
		
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'hostGet' ) 
			->will ( $this ->returnValue ( array ( 
				0 => array ( 
						"hostid" => 10, 
						"groups" => array ( 
								10 ) ) ) ) );
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'hostUpdate' ) 
			->will ( $this ->returnValue ( true ) );
		
		$this ->assertTrue ( $this->object ->ajouter_groups_au_host () );
	}

	/**
	 * @covers zabbix_host::supprimer_groups_au_host
	 */
	public function testsupprimer_groups_au_host() {
		$this->object ->setHostId ( "10" );
		$this->object ->getObjetGroups () 
			->expects ( $this ->any () ) 
			->method ( 'valide_liste_groupes_a_partir_de_tableau' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetGroups () ) );
		$this->object ->getObjetGroups () 
			->expects ( $this ->any () ) 
			->method ( 'ajoute_groupe_a_partir_cli' ) 
			->will ( $this ->returnValue ( true ) );
		
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'hostGet' ) 
			->will ( $this ->returnValue ( array ( 
				0 => array ( 
						"hostid" => 10, 
						"groups" => array ( 
								10 ) ) ) ) );
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'hostUpdate' ) 
			->will ( $this ->returnValue ( true ) );
		
		$this ->assertTrue ( $this->object ->supprimer_groups_au_host () );
	}

	/**
	 * @covers zabbix_host::creer_definition_hostUpdate_manageGroups_ws
	 */
	public function testcreer_definition_hostUpdate_manageGroups_ws() {
		$this->object ->setHost ( "MACHINE1" ) 
			->setHostId ( "10" );
		
		$this->object ->getObjetGroups () 
			->expects ( $this ->any () ) 
			->method ( 'creer_definition_groupsids_ws' ) 
			->will ( $this ->returnValue ( array ( 
				"groupids" ) ) );
		
		$this ->assertEquals ( array ( 
				'hostid' => '10', 
				'groups' => array ( 
						'groupids' ) ), $this->object ->creer_definition_hostUpdate_manageGroups_ws () );
	}

	/********************** GESTION DES HOSTGROUPS ***********************/
	
	/********************** GESTION DES TEMPLATES ***********************/
	
	/**
	 * @covers zabbix_host::creer_definition_hostListeTemplates_ws
	 */
	public function testCreer_definition_hostListeTemplates_ws() {
		$this->object ->setHostId ( "10" );
		$this ->assertEquals ( array ( 
				"output" => "hostid", 
				"selectParentTemplates" => array ( 
						"templateid", 
						"name" ), 
				"hostids" => "10" ), $this->object ->creer_definition_hostListeTemplates_ws () );
	}

	/**
	 * @covers zabbix_host::retrouve_liste_template_par_host
	 */
	public function testRetrouve_liste_template_par_host() {
		$this->object ->setHostId ( "10" );
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'hostGet' ) 
			->will ( $this ->onConsecutiveCalls ( array (), array ( 
				0 => array ( 
						"parentTemplates" => 10 ) ) ) );
		
		$this ->assertFalse ( $this->object ->retrouve_liste_template_par_host () );
		
		$this ->assertEquals ( 10, $this->object ->retrouve_liste_template_par_host () );
	}

	/**
	 * @covers zabbix_host::ajouter_templates_au_host
	 */
	public function testAjouter_templates_au_host() {
		$this->object ->setHostId ( "10" );
		$this->object ->getObjetTemplates () 
			->expects ( $this ->any () ) 
			->method ( 'valide_liste_templates_a_partir_de_tableau' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetTemplates () ) );
		$this->object ->getObjetTemplates () 
			->expects ( $this ->any () ) 
			->method ( 'ajoute_template_a_partir_cli' ) 
			->will ( $this ->returnValue ( true ) );
		
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'hostGet' ) 
			->will ( $this ->returnValue ( array ( 
				0 => array ( 
						"parentTemplates" => array ( 
								10 ) ) ) ) );
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'hostUpdate' ) 
			->will ( $this ->returnValue ( true ) );
		
		$this ->assertTrue ( $this->object ->ajouter_templates_au_host () );
	}

	/**
	 * @covers zabbix_host::supprimer_templates_au_host
	 */
	public function testSupprimer_templates_au_host() {
		$this->object ->setHostId ( "10" );
		$this->object ->getObjetTemplates () 
			->expects ( $this ->any () ) 
			->method ( 'valide_liste_templates' ) 
			->will ( $this ->returnValue ( $this->object ->getObjetTemplates () ) );
		$this->object ->getObjetTemplates () 
			->expects ( $this ->any () ) 
			->method ( 'creer_definition_templatesids_ws' ) 
			->will ( $this ->returnValue ( array ( 
				"templatesids" => array ( 
						10 ) ) ) );
		
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'hostUpdate' ) 
			->will ( $this ->returnValue ( true ) );
		
		$this ->assertTrue ( $this->object ->supprimer_templates_au_host () );
	}

	/**
	 * @covers zabbix_host::creer_definition_hostUpdate_addTemplate_ws
	 */
	public function testCreer_definition_hostUpdate_addTemplate_ws_exception() {
		$this->object ->setHost ( "MACHINE1" );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS zabbix HOST) Il faut un host valide : MACHINE1' );
		$this->object ->creer_definition_hostUpdate_addTemplate_ws ();
	}

	/**
	 * @covers zabbix_host::creer_definition_hostUpdate_addTemplate_ws
	 */
	public function testCreer_definition_hostUpdate_addTemplate_ws() {
		$this->object ->setHostId ( "10" );
		$this->object ->getObjetTemplates () 
			->expects ( $this ->any () ) 
			->method ( 'creer_definition_templatesids_ws' ) 
			->will ( $this ->returnValue ( array ( 
				"templatesids" => array ( 
						10 ) ) ) );
		
		$this ->assertEquals ( array ( 
				"hostid" => "10", 
				"templates" => array ( 
						"templatesids" => array ( 
								10 ) ) ), $this->object ->creer_definition_hostUpdate_addTemplate_ws () );
	}

	/**
	 * @covers zabbix_host::creer_definition_hostUpdate_clearTemplate_ws
	 */
	public function testCreer_definition_hostUpdate_clearTemplate_ws_exception() {
		$this->object ->setHost ( "MACHINE1" );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS zabbix HOST) Il faut un host valide : MACHINE1' );
		$this->object ->creer_definition_hostUpdate_clearTemplate_ws ();
	}

	/**
	 * @covers zabbix_host::creer_definition_hostUpdate_clearTemplate_ws
	 */
	public function testCreer_definition_hostUpdate_clearTemplate_ws() {
		$this->object ->setHostId ( "10" );
		$this->object ->getObjetTemplates () 
			->expects ( $this ->any () ) 
			->method ( 'creer_definition_templatesids_ws' ) 
			->will ( $this ->returnValue ( array ( 
				"templatesids" => array ( 
						10 ) ) ) );
		
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'hostUpdate' ) 
			->will ( $this ->returnValue ( true ) );
		
		$this ->assertEquals ( array ( 
				"hostid" => "10", 
				"templates_clear" => array ( 
						array ( 
								10 ) ) ), $this->object ->creer_definition_hostUpdate_clearTemplate_ws () );
	}

	/********************** GESTION DES TEMPLATES ***********************/
	
	/********************** GESTION DES INTERFACES **********************/
	
	/**
	 * @covers zabbix_host::creer_definition_hostListeInterfaces_ws
	 */
	public function testCreer_definition_hostListeInterfaces_ws() {
		$this->object ->setHostId ( "10" );
		
		$this ->assertEquals ( array ( 
				"output" => "hostid", 
				"selectInterfaces" => array ( 
						'interfaceid', 
						'hostid', 
						'dns', 
						'port', 
						'type', 
						'main', 
						'ip', 
						'useip' ), 
				"hostids" => "10" ), $this->object ->creer_definition_hostListeInterfaces_ws () );
	}

	/**
	 * @covers zabbix_host::retrouve_liste_interfaces_par_host
	 */
	public function testRetrouve_liste_interfaces_par_host() {
		$this->object ->setHostId ( "10" );
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'hostGet' ) 
			->will ( $this ->onConsecutiveCalls ( array (), array ( 
				0 => array ( 
						"interfaces" => 10 ) ) ) );
		
		$this ->assertFalse ( $this->object ->retrouve_liste_interfaces_par_host () );
		
		$this ->assertEquals ( 10, $this->object ->retrouve_liste_interfaces_par_host () );
	}

	/**
	 * @covers zabbix_host::ajouter_interfaces_au_host
	 */
	public function testAjouter_interfaces_au_host() {
		$this->object ->setHostId ( "10" );
		$this->object ->getObjetInterfaces () 
			->expects ( $this ->any () ) 
			->method ( 'ajoute_interfaces' ) 
			->will ( $this ->returnValue ( true ) );
		
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'hostGet' ) 
			->will ( $this ->onConsecutiveCalls ( array (), array ( 
				0 => array ( 
						"interfaces" => 10 ) ) ) );
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'hostUpdate' ) 
			->will ( $this ->returnValue ( true ) );
		
		$this ->assertSame ( $this->object, $this->object ->ajouter_interfaces_au_host () );
		$this ->assertSame ( $this->object, $this->object ->ajouter_interfaces_au_host () );
	}

	/**
	 * @covers zabbix_host::supprimer_interfaces_au_host
	 */
	public function testSupprimer_interfaces_au_host() {
		$this->object ->setHostId ( "10" );
		
		$this->object ->getObjetInterfaces () 
			->expects ( $this ->any () ) 
			->method ( 'supprime_interfaces' ) 
			->will ( $this ->returnValue ( array ( 
				"interfaceids" => array ( 
						10 ) ) ) );
		$this->object ->getObjetInterfaces () 
			->expects ( $this ->any () ) 
			->method ( 'creer_definition_host_interfaces_ws' ) 
			->will ( $this ->returnValue ( array ( 
				"interfaceids" => array ( 
						10 ) ) ) );
		
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'hostGet' ) 
			->will ( $this ->onConsecutiveCalls ( array (), array ( 
				0 => array ( 
						"interfaces" => 10 ) ) ) );
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'hostUpdate' ) 
			->will ( $this ->returnValue ( true ) );
		
		$this ->assertSame ( $this->object, $this->object ->supprimer_interfaces_au_host () );
		$this ->assertSame ( $this->object, $this->object ->supprimer_interfaces_au_host () );
	}

	/**
	 * @covers zabbix_host::creer_definition_hostUpdate_addInterface_ws
	 */
	public function testCreer_definition_hostUpdate_addInterface_ws() {
		$this->object ->setHostId ( "10" );
		$this->object ->getObjetInterfaces () 
			->expects ( $this ->any () ) 
			->method ( 'creer_definition_host_interfaces_ws' ) 
			->will ( $this ->returnValue ( array ( 
				"interfaceids" => array ( 
						10 ) ) ) );
		
		$this ->assertEquals ( array ( 
				"hostid" => "10", 
				"interfaces" => array ( 
						"interfaceids" => array ( 
								10 ) ) ), $this->object ->creer_definition_hostUpdate_addInterface_ws () );
	}

	/********************** GESTION DES INTERFACES **********************/
	
	/********************** GESTION DES INVENTORY ***********************/
	/**
	 * @covers zabbix_host::creer_definition_inventory_ws
	 */
	public function testCreer_definition_inventory_ws() {
		$this ->assertEquals ( array (), $this->object ->creer_definition_inventory_ws () );
	}

	/********************** GESTION DES INVENTORY ***********************/
	
	/**
	 * @covers zabbix_host::retrouve_Status
	 */
	public function testRetrouve_Status() {
		$this ->assertEquals ( 0, $this->object ->retrouve_Status ( "" ) );
		$this ->assertEquals ( 0, $this->object ->retrouve_Status ( "monitored" ) );
		$this ->assertEquals ( 1, $this->object ->retrouve_Status ( "unmonitored" ) );
		$this ->assertEquals ( 10, $this->object ->retrouve_Status ( 10 ) );
	}
}
