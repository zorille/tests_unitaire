<?php
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-03-20 at 10:22:41.
 */
class zabbix_usergroupTest extends MockedListeOptions {
	/**
     * @var zabbix_usergroup
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$zabbix_wsclient = $this ->createMock ( "zabbix_wsclient" );
		$zabbix_permissions = $this ->createMock ( "zabbix_permissions" );
		
		$this->object = new zabbix_usergroup ( false, "zabbix_usergroup" );
		$this->object ->setObjetZabbixWsclient ( $zabbix_wsclient ) 
			->setObjetListePermissions ( $zabbix_permissions );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers zabbix_usergroup::retrouve_zabbix_param
     */
	public function testRetrouve_zabbix_param_Exception() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( false ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(zabbix_usergroup) Il manque le parametre : zabbix_usergroup_nom' );
		$this->object ->retrouve_zabbix_param ();
	}

	/**
	 * @covers zabbix_usergroup::retrouve_zabbix_param
	 */
	public function testRetrouve_zabbix_param() {
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'verifie_variable_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->onConsecutiveCalls ( 'val1', 'disabled', 'system', 'enabled' ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		$this->object ->getObjetListePermissions () 
			->expects ( $this ->any () ) 
			->method ( 'retrouve_zabbix_param' ) 
			->will ( $this ->onConsecutiveCalls ( false, true ) );
		
		$this ->assertSame ( $this->object, $this->object ->retrouve_zabbix_param () );
	}

	/**
     * @covers zabbix_usergroup::compare_usergroup
     */
	public function testCompare_usergroup() {
		$this->object ->setName ( "NAME1" );
		$this->object ->setDebugMode ( "disabled" );
		$this->object ->setGuiAccess ( "system" );
		$this->object ->setUsersStatus ( "enabled" );
		$objet_test = clone $this->object;
		$this ->assertTrue ( $this->object ->compare_usergroup ( $objet_test ) );
		$this->object ->setUsrgrpId ( 10 );
		$this ->assertTrue ( $this->object ->compare_usergroup ( $objet_test ) );
		$objet_test ->setUsrgrpId ( 11 );
		$this ->assertFalse ( $this->object ->compare_usergroup ( $objet_test ) );
		$objet_test ->setUsrgrpId ( 10 );
		$objet_test ->setName ( "NAME2" );
		$this ->assertFalse ( $this->object ->compare_usergroup ( $objet_test ) );
		$objet_test ->setName ( "NAME1" );
		$objet_test ->setDebugMode ( "enabled" );
		$this ->assertFalse ( $this->object ->compare_usergroup ( $objet_test ) );
		$objet_test ->setDebugMode ( "disabled" );
		$objet_test ->setGuiAccess ( "internal" );
		$this ->assertFalse ( $this->object ->compare_usergroup ( $objet_test ) );
		$objet_test ->setGuiAccess ( "system" );
		$objet_test ->setUsersStatus ( "disabled" );
		$this ->assertFalse ( $this->object ->compare_usergroup ( $objet_test ) );
	}

	/**
     * @covers zabbix_usergroup::creer_definition_userGroup_create_ws
     */
	public function testCreer_definition_userGroup_create_ws() {
		$this->object ->setName ( "NAME1" );
		$this->object ->setDebugMode ( "disabled" );
		$this->object ->setGuiAccess ( "system" );
		$this->object ->setUsersStatus ( "enabled" );
		
		$this->object ->getObjetListePermissions () 
			->expects ( $this ->any () ) 
			->method ( 'getPermissions' ) 
			->will ( $this ->returnValue ( array () ) );
		
		$this ->assertEquals ( array ( 
				"name" => "NAME1", 
				"debug_mode" => 0, 
				"gui_access" => 0, 
				"users_status" => 0, 
				"rights" => array (), 
				"userids" => array () ), $this->object ->creer_definition_userGroup_create_ws () );
	}

	/**
     * @covers zabbix_usergroup::creer_userGroup
     */
	public function testCreer_userGroup() {
		$this->object ->setName ( "NAME1" );
		$this->object ->setDebugMode ( "disabled" );
		$this->object ->setGuiAccess ( "system" );
		$this->object ->setUsersStatus ( "enabled" );
		$this->object ->getObjetListePermissions () 
			->expects ( $this ->any () ) 
			->method ( 'getPermissions' ) 
			->will ( $this ->returnValue ( array () ) );
		
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'usergroupCreate' ) 
			->will ( $this ->returnValue ( array ( 
				"usrgrpids" => array ( 
						10 ) ) ) );
		
		$this ->assertEquals ( array ( 
				"usrgrpids" => array ( 
						10 ) ), $this->object ->creer_userGroup () );
	}

	/**
     * @covers zabbix_usergroup::creer_definition_userGroup_delete_ws
     */
	public function testCreer_definition_userGroup_delete_ws() {
		$this ->assertEquals ( array (), $this->object ->creer_definition_userGroup_delete_ws () );
		$this->object ->setUsrgrpId ( 10 );
		$this ->assertEquals ( array ( 
				10 ), $this->object ->creer_definition_userGroup_delete_ws () );
	}

	/**
     * @covers zabbix_usergroup::supprime_userGroup
     */
	public function testSupprime_userGroup() {
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'usergroupDelete' ) 
			->will ( $this ->returnValue ( array ( 
				"usrgrpids" => array ( 
						10 ) ) ) );
		
		$this ->assertEquals ( array ( 
				"usrgrpids" => array ( 
						10 ) ), $this->object ->supprime_userGroup () );
	}

	/**
     * @covers zabbix_usergroup::creer_definition_userGroup_get_ws
     */
	public function testCreer_definition_userGroup_get_ws() {
		$this->object ->setName ( "NAME1" );
		$this ->assertEquals ( array ( 
				"output" => "usrgrpid", 
				"filter" => array ( 
						"name" => "NAME1" ) ), $this->object ->creer_definition_userGroup_get_ws () );
	}

	/**
     * @covers zabbix_usergroup::recherche_userGroup
     */
	public function testRecherche_userGroup() {
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'usergroupGet' ) 
			->will ( $this ->returnValue ( array ( 
				array ( 
						"usrgrpid" => "7", 
						"name" => "Zabbix administrators", 
						"gui_access" => "0", 
						"users_status" => "0", 
						"debug_mode" => "1" ) ) ) );
		
		$this ->assertEquals ( array ( 
				array ( 
						"usrgrpid" => "7", 
						"name" => "Zabbix administrators", 
						"gui_access" => "0", 
						"users_status" => "0", 
						"debug_mode" => "1" ) ), $this->object ->recherche_userGroup () );
	}

	/**
	 * @covers zabbix_usergroup::creer_definition_usrgrpidByName_get_ws
	 */
	public function testCreer_definition_usrgrpidByName_get_ws() {
		$this->object ->setName ( "NAME1" );
		$this ->assertEquals ( array ( 
				"output" => "usrgrpid", 
				"filter" => array ( 
						"name" => "NAME1" ) ), $this->object ->creer_definition_usrgrpidByName_get_ws () );
	}

	/**
	 * @covers zabbix_usergroup::creer_definition_usrgrpid_get_ws
	 */
	public function testCreer_definition_usrgrpid_get_ws() {
		$this->object ->setUsrgrpId ( 10 );
		$this ->assertEquals ( array ( 
				"usrgrpid" => "10" ), $this->object ->creer_definition_usrgrpid_get_ws () );
	}

	/**
	 * @covers zabbix_usergroup::recherche_userGroupid_by_Name
	 */
	public function testRecherche_userGroupid_by_Name() {
		$this->object ->getObjetZabbixWsclient () 
			->expects ( $this ->any () ) 
			->method ( 'usergroupGet' ) 
			->will ( $this ->returnValue ( array ( 
				array ( 
						"usrgrpid" => "7" ) ) ) );
		
		$this ->assertSame ( $this->object, $this->object ->recherche_userGroupid_by_Name () );
		$this ->assertEquals ( 7, $this->object ->getUsrgrpId () );
	}

	/**
     * @covers zabbix_usergroup::retrouve_DebugMode
     */
	public function testRetrouve_DebugMode() {
		$this ->assertEquals ( 0, $this->object ->retrouve_DebugMode ( "" ) );
		$this ->assertEquals ( 0, $this->object ->retrouve_DebugMode ( "disabled" ) );
		$this ->assertEquals ( 1, $this->object ->retrouve_DebugMode ( "enabled" ) );
		$this ->assertEquals ( 10, $this->object ->retrouve_DebugMode ( 10 ) );
	}

	/**
     * @covers zabbix_usergroup::retrouve_GuiAccess
     */
	public function testRetrouve_GuiAccess() {
		$this ->assertEquals ( 0, $this->object ->retrouve_GuiAccess ( "" ) );
		$this ->assertEquals ( 0, $this->object ->retrouve_GuiAccess ( "system" ) );
		$this ->assertEquals ( 1, $this->object ->retrouve_GuiAccess ( "internal" ) );
		$this ->assertEquals ( 2, $this->object ->retrouve_GuiAccess ( "frontend" ) );
		$this ->assertEquals ( 10, $this->object ->retrouve_GuiAccess ( 10 ) );
	}

	/**
     * @covers zabbix_usergroup::retrouve_UsersStatus
     */
	public function testRetrouve_UsersStatus() {
		$this ->assertEquals ( 0, $this->object ->retrouve_UsersStatus ( "" ) );
		$this ->assertEquals ( 0, $this->object ->retrouve_UsersStatus ( "enabled" ) );
		$this ->assertEquals ( 1, $this->object ->retrouve_UsersStatus ( "disabled" ) );
		$this ->assertEquals ( 10, $this->object ->retrouve_UsersStatus ( 10 ) );
	}
}
