<?php
namespace Zorille\framework;
/**
 * @ignore
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Test class for repertoire.
 * Generated by PHPUnit on 2010-08-09 at 10:02:02.
 */
class repertoireTest extends MockedListeOptions {
	/**
     * @var repertoire
     */
	protected $object;

	public static function setUpBeforeClass() {
		system ( "mkdir /tmp/test_unitaire;touch /tmp/test_unitaire/fichier", $retour );
	}

	public static function tearDownAfterClass() {
		system ( "rm -Rf /tmp/test_unitaire", $retour );
	}

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		
		$this->object = new repertoire ( false, "TESTS repertoire"  );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * Implement testLire_repertoire().
     */
	public function testLire_repertoire() {
		$this->assertEquals ( array (
				"fichier" 
		), $this->object->lire_repertoire ( "/tmp/test_unitaire" ) );
		
		$this->assertFalse ( $this->object->lire_repertoire ( "/tmp/test_unitaire_false" ) );
	}

	/**
     * Implement testRecupere_info_repertoire().
     */
	public function testRecupere_info_repertoire() {
		$this->assertArrayHasKey ( '0', $this->object->recupere_info_repertoire ( "/tmp/test_unitaire" ) );
		
		$this->assertFalse ( $this->object->recupere_info_repertoire ( "/tmp/test_unitaire_false" ) );
		$this->assertFalse ( $this->object->recupere_info_repertoire () );
	}

	/**
     * Implement testTester_repertoire_existe().
     */
	public function testTester_repertoire_existe() {
		$this->assertTrue ( $this->object->tester_repertoire_existe ( "/tmp/test_unitaire" ) );
		
		$this->assertFalse ( $this->object->tester_repertoire_existe ( "/tmp/test_unitaire_false" ) );
		$this->assertFalse ( $this->object->tester_repertoire_existe () );
	}

	/**
     * Implement testTester_repertoire_vide().
     */
	public function testTester_repertoire_vide() {
		system ( "mkdir /tmp/test_unitaire_bis", $retour );
		$this->assertTrue ( $this->object->tester_repertoire_vide ( "/tmp/test_unitaire_bis" ) );
		system ( "rmdir /tmp/test_unitaire_bis", $retour );
		
		$this->assertFalse ( $this->object->tester_repertoire_vide ( "/tmp/test_unitaire" ) );
		$this->assertFalse ( $this->object->tester_repertoire_vide ( "/tmp/test_unitaire_false" ) );
		$this->assertFalse ( $this->object->tester_repertoire_vide () );
	}

	/**
     * Implement testRecupere_taille_disque().
     */
	public function testRecupere_taille_disque() {
		$this->assertNotEquals ( '0', $this->object->recupere_taille_disque ( "/tmp/test_unitaire" ) );
		
		$this->assertFalse ( $this->object->recupere_taille_disque ( "/tmp/test_unitaire_false" ) );
		$this->assertFalse ( $this->object->recupere_taille_disque () );
	}

	/**
     * Implement testRecupere_taille_libre_disque().
     */
	public function testRecupere_taille_libre_disque() {
		$this->assertNotEquals ( '0', $this->object->recupere_taille_libre_disque ( "/tmp/test_unitaire" ) );
		
		$this->assertFalse ( $this->object->recupere_taille_libre_disque ( "/tmp/test_unitaire_false" ) );
		$this->assertFalse ( $this->object->recupere_taille_libre_disque () );
	}

	/**
     * Implement testCreer_nouveau_repertoire().
     */
	public function testCreer_nouveau_repertoire() {
		$this->assertTrue ( $this->object->creer_nouveau_repertoire ( "/tmp/test_unitaire_bis" ) );
		system ( "rmdir /tmp/test_unitaire_bis", $retour );
		
		$this->assertFalse ( $this->object->creer_nouveau_repertoire ( "/dev/not_usable" ) );
		$this->assertFalse ( $this->object->creer_nouveau_repertoire () );
	}

	/**
     * Implement testSupprimer_repertoire().
     */
	public function testSupprimer_repertoire() {
		system ( "mkdir /tmp/test_unitaire_bis", $retour );
		$this->assertTrue ( $this->object->supprimer_repertoire ( "/tmp/test_unitaire_bis" ) );
		
		$this->assertFalse ( $this->object->supprimer_repertoire ( "/tmp/test_unitaire_false" ) );
		$this->assertFalse ( $this->object->supprimer_repertoire () );
	}
}
?>
