<?php
namespace Zorille\framework;
use \Exception as Exception;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-25 at 17:09:28.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class definition_fichierTest extends MockedListeOptions {
	/**
     * @var definition_fichier
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = new definition_fichier ( false, "TESTS definition_fichier" );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * @covers Zorille\framework\definition_fichier::verifie_variables
	 */
	public function testVerifie_variables_NoVal() {
		
		$this->getListeOption ()
			->expects ( $this->any () )
			->method ( 'verifie_option_existe' )
			->will ( $this->returnValue ( false ) );
		$this->assertEquals ( "", $this->object->verifie_variables ( $this->getListeOption (), "VAR" ) );
	}

	/**
	 * @covers Zorille\framework\definition_fichier::verifie_variables
	 */
	public function testVerifie_variables_Defaut() {
		
		$this->getListeOption ()
			->expects ( $this->any () )
			->method ( 'verifie_option_existe' )
			->will ( $this->returnValue ( false ) );
		$this->assertEquals ( "DEFAUT", $this->object->verifie_variables ( $this->getListeOption (), "VAR", "DEFAUT" ) );
	}

	/**
	 * @covers Zorille\framework\definition_fichier::verifie_variables
	 */
	public function testVerifie_variables_Valeur() {
		
		$this->getListeOption ()
			->expects ( $this->any () )
			->method ( 'verifie_option_existe' )
			->will ( $this->returnValue ( true ) );
		$this->getListeOption ()
			->expects ( $this->any () )
			->method ( 'getOption' )
			->will ( $this->returnValue ( "VALEUR" ) );
		$this->assertEquals ( "VALEUR", $this->object->verifie_variables ( $this->getListeOption (), "VAR", "DEFAUT" ) );
	}

	/**
     * @covers Zorille\framework\definition_fichier::creer_structure_fichier
     */
	public function testCreer_structure_fichier_Exception() {
		
		$this->getListeOption ()
			->expects ( $this->any () )
			->method ( 'verifie_option_existe' )
			->will ( $this->returnValue ( false ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS definition_fichier) Il manque le type de donnee.' );
		$this->object->creer_structure_fichier ( $this->getListeOption () );
	}

	/**
	 * @covers Zorille\framework\definition_fichier::creer_structure_fichier
	 */
	public function testCreer_structure_fichier() {
		
		$this->getListeOption ()
			->expects ( $this->any () )
			->method ( 'verifie_option_existe' )
			->will ( $this->returnValue ( true ) );
		$this->assertSame ( $this->object, $this->object->creer_structure_fichier ( $this->getListeOption () ) );
	}

	/**
     * @covers Zorille\framework\definition_fichier::structure_fichier_standard
     */
	public function testStructure_fichier_standard() {
		$this->assertSame ( $this->object, $this->object->structure_fichier_standard ( "NOM1", "TYPE1" ) );
		$this->assertEquals ( array (
				'nom' => 'NOM1',
				'dossier' => '',
				'type' => 'TYPE1',
				'format' => 'f',
				'mandatory' => false,
				'telecharger' => false 
		), $this->object->structure_fichier );
	}

	/**
     * @covers Zorille\framework\definition_fichier::verifie_structure
     */
	public function testVerifie_structure_True() {
		$this->object->structure_fichier = array (
				'nom' => 'NOM1',
				'dossier' => '',
				'type' => 'TYPE1',
				'format' => 'f',
				'mandatory' => false,
				'telecharger' => false 
		);
		$this->assertTrue ( $this->object->verifie_structure () );
	}

	/**
	 * @covers Zorille\framework\definition_fichier::verifie_structure
	 */
	public function testVerifie_structure_False() {
		$this->assertFalse ( $this->object->verifie_structure () );
	}

	/**
     * @covers Zorille\framework\definition_fichier::renvoi_parametre_fichier
     */
	public function testrenvoi_parametre_fichier_False() {
		$this->assertFalse ( $this->object->renvoi_parametre_fichier ( "test" ) );
	}

	/**
	 * @covers Zorille\framework\definition_fichier::renvoi_parametre_fichier
	 */
	public function testrenvoi_parametre_fichier_Valeur() {
		$this->object->structure_fichier = array (
				'nom' => 'NOM1',
				'dossier' => '',
				'type' => 'TYPE1',
				'format' => 'f',
				'mandatory' => false,
				'telecharger' => false 
		);
		$this->assertEquals ( 'NOM1', $this->object->renvoi_parametre_fichier ( "nom" ) );
	}

	/**
     * @covers Zorille\framework\definition_fichier::ajoute_donnees_structure_fichier
     */
	public function testAjoute_donnees_structure_fichier_True() {
		$this->assertTrue ( $this->object->ajoute_donnees_structure_fichier ( "test", "invalide" ) );
	}

	/**
	 * @covers Zorille\framework\definition_fichier::ajoute_donnees_structure_fichier
	 */
	public function testAjoute_donnees_structure_fichier_False() {
		$this->object->structure_fichier = array (
				'nom' => 'NOM1',
				'dossier' => '',
				'type' => 'TYPE1',
				'format' => 'f',
				'mandatory' => false,
				'telecharger' => false 
		);
		$this->assertFalse ( $this->object->ajoute_donnees_structure_fichier ( "nom", "invalide" ) );
	}

	/**
     * @covers Zorille\framework\definition_fichier::prepare_copie_fichier
     */
	public function testPrepare_copie_fichier() {
		$this->assertTrue ( $this->object->prepare_copie_fichier ( "resultat" ) );
	}

	/**
	 * @covers Zorille\framework\definition_fichier::modifie_donnees_structure_fichier
	 */
	public function testModifie_donnees_structure_fichier_True() {
		$this->object->structure_fichier = array (
				'nom' => 'NOM1',
				'dossier' => '',
				'type' => 'TYPE1',
				'format' => 'f',
				'mandatory' => false,
				'telecharger' => false 
		);
		$this->assertTrue ( $this->object->modifie_donnees_structure_fichier ( "nom", "invalide" ) );
	}

	/**
	 * @covers Zorille\framework\definition_fichier::modifie_donnees_structure_fichier
	 */
	public function testModifie_donnees_structure_fichier_False() {
		$this->assertFalse ( $this->object->modifie_donnees_structure_fichier ( "test", "invalide" ) );
	}

	/**
     * @covers Zorille\framework\definition_fichier::renvoi_structure_fichier
     */
	public function testrenvoi_structure_fichier_False() {
		$this->assertFalse ( $this->object->renvoi_structure_fichier () );
	}

	/**
	 * @covers Zorille\framework\definition_fichier::renvoi_structure_fichier
	 */
	public function testrenvoi_structure_fichier_True() {
		$this->object->structure_fichier = array (
				'nom' => 'NOM1',
				'dossier' => '',
				'type' => 'TYPE1',
				'format' => 'f',
				'mandatory' => false,
				'telecharger' => false 
		);
		$this->assertEquals ( array (
				'nom' => 'NOM1',
				'dossier' => '',
				'type' => 'TYPE1',
				'format' => 'f',
				'mandatory' => false,
				'telecharger' => false 
		), $this->object->renvoi_structure_fichier () );
	}
}
