<?php
namespace Zorille\framework;
use \Exception as Exception;
/**
 * @ignore
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Test class for fichier.
 * Generated by PHPUnit on 2010-08-09 at 10:02:09.
 */
class fichierTest extends MockedListeOptions {
	/**
	 * @var fichier
	 */
	protected $object;
	protected $nom_fichier = "/tmp/fichier_test";
	protected $nom_fichier_false = "/tmp/fichier_test_false";

	public static function tearDownAfterClass() {
		system ( "rm -f /tmp/fichier_test*", $retour );
	}

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		ob_start ();
		$this->object = new fichier ( $this->nom_fichier, "oui", false, "TESTS fichier" );
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * @covers Zorille\framework\fichier::__construct
	 */
	public function testNewFichier_Exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS fichier) Erreur le fichier : /tmp/fichier_test_false n\'existe pas' );
		$this->object_false = new fichier ( $this->nom_fichier_false, "non", false, "TESTS fichier" );
	}

	/**
	 * @covers Zorille\framework\fichier::ouvrir
	 */
	public function testOuvrir() {
		$this ->assertTrue ( $this->object ->ouvrir ( "w" ) );
		$this->object ->close ();
	}

	/**
	 * @covers Zorille\framework\fichier::ecrit
	 */
	public function testEcrit() {
		$this->object ->ouvrir ( "a" );
		$this ->assertTrue ( $this->object ->ecrit ( "ceci est un test" ) );
		$this->object ->ecrit ( "ceci est un test bis" );
		$this->object ->close ();
	}

	/**
	 * @covers Zorille\framework\fichier::lit_une_ligne
	 */
	public function testLit_une_ligne_406() {
		$this->object ->ouvrir ( "r" );
		$this ->assertEquals ( "ceci est un testceci est un test bis", $this->object ->lit_une_ligne ( 4096, "\n" ) );
		$this->object ->close ();
	}

	/**
	 * @covers Zorille\framework\fichier::lit_une_ligne
	 */
	public function testLit_une_ligne_4() {
		$this->object ->ouvrir ( "r" );
		$this ->assertEquals ( "ceci", $this->object ->lit_une_ligne ( 4 ) );
		$this->object ->close ();
	}

	/**
	 * @covers Zorille\framework\fichier::charge_fichier
	 */
	public function testCharge_fichier() {
		$this->object ->ouvrir ( "r" );
		$this ->assertEquals ( "ceci est un testceci est un test bis", $this->object ->charge_fichier () );
		$this->object ->close ();
	}

	/**
	 * @covers Zorille\framework\fichier::charge_fichier
	 */
	public function testCharge_fichier_returnArray() {
		$this->object ->ouvrir ( "r" );
		$this ->assertEquals ( array ( 
				'ceci est un testceci est un test bis' ), $this->object ->charge_fichier ( 4096, true ) );
		$this->object ->close ();
	}

	/**
	 * @covers Zorille\framework\fichier::copie
	 */
	public function testCopie() {
		$this ->assertEquals ( 0, fichier::copie ( $this->nom_fichier, "/tmp/fichier_test_copie", "oui" ) );
		$this ->assertEquals ( 3, fichier::copie ( $this->nom_fichier, "/tmp/fichier_test_copie", "non" ) );
		$this ->assertEquals ( 2, fichier::copie ( "skip", "/tmp/fichier_test_copie", "oui" ) );
		$this ->assertEquals ( 2, fichier::copie ( "", "/tmp/fichier_test_copie", "oui" ) );
		$this ->assertEquals ( 2, fichier::copie ( $this->nom_fichier, "", "oui" ) );
		$this ->assertEquals ( 4, fichier::copie ( $this->nom_fichier, "/lib/tmp_test/fichier_test_copie", "oui" ) );
	}

	/**
	 * @covers Zorille\framework\fichier::deplace
	 */
	public function testDeplace() {
		$this ->assertEquals ( 0, fichier::deplace ( $this->nom_fichier, "/tmp/fichier_test_copie", "oui" ) );
		$this ->assertEquals ( 2, fichier::deplace ( "/tmp/fichier_test_copie", "/tmp/fichier_test_copie", "non" ) );
		$this ->assertEquals ( 1, fichier::deplace ( "skip", "/tmp/fichier_test_copie", "oui" ) );
	}

	/**
	 * @covers Zorille\framework\fichier::supprime_fichier
	 */
	public function testSupprime_fichier() {
		$this ->assertTrue ( fichier::supprime_fichier ( "/tmp/fichier_test_copie" ) );
		$this ->assertTrue ( fichier::supprime_fichier ( "/tmp/fichier_test_undel" ) );
	}

	/**
	 * @covers Zorille\framework\fichier::renomme
	 */
	public function testRenomme() {
		$this ->assertFalse ( fichier::renomme ( $this->nom_fichier, "/tmp/fichier_test_rename" ) );
	}

	/**
	 * @covers Zorille\framework\fichier::close
	 */
	public function testClose() {
		$this->object ->ouvrir ( "r" );
		$this ->assertTrue ( $this->object ->close () );
	}

	/**
	 * @covers Zorille\framework\fichier::tester_fichier_existe
	 */
	public function testTester_fichier_existe() {
		$this ->assertTrue ( fichier::tester_fichier_existe ( $this->nom_fichier ) );
		
		$this ->assertFalse ( fichier::tester_fichier_existe ( $this->nom_fichier_false ) );
	}

	/**
	 * @covers Zorille\framework\fichier::tester_fichier_standard
	 */
	public function testTester_fichier_standard() {
		$this ->assertTrue ( fichier::tester_fichier_standard ( $this->nom_fichier ) );
		
		$this ->assertFalse ( fichier::tester_fichier_standard ( $this->nom_fichier_false ) );
	}

	/**
	 * @covers Zorille\framework\fichier::recupere_info_fichier
	 */
	public function testRecupere_info_fichier() {
		$this ->assertArrayHasKey ( 'size', fichier::recupere_info_fichier ( $this->nom_fichier ) );
		
		$this ->assertFalse ( fichier::recupere_info_fichier ( $this->nom_fichier_false ) );
	}

	/**
	 * @covers Zorille\framework\fichier::renvoi_nom_fichier
	 */
	public function testrenvoi_nom_fichier() {
		$this ->assertEquals ( '/tmp/fichier_test', $this->object ->renvoi_nom_fichier () );
	}

	/**
	 * @covers Zorille\framework\fichier::recupere_taille_fichier
	 */
	public function testRecupere_taille_fichier() {
		$this ->assertEquals ( 0, fichier::recupere_taille_fichier ( $this->nom_fichier ) );
		
		$this ->assertFalse ( fichier::recupere_taille_fichier ( $this->nom_fichier_false ) );
	}

	/**
	 * @covers Zorille\framework\fichier::Lit_integralite_fichier
	 */
	public function testLit_integralite_fichier() {
		$this ->assertEquals ( '', fichier::Lit_integralite_fichier ( $this->nom_fichier ) );
		
		$this ->assertFalse ( fichier::Lit_integralite_fichier ( $this->nom_fichier_false ) );
	}

	/**
	 * @covers Zorille\framework\fichier::Lit_integralite_fichier_en_tableau
	 */
	public function testLit_integralite_fichier_en_tableau() {
		$this ->assertEquals ( array (), fichier::Lit_integralite_fichier_en_tableau ( $this->nom_fichier ) );
		
		$this ->assertFalse ( fichier::Lit_integralite_fichier_en_tableau ( $this->nom_fichier_false ) );
	}
}
?>
