<?php
namespace Zorille\framework;
use PHPUnit\Framework\TestCase as TestCase;
use \Exception as Exception;
/**
 * @ignore
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Test class for abstract_log.
 * Generated by PHPUnit on 2010-08-02 at 16:34:00.
 */
class abstract_logTest extends TestCase {
	/**
	 * @var abstract_log
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		ob_start ();
		
		$log = $this->createMock('Zorille\framework\logs', array (
				'verbose',
				'valideVerbose' 
		) );
		$log->expects ( $this->any () )
			->method ( 'verbose' )
			->will ( $this->returnValue ( 2 ) );
		$log->expects ( $this->any () )
			->method ( 'valideVerbose' )
			->will ( $this->returnValue ( true ) );
		abstract_log::$logs = &$log;
		
		$this->object = $this->getMockForAbstractClass ( 'Zorille\framework\abstract_log' );
		//$this->object = new abstract_log ( false, "TEST" );
		$this->object->setThrowException ( false );
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * Implement testOnDebug().
	 */
	public function testOnDebug() {
		// Remove the following lines when you implement this test.
		$this->assertSame ( $this->object, $this->object->onDebug ( "Test", 0 ) );
		$this->assertSame ( $this->object, $this->object->onDebug ( array (
				"Test" 
		), 0 ) );
		$this->assertSame ( $this->object, $this->object->onDebug ( $this->object, 0 ) );
	}

	/**
	 * @covers Zorille\framework\abstract_log::OnInfo
	 */
	public function testOnInfo_String() {
		$this->assertSame ( $this->object, $this->object->OnInfo ( "Test" ) );
	}

	/**
	 * @covers Zorille\framework\abstract_log::OnInfo
	 */
	public function testOnInfo_Array() {
		// Remove the following lines when you implement this test.
		$this->assertSame ( $this->object, $this->object->OnInfo ( array (
				"Test" 
		) ) );
	}

	/**
	 * @covers Zorille\framework\abstract_log::OnInfo
	 */
	public function testOnInfo_Object() {
		$this->assertSame ( $this->object, $this->object->OnInfo ( $this->object ) );
	}

	/**
	 * Implement testOnWarning().
	 */
	public function testOnWarning() {
		$this->assertFalse ( $this->object->OnWarning ( "Test" ) );
	}

	/**
	 * Implement testOnError().
	 */
	public function testOnError() {
		$this->assertFalse ( $this->object->OnError ( "Test", "", 0 ) );
	}
	
	/**
	 * Implement testOnError().
	 */
	public function testOnError_exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(abstract_log) Test2' );
			$this->object->setThrowException ( true );
			$this->object->OnError ( "Test2" );
	}

	/**
	 * Implement testOnError_standard().
	 */
	public function testOnError_standard() {
		$this->assertFalse ( $this->object->OnError_standard ( "Test", false, true ) );
		$this->assertFalse ( $this->object->OnError_standard ( "Test", array (
				"1",
				"2" 
		), true ) );
		$this->assertFalse ( abstract_log::OnError_standard ( "Test", false, true ) );
		$this->assertFalse ( abstract_log::OnError_standard ( "Test", array (
				"1",
				"2" 
		), true ) );
		$this->assertFalse ( $this->object->OnError_standard ( true, false, true ) );
		$this->assertFalse ( $this->object->OnError_standard ( false, false, true ) );
		$this->assertFalse ( $this->object->OnError_standard ( array (
				"Test" 
		), false, true ) );
		
		abstract_log::$logs = "";
		$this->assertFalse ( $this->object->OnError_standard ( "Test", false, true ) );
		$this->assertFalse ( $this->object->OnError_standard ( true, false, true ) );
		$this->assertFalse ( $this->object->OnError_standard ( false, false, true ) );
		$this->assertFalse ( $this->object->OnError_standard ( array (
				"Test" 
		), false, true ) );
	}

	/**
	 * Implement testOnWarning_standard().
	 */
	public function testOnWarning_standard() {
		$this->assertTrue ( $this->object->OnWarning_standard ( "Test", true ) );
		$this->assertTrue ( abstract_log::OnWarning_standard ( "Test", true ) );
		$this->assertTrue ( $this->object->OnWarning_standard ( true, true ) );
		$this->assertTrue ( $this->object->OnWarning_standard ( false, true ) );
		$this->assertTrue ( $this->object->OnWarning_standard ( array (
				"Test" 
		), true ) );
		$this->assertTrue ( $this->object->OnWarning_standard ( $this->object, true ) );
		
		abstract_log::$logs = "";
		$this->assertTrue ( $this->object->OnWarning_standard ( "Test", true ) );
		$this->assertTrue ( $this->object->OnWarning_standard ( true, true ) );
		$this->assertTrue ( $this->object->OnWarning_standard ( false, true ) );
		$this->assertTrue ( $this->object->OnWarning_standard ( array (
				"Test" 
		), true ) );
		$this->assertTrue ( $this->object->OnWarning_standard ( $this->object, true ) );
	}

	/**
	 * Implement testOnInfo_standard().
	 */
	public function testOnInfo_standard() {
		$this->assertTrue ( $this->object->onInfo_standard ( "Test", true ) );
		$this->assertTrue ( abstract_log::onInfo_standard ( "Test", true ) );
		$this->assertTrue ( $this->object->onInfo_standard ( true, true ) );
		$this->assertTrue ( $this->object->onInfo_standard ( false, true ) );
		$this->assertTrue ( $this->object->onInfo_standard ( array (
				"Test" 
		), true ) );
		$this->assertTrue ( $this->object->onInfo_standard ( $this->object, true ) );
		
		abstract_log::$logs = "";
		$this->assertTrue ( $this->object->onInfo_standard ( "Test", true ) );
		$this->assertTrue ( $this->object->onInfo_standard ( true, true ) );
		$this->assertTrue ( $this->object->onInfo_standard ( false, true ) );
		$this->assertTrue ( $this->object->onInfo_standard ( array (
				"Test" 
		), true ) );
		$this->assertTrue ( $this->object->onInfo_standard ( $this->object, true ) );
	}

	/**
	 * Implement testOnDebug_standard().
	 */
	public function testOnDebug_standard() {
		// Remove the following lines when you implement this test.
		$this->assertTrue ( $this->object->OnDebug_standard ( "Test", 1, true ) );
		$this->assertTrue ( $this->object->OnDebug_standard ( true, 1, true ) );
		$this->assertTrue ( $this->object->OnDebug_standard ( false, 1, true ) );
		$this->assertTrue ( abstract_log::OnDebug_standard ( "Test", 1, true ) );
		$this->assertTrue ( $this->object->OnDebug_standard ( array (
				"Test" 
		), 1, true ) );
		$this->assertTrue ( $this->object->OnDebug_standard ( $this->object, 1, true ) );
		
		abstract_log::$logs = "";
		$this->assertTrue ( $this->object->OnDebug_standard ( "Test", 1, true ) );
		$this->assertTrue ( $this->object->OnDebug_standard ( true, 1, true ) );
		$this->assertTrue ( $this->object->OnDebug_standard ( false, 1, true ) );
		$this->assertTrue ( $this->object->OnDebug_standard ( array (
				"Test" 
		), 1, true ) );
		$this->assertTrue ( $this->object->OnDebug_standard ( $this->object, 1, true ) );
	}

	/**
	 * @covers Zorille\framework\abstract_log::affiche_ligne
	 */
	public function testAffiche_ligne() {
		$this->assertTrue ( $this->object->affiche_ligne ( true ) );
		$this->assertTrue ( $this->object->affiche_ligne ( false ) );
		abstract_log::$logs = null;
		$this->assertFalse ( $this->object->affiche_ligne ( "ligne" ) );
	}

	/**
	 * @covers Zorille\framework\abstract_log::affiche_tableau
	 */
	public function testAffiche_tableau_ArrayOfArray() {
		$tableau = array ();
		$tableau [0] = array (
				"test" 
		);
		// Remove the following lines when you implement this test.
		$this->assertTrue ( $this->object->affiche_tableau ( $tableau, "no" ) );
	}

	/**
	 * @covers Zorille\framework\abstract_log::affiche_tableau
	 */
	public function testAffiche_tableau_ArrayOfObject() {
		$tableau = array ();
		$tableau [0] = $this->object;
		// Remove the following lines when you implement this test.
		$this->assertTrue ( $this->object->affiche_tableau ( $tableau, "no" ) );
	}
}
?>
