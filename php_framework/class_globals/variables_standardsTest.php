<?php
namespace Zorille\framework;
/**
 * @ignore
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Test class for variables_standards.
 * Generated by PHPUnit on 2010-08-05 at 16:20:52.
 */
class variables_standardsTest extends MockedListeOptions {
	/**
	 * @var variables_standards
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		ob_start ();
		
		$this->object = new variables_standards ( false );
		$this->object->setListeOptions ( $this->getListeOption () );
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * Implement testPrepare_remplacement().
	 */
	public function testPrepare_remplacement_light() {
		//Test pour le coverage uniquement
		$this->getListeOption ()
			->expects ( $this->any () )
			->method ( 'verifie_option_existe' )
			->will ( $this->returnValue ( false ) );
		$this->object->setListeOptions ( $this->getListeOption () );
		
		$this->assertSame ( $this->object, $this->object->prepare_remplacement ( "123456", "20101112" ) );
		$this->assertEquals ( array (
				'{CODE_UNIQUE}' => '123456',
				'{REP_CODE_UNIQUE}' => '1234/123456',
				'{DATE}' => '20101112',
				'{YEAR}' => '2010',
				'{MONTH}' => '11',
				'{DAY}' => '12',
				'{GENDATE}' => '20101113',
				'{WDATE}' => '20101108',
				'{MDATE}' => '20101101' 
		), $this->object->getListeRemplacement () );
	}

	/**
	 * Implement testPrepare_remplacement().
	 */
	public function testPrepare_remplacement_full() {
		//Test pour le coverage uniquement
		$this->getListeOption ()
			->expects ( $this->any () )
			->method ( 'verifie_option_existe' )
			->will ( $this->returnValue ( true ) );
		$this->getListeOption ()
			->expects ( $this->any () )
			->method ( 'getOption' )
			->will ( $this->returnValue ( 'VALUE1' ) );
		$this->object->setListeOptions ( $this->getListeOption () );
		
		$this->assertSame ( $this->object, $this->object->prepare_remplacement ( "123456", "20101112" ) );
		$this->assertEquals ( array (
				'{CODE_UNIQUE}' => '123456',
				'{REP_CODE_UNIQUE}' => '1234/123456',
				'{DATE}' => '20101112',
				'{YEAR}' => '2010',
				'{MONTH}' => '11',
				'{DAY}' => '12',
				'{GENDATE}' => 'VALUE1',
				'{WDATE}' => '20101108',
				'{MDATE}' => '20101101',
				'{HOUR}' => 'VALUE1',
				'{MIN}' => 'VALUE1',
				'{SEC}' => 'VALUE1',
				'{NOMFIC}' => 'VALUE1',
				'{NOMMACHINE}' => 'VALUE1' 
		), $this->object->getListeRemplacement () );
	}

	/**
	 * Implement testRemplacement_standard().
	 */
	public function testRemplacement_standard() {
		//Test pour le coverage uniquement
		$this->object->getListeOptions ()
			->expects ( $this->any () )
			->method ( 'verifie_option_existe' )
			->will ( $this->returnValue ( true ) );
		$this->object->getListeOptions ()
			->expects ( $this->any () )
			->method ( 'getOption' )
			->will ( $this->onConsecutiveCalls ( '20101113', '18', '25', '48' ) );
		$this->object->prepare_remplacement ( "123456", "20101112" );
		
		$this->assertEquals ( "123456-20101112", $this->object->remplacement_standard ( "{CODE_UNIQUE}-{DATE}" ) );
		$this->assertEquals ( "123456", $this->object->remplacement_standard ( "{CODE_UNIQUE}" ) );
		$this->assertEquals ( "1234/123456", $this->object->remplacement_standard ( "{REP_CODE_UNIQUE}" ) );
		$this->assertEquals ( "20101112", $this->object->remplacement_standard ( "{DATE}" ) );
		$this->assertEquals ( "2010", $this->object->remplacement_standard ( "{YEAR}" ) );
		$this->assertEquals ( "11", $this->object->remplacement_standard ( "{MONTH}" ) );
		$this->assertEquals ( "12", $this->object->remplacement_standard ( "{DAY}" ) );
		$this->assertEquals ( "20101113", $this->object->remplacement_standard ( "{GENDATE}" ) );
		$this->assertEquals ( "20101108", $this->object->remplacement_standard ( "{WDATE}" ) );
		$this->assertEquals ( "20101101", $this->object->remplacement_standard ( "{MDATE}" ) );
		$this->assertEquals ( "18", $this->object->remplacement_standard ( "{HOUR}" ) );
		$this->assertEquals ( "25", $this->object->remplacement_standard ( "{MIN}" ) );
		$this->assertEquals ( "48", $this->object->remplacement_standard ( "{SEC}" ) );
	}

	/**
	 * Implement testModifie_remplacement_standard().
	 */
	public function testModifie_remplacement_standard() {
		$this->assertSame ( $this->object, $this->object->modifie_remplacement_standard ( "code_unique", "456789" ) );
		$this->assertEquals ( "456789", $this->object->remplacement_standard ( "{CODE_UNIQUE}" ) );
		$this->assertEquals ( "4567/456789", $this->object->remplacement_standard ( "{REP_CODE_UNIQUE}" ) );
		$this->assertSame ( $this->object, $this->object->modifie_remplacement_standard ( "date", "20100831" ) );
		$this->assertEquals ( "20100831", $this->object->remplacement_standard ( "{DATE}" ) );
		$this->assertEquals ( "2010", $this->object->remplacement_standard ( "{YEAR}" ) );
		$this->assertEquals ( "08", $this->object->remplacement_standard ( "{MONTH}" ) );
		$this->assertEquals ( "31", $this->object->remplacement_standard ( "{DAY}" ) );
		$this->assertEquals ( "20100901", $this->object->remplacement_standard ( "{GENDATE}" ) );
		$this->assertEquals ( "20100830", $this->object->remplacement_standard ( "{WDATE}" ) );
		$this->assertEquals ( "20100801", $this->object->remplacement_standard ( "{MDATE}" ) );
		$this->assertSame ( $this->object, $this->object->modifie_remplacement_standard ( "heure", "18" ) );
		$this->assertEquals ( "18", $this->object->remplacement_standard ( "{HOUR}" ) );
		$this->assertSame ( $this->object, $this->object->modifie_remplacement_standard ( "minute", "25" ) );
		$this->assertEquals ( "25", $this->object->remplacement_standard ( "{MIN}" ) );
		$this->assertSame ( $this->object, $this->object->modifie_remplacement_standard ( "seconde", "33" ) );
		$this->assertEquals ( "33", $this->object->remplacement_standard ( "{SEC}" ) );
		$this->assertSame ( $this->object, $this->object->modifie_remplacement_standard ( "nomfic", "FIC1" ) );
		$this->assertEquals ( "FIC1", $this->object->remplacement_standard ( "{NOMFIC}" ) );
		$this->assertSame ( $this->object, $this->object->modifie_remplacement_standard ( "nommachine", "MAC1" ) );
		$this->assertEquals ( "MAC1", $this->object->remplacement_standard ( "{NOMMACHINE}" ) );
	}
}

?>
