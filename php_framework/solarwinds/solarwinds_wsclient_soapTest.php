<?php

namespace Zorille\framework;

use Exception as Exception;
use stdClass as stdClass;
use SimpleXMLElement as SimpleXMLElement;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-04-29 at 09:07:56.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class solarwinds_wsclient_soapTest extends MockedListeOptions {
	/**
	 * @var solarwinds_wsclient_soap
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection. This method is called before a test is executed.
	 */
	protected function setUp() {
		ob_start ();
		$solarwindsDatas = $this->createMock ( 'Zorille\framework\solarwinds_datas' );
		$soap = $this->createMock ( 'Zorille\framework\soap' );
		$this->object = new solarwinds_wsclient_soap ( false, "TESTS solarwinds_wsclient_soap" );
		$this->object->setListeOptions ( $this->getListeOption () )
			->setObjetSolarwindsDatas ( $solarwindsDatas )
			->setObjetSoap ( $soap );
	}

	/**
	 * Tears down the fixture, for example, closes a network connection. This method is called after a test is executed.
	 */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * @covers Zorille\framework\solarwinds_wsclient_soap::prepare_connexion
	 */
	public function testPrepare_connexion_exception1() {
		$this->object->getObjetSolarwindsDatas ()
			->method ( 'valide_presence_solarwinds_data' )
			->will ( $this->returnValue ( false ) );
		$this->object->getObjetSolarwindsDatas ()
			->expects ( $this->any () )
			->method ( 'recupere_donnees_solarwinds_serveur' )
			->will ( $this->returnValue ( false ) );
		$this->object->getObjetSoap ()
			->expects ( $this->any () )
			->method ( 'setCacheWsdl' )
			->will ( $this->returnSelf () );
		$this->object->getObjetSoap ()
			->expects ( $this->any () )
			->method ( 'retrouve_variables_tableau' )
			->will ( $this->returnSelf () );
		$this->object->getObjetSoap ()
			->expects ( $this->any () )
			->method ( 'connect' )
			->will ( $this->returnSelf () );
		$this->expectException ( Exception::class );
		$this->expectExceptionMessage ( '(TESTS solarwinds_wsclient_soap) Aucune definition de solarwinds pour NOM1' );
		$this->object->prepare_connexion ( "NOM1" );
	}

	/**
	 * @covers Zorille\framework\solarwinds_wsclient_soap::prepare_connexion
	 */
	public function testPrepare_connexion_exception2() {
		$this->object->getObjetSolarwindsDatas ()
			->method ( 'valide_presence_solarwinds_data' )
			->will ( $this->returnValue ( array () ) );
		$this->object->getObjetSolarwindsDatas ()
			->expects ( $this->any () )
			->method ( 'recupere_donnees_solarwinds_serveur' )
			->will ( $this->returnValue ( array () ) );
		$this->object->getObjetSoap ()
			->expects ( $this->any () )
			->method ( 'setCacheWsdl' )
			->will ( $this->returnSelf () );
		$this->object->getObjetSoap ()
			->expects ( $this->any () )
			->method ( 'retrouve_variables_tableau' )
			->will ( $this->returnSelf () );
		$this->object->getObjetSoap ()
			->expects ( $this->any () )
			->method ( 'connect' )
			->will ( $this->returnSelf () );
		$this->expectException ( Exception::class );
		$this->expectExceptionMessage ( '(TESTS solarwinds_wsclient_soap) Il faut un username dans la liste des parametres solarwinds' );
		$this->object->prepare_connexion ( "NOM1" );
	}

	/**
	 * @covers Zorille\framework\solarwinds_wsclient_soap::prepare_connexion
	 */
	public function testPrepare_connexion_exception3() {
		$this->object->getObjetSolarwindsDatas ()
			->method ( 'valide_presence_solarwinds_data' )
			->will ( $this->returnValue ( array (
				"username" => "user"
		) ) );
		$this->object->getObjetSolarwindsDatas ()
			->expects ( $this->any () )
			->method ( 'recupere_donnees_solarwinds_serveur' )
			->will ( $this->returnValue ( array () ) );
		$this->object->getObjetSoap ()
			->expects ( $this->any () )
			->method ( 'setCacheWsdl' )
			->will ( $this->returnSelf () );
		$this->object->getObjetSoap ()
			->expects ( $this->any () )
			->method ( 'retrouve_variables_tableau' )
			->will ( $this->returnSelf () );
		$this->object->getObjetSoap ()
			->expects ( $this->any () )
			->method ( 'connect' )
			->will ( $this->returnSelf () );
		$this->expectException ( Exception::class );
		$this->expectExceptionMessage ( '(TESTS solarwinds_wsclient_soap) Il faut un password dans la liste des parametres solarwinds' );
		$this->object->prepare_connexion ( "NOM1" );
	}

	/**
	 * @covers Zorille\framework\solarwinds_wsclient_soap::prepare_connexion
	 */
	public function testPrepare_connexion_exception4() {
		$this->object->getObjetSolarwindsDatas ()
			->method ( 'valide_presence_solarwinds_data' )
			->will ( $this->returnValue ( array (
				"username" => "user",
				"password" => "pwd"
		) ) );
		$this->object->getObjetSolarwindsDatas ()
			->expects ( $this->any () )
			->method ( 'recupere_donnees_solarwinds_serveur' )
			->will ( $this->returnValue ( array () ) );
		$this->object->getObjetSoap ()
			->expects ( $this->any () )
			->method ( 'setCacheWsdl' )
			->will ( $this->returnSelf () );
		$this->object->getObjetSoap ()
			->expects ( $this->any () )
			->method ( 'retrouve_variables_tableau' )
			->will ( $this->returnSelf () );
		$this->object->getObjetSoap ()
			->expects ( $this->any () )
			->method ( 'connect' )
			->will ( $this->returnSelf () );
		$this->expectException ( Exception::class );
		$this->expectExceptionMessage ( '(TESTS solarwinds_wsclient_soap) Il faut une url dans la liste des parametres solarwinds' );
		$this->object->prepare_connexion ( "NOM1" );
	}

	/**
	 * @covers Zorille\framework\solarwinds_wsclient_soap::prepare_connexion
	 */
	public function testPrepare_connexion_valide() {
		$this->object->getObjetSolarwindsDatas ()
			->method ( 'valide_presence_solarwinds_data' )
			->will ( $this->returnValue ( array (
				"username" => "user",
				"password" => "pwd",
				"url" => "URL1"
		) ) );
		$this->object->getObjetSolarwindsDatas ()
			->expects ( $this->any () )
			->method ( 'recupere_donnees_solarwinds_serveur' )
			->will ( $this->returnValue ( array () ) );
		$this->object->getObjetSoap ()
			->expects ( $this->any () )
			->method ( 'setCacheWsdl', 'connect' )
			->will ( $this->returnSelf () );
		$this->object->getObjetSoap ()
			->expects ( $this->any () )
			->method ( 'setLogin' )
			->will ( $this->returnSelf () );
		$this->object->getObjetSoap ()
			->expects ( $this->any () )
			->method ( 'setPassword' )
			->will ( $this->returnSelf () );
		$this->object->getObjetSoap ()
			->expects ( $this->any () )
			->method ( 'retrouve_variables_tableau' )
			->will ( $this->returnSelf () );
		$this->assertSame ( $this->object, $this->object->prepare_connexion ( "NOM1" ) );
	}

	/**
	 * _prepareSoapRequest
	 */
	private function _prepareSoapRequest(
			$call_return) {
		$SoapClient = $this->createMock ( 'SoapClient' );
		$SoapClient->expects ( $this->any () )
			->method ( '__call' )
			->will ( $call_return );
		$soap = $this->createMock ( 'Zorille\framework\soap' );
		$soap->expects ( $this->any () )
			->method ( 'getSoapClient' )
			->will ( $this->returnValue ( $SoapClient ) );
		$this->object->setObjetSoap ( $soap );
	}

	/**
	 * @covers Zorille\framework\solarwinds_wsclient_soap::applique_requete_soap
	 */
	public function testApplique_requete_soap_dryrun() {
		$this->object->getListeOptions ()
			->method ( 'getOption' )
			->will ( $this->returnValue ( true ) );
		$this->assertFalse ( $this->object->applique_requete_soap ( "Create", array () ) );
	}

	/**
	 * @covers Zorille\framework\solarwinds_wsclient_soap::applique_requete_soap
	 */
	public function testApplique_requete_soap_vide() {
		$this->object->getListeOptions ()
			->method ( 'getOption' )
			->will ( $this->returnValue ( false ) );
		$this->_prepareSoapRequest ( $this->returnValue ( array () ) );
		$this->assertEquals ( array (), $this->object->applique_requete_soap ( "TEST", array () ) );
	}

	/**
	 * @covers Zorille\framework\solarwinds_wsclient_soap::applique_requete_soap
	 */
	public function testApplique_requete_soap() {
		$this->object->getListeOptions ()
			->method ( 'getOption' )
			->will ( $this->returnValue ( false ) );
		$stdclass = new SOAPResult ( true, '', new SOAPResultLog ( new SOAPLogMessage ( "" ) ), new SOAPResultLog ( new SOAPLogMessage ( "" ) ), new SOAPResultLog ( new SOAPLogMessage ( "" ) ) );
		$this->_prepareSoapRequest ( $this->returnValue ( $stdclass ) );
		$this->assertEquals ( $stdclass, $this->object->applique_requete_soap ( "TEST", array () ) );
	}

	/**
	 * @covers Zorille\framework\solarwinds_wsclient_soap::applique_requete_soap
	 */
	public function testApplique_requete_soap_exception() {
		$this->object->getListeOptions ()
			->method ( 'getOption' )
			->will ( $this->returnValue ( false ) );
		$this->_prepareSoapRequest ( $this->throwException ( new Exception ( 'EXCEP1' ) ) );
		$this->expectException ( Exception::class );
		$this->expectExceptionMessage ( '(TESTS solarwinds_wsclient_soap) EXCEP1' );
		$this->object->applique_requete_soap ( "TEST", array () );
	}

	/**
	 * @covers Zorille\framework\solarwinds_wsclient_soap::Read
	 */
	public function testRead_vide() {
		$this->object->getListeOptions ()
			->method ( 'getOption' )
			->will ( $this->returnValue ( false ) );
		$this->_prepareSoapRequest ( $this->returnValue ( array () ) );
		$this->assertEquals ( '', $this->object->Read () );
	}

	/**
	 * @covers Zorille\framework\solarwinds_wsclient_soap::Read
	 */
	public function testRead_valide() {
		$this->object->getListeOptions ()
			->method ( 'getOption' )
			->will ( $this->returnValue ( false ) );
		$stdclass = array (
				'result' => array (
						'messages' => array (
								'text' => 'DATAS'
						)
				)
		);
		$this->_prepareSoapRequest ( $this->returnValue ( $stdclass ) );
		$this->assertEquals ( array (
				'messages' => array (
						'text' => 'DATAS'
				)
		), $this->object->Read () );
	}

	/**
	 * @covers Zorille\framework\solarwinds_wsclient_soap::gestion_erreur
	 */
	public function testgestion_erreur_false() {
		$this->assertSame ( $this->object, $this->object->gestion_erreur ( array () ) );
	}

	/**
	 * @covers Zorille\framework\solarwinds_wsclient_soap::gestion_erreur
	 */
	public function testgestion_erreur_exception1() {
		$stdclass = new SOAPResult ( false, '', new SOAPResultLog ( new SOAPLogMessage ( "TEST ERREUR" ) ), new SOAPResultLog ( new SOAPLogMessage ( "" ) ), new SOAPResultLog ( new SOAPLogMessage ( "" ) ) );
		$this->expectException ( Exception::class );
		$this->expectExceptionMessage ( '(TESTS solarwinds_wsclient_soap) Erreur durant la requete SOAP' );
		$this->object->gestion_erreur ( $stdclass );
	}

	/**
	 * @covers Zorille\framework\solarwinds_wsclient_soap::gestion_erreur
	 */
	public function testgestion_erreur_exception2() {
		$stdclass = new SOAPResult ( false, '', new SOAPResultLog ( array (
				new SOAPLogMessage ( "TEST ERREUR" )
		) ), new SOAPResultLog ( new SOAPLogMessage ( "" ) ), new SOAPResultLog ( new SOAPLogMessage ( "" ) ) );
		$this->expectException ( Exception::class );
		$this->expectExceptionMessage ( '(TESTS solarwinds_wsclient_soap) TEST ERREUR' );
		$this->object->gestion_erreur ( $stdclass );
	}

	/**
	 * @covers Zorille\framework\solarwinds_wsclient_soap::gestion_erreur
	 */
	public function testgestion_erreur_warnings() {
		$stdclass = new SOAPResult ( true, '', new SOAPResultLog ( new SOAPLogMessage ( "" ) ), new SOAPResultLog ( array (
				new SOAPLogMessage ( "TEST WARNING" )
		) ), new SOAPResultLog ( new SOAPLogMessage ( "" ) ) );
		$this->assertSame ( $this->object, $this->object->gestion_erreur ( $stdclass ) );
	}

	private function _retourSoapTest() {
		$obj = new stdClass ();
		$obj->_ = "vm-191";
		$obj->type = "VirtualMachine";
		$runtimeState = new stdClass ();
		$runtimeState->vmDirectPathGen2Active = "";
		$runtimeState->vmDirectPathGen2InactiveReasonOther = "vmNptIncompatibleNetwork";
		$device = new stdClass ();
		$device->runtimeState = $runtimeState;
		$device->key = 4000;
		$host = new stdClass ();
		$host->_ = "host-129";
		$host->type = "HostSystem";
		$feature1 = new stdClass ();
		$feature1->key = "cpuid.SSE3";
		$feature1->value = "Bool:Min:1";
		$feature2 = new stdClass ();
		$feature2->key = "cpuid.PCLMULQDQ";
		$feature2->value = "Bool:Min:1";
		$val = new stdClass ();
		$val->device = $device;
		$val->host = $host;
		$val->connectionState = "connected";
		$val->powerState = "poweredOn";
		$val->featureRequirement = array (
				$feature1,
				$feature2
		);
		$propSet1 = new stdClass ();
		$propSet1->name = "runtime";
		$propSet1->val = $val;
		$propSet2 = new stdClass ();
		$propSet2->name = "name";
		$propSet2->val = "Cluster1";
		$objects = new stdClass ();
		$objects->obj = $obj;
		$objects->values = array (
				$propSet1,
				$propSet2
		);
		$retour = new stdClass ();
		$retour->objects = $objects;
		return $retour;
	}

	/**
	 * @covers Zorille\framework\solarwinds_wsclient_soap::convertit_donnees
	 */
	public function testconvertit_donnees_xml_object() {
		$this->assertInstanceOf ( 'Zorille\framework\xml', $this->object->convertit_donnees ( $this->_retourSoapTest (), "xml" ) );
	}

	/**
	 * @covers Zorille\framework\solarwinds_wsclient_soap::convertit_donnees
	 */
	public function testconvertit_donnees_xml_array() {
		$this->assertEquals ( array (
				'objects' => array (
						'obj' => Array (
								'_' => 'vm-191',
								'type' => 'VirtualMachine'
						),
						'values' => Array (
								'name' => Array (
										'runtime',
										'name'
								),
								'val' => Array (
										Array (
												'device' => Array (
														'runtimeState' => Array (
																'vmDirectPathGen2Active' => '',
																'vmDirectPathGen2InactiveReasonOther' => 'vmNptIncompatibleNetwork'
														),
														'key' => '4000'
												),
												'host' => Array (
														'_' => 'host-129',
														'type' => 'HostSystem'
												),
												'connectionState' => 'connected',
												'powerState' => 'poweredOn',
												'featureRequirement' => Array (
														Array (
																'cpuid.SSE3' => 'Bool:Min:1'
														),
														Array (
																'cpuid.PCLMULQDQ' => 'Bool:Min:1'
														)
												)
										),
										'Cluster1'
								)
						)
				)
		), $this->object->convertit_donnees ( $this->_retourSoapTest (), "array" ) );
	}

	/**
	 */
	public function testrenvoi_donnees_xml() {
		$xml_vm_info = new SimpleXMLElement ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?><objects/>" );
		$this->assertSame ( $this->object, $this->object->renvoi_donnees_xml ( $this->_retourSoapTest (), $xml_vm_info ) );
	}
}
