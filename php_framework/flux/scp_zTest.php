<?php
namespace Zorille\framework;
use \Exception as Exception;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-25 at 17:29:51.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class scp_zTest extends MockedListeOptions {
	/**
	 *
	 * @var scp_z
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection. This method is called before a test is executed.
	 */
	protected function setUp() {
		ob_start ();
		$this->object = new scp_z ( false, "TESTS scp_z" );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		
		$ssh2_commandes = $this ->createMock('Zorille\framework\ssh2_commandes' );
		$this->object ->setObjetSsh2Commandes ( $ssh2_commandes );
	}

	/**
	 * Tears down the fixture, for example, closes a network connection. This method is called after a test is executed.
	 */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * @covers Zorille\framework\scp_z::retrouve_scp_z_param
	 */
	public function testretrouve_scp_z_param_CLI() {
		$this->object ->getListeOptions () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->onconsecutiveCalls ( "USER", "PASS", "pubkey", "prikey", "passphrase", "ssh-dsa", "ssh_cmd", "scp_cmd" ) );
		$this ->assertSame ( $this->object, $this->object ->retrouve_scp_z_param () );
	}

	/**
	 * @covers Zorille\framework\scp_z::retrouve_scp_z_param
	 */
	public function testretrouve_scp_z_param_XML() {
		$flux_datas = $this ->createMock('Zorille\framework\flux_datas' );
		$flux_datas ->expects ( $this ->any () ) 
			->method ( 'retrouve_flux_param' ) 
			->will ( $this ->returnSelf () );
		$this->object ->setObjetFluxDatas ( $flux_datas );
		
		$this->object ->getListeOptions () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( "NOUSERNAMEZ" ) );
		$this ->assertSame ( $this->object, $this->object ->retrouve_scp_z_param () );
	}

	/**
	 * @covers Zorille\framework\scp_z::prepare_scp_z
	 */
	public function testprepare_scp_z_false() {
		$this->object ->setCliDatas ( true );
		$this ->assertFalse ( $this->object ->prepare_scp_z () );
	}

	/**
	 * @covers Zorille\framework\scp_z::prepare_scp_z
	 */
	public function testprepare_scp_z_Exception() {
		$this->object ->setMachineDistante ( "localhost_Z" );
		$flux_datas = $this ->createMock('Zorille\framework\flux_datas' );
		$flux_datas ->expects ( $this ->any () ) 
			->method ( 'valide_presence_flux_data' ) 
			->will ( $this ->returnValue ( false ) );
		$this->object ->setObjetFluxDatas ( $flux_datas );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS scp_z) localhost_Z est introuvable' );
		$this->object ->prepare_scp_z ();
	}

	/**
	 * @covers Zorille\framework\scp_z::prepare_scp_z
	 */
	public function testprepare_scp_z_key_dsa() {
		$this->object ->setMachineDistante ( "localhost" );
		$flux_datas = $this ->createMock('Zorille\framework\flux_datas' );
		$flux_datas ->expects ( $this ->any () ) 
			->method ( 'valide_presence_flux_data' ) 
			->will ( 
				$this ->returnValue ( 
							array ( 
										"host" => "HOSTNAME", 
										"username" => "USER", 
										"password" => "PASS", 
										"pubkey" => "PUBKEY", 
										"privkey" => "PRIVKEY", 
										"passphrase" => "", 
										"type_ssh_key" => "", 
										"commande_ssh" => "CMSSSH", 
										"commande_scp" => "CMSSCP" ) ) );
		$this->object ->setObjetFluxDatas ( $flux_datas );
		
		$this ->assertSame ( $this->object, $this->object ->prepare_scp_z () );
	}

	/**
	 * @covers Zorille\framework\scp_z::scp_cli
	 */
	public function testscp_cli_envoie() {
		$this->object ->setCmdScp ( "#echo" ) 
			->setUsername ( "TEST" ) 
			->setPrivkey ( "PRIVKEY" );
		$this ->assertEquals ( 0, $this->object ->scp_cli ( "envoie", "source_file", "dest_file", true, " -r " ) );
	}

	/**
	 * @covers Zorille\framework\scp_z::scp_cli
	 */
	public function testscp_cli_recupere() {
		$this->object ->setCmdScp ( "#echo" ) 
			->setUsername ( "TEST" ) 
			->setPrivkey ( "PRIVKEY" );
		$this ->assertEquals ( 0, $this->object ->scp_cli ( "recupere", "source_file", "dest_file", true, " -r " ) );
	}

	/**
	 * @covers Zorille\framework\scp_z::scp_cli
	 */
	public function testscp_cli_dryrun() {
		$this->object ->setCmdScp ( "#echo" ) 
			->setUsername ( "TEST" ) 
			->setPrivkey ( "PRIVKEY" );
		$this ->assertEquals ( 0, $this->object ->scp_cli ( "dryrun", "source_file", "dest_file", true, " -r " ) );
	}

	/**
	 * @covers Zorille\framework\scp_z::creer_scp_send_cli
	 */
	public function testcreer_scp_send_cli() {
		$this->object ->setCmdScp ( "#echo" ) 
			->setUsername ( "TEST" ) 
			->setPrivkey ( "PRIVKEY" );
		$this ->assertEquals ( "#echo -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  -i PRIVKEY SOURCE_FILE TEST@:SOURCE_FILE", $this->object ->creer_scp_send_cli ( "SOURCE_FILE" ) );
	}

	/**
	 * @covers Zorille\framework\scp_z::creer_scp_recv_cli
	 */
	public function testcreer_scp_recv_cli() {
		$this->object ->setCmdScp ( "#echo" ) 
			->setUsername ( "TEST" ) 
			->setPrivkey ( "PRIVKEY" );
		$this ->assertEquals ( "#echo -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  -i PRIVKEY TEST@:SOURCE_FILE SOURCE_FILE", $this->object ->creer_scp_recv_cli ( "SOURCE_FILE" ) );
	}

	/**
	 * @covers Zorille\framework\scp_z::applique_commande
	 */
	public function testapplique_commande_Exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS scp_z) Erreur durant la copie : ' );
		$this->object ->applique_commande ( "eho dryrun 2> /dev/null", true );
	}

	/**
	 * @covers Zorille\framework\scp_z::applique_commande
	 */
	public function testapplique_commande() {
		$this ->assertEquals ( 0, $this->object ->applique_commande ( "echo dryrun", true ) );
	}

	/**
	 * @covers Zorille\framework\scp_z::scp_php
	 */
	public function testprepare_ssh_z_Exception() {
		$this->object ->getObjetSsh2Commandes () 
			->expects ( $this ->any () ) 
			->method ( 'ssh2_scp_send' ) 
			->will ( $this ->throwException ( new Exception ( "ssh2_scp_send Error" ) ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS scp_z) Erreur durant le transfert scp' );
		$this->object ->scp_php ( "envoie", "source_file", "dest_file", true, "0644" );
	}

	/**
	 * @covers Zorille\framework\scp_z::scp_php
	 */
	public function testscp_php_envoie() {
		$this->object ->getObjetSsh2Commandes () 
			->expects ( $this ->any () ) 
			->method ( 'ssh2_scp_send' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->assertEquals ( 0, $this->object ->scp_php ( "envoie", "source_file", "dest_file", true, "0644" ) );
	}

	/**
	 * @covers Zorille\framework\scp_z::scp_php
	 */
	public function testscp_php_recupere() {
		$this->object ->getObjetSsh2Commandes () 
			->expects ( $this ->any () ) 
			->method ( 'ssh2_scp_recv' ) 
			->will ( $this ->returnValue ( false ) );
		$this ->assertEquals ( 1, $this->object ->scp_php ( "recupere", "source_file", "dest_file", true ) );
	}

	/**
	 * @covers Zorille\framework\scp_z::scp_php
	 */
	public function testscp_php_dryrun() {
		$this ->assertEquals ( 0, $this->object ->scp_php ( "dryrun", "source_file", "dest_file", true ) );
	}

	/**
	 * @covers Zorille\framework\scp_z::scp
	 */
	public function testscp_type_php_dryrun() {
		$this->object ->setScpType ( "php" );
		$this ->assertEquals ( 0, $this->object ->scp ( "dryrun", "source_file", "dest_file", true, "0644" ) );
	}

	/**
	 * @covers Zorille\framework\scp_z::scp
	 */
	public function testscp_type_cli_dryrun() {
		$this->object ->setScpType ( "cli" );
		$this ->assertEquals ( 0, $this->object ->scp ( "dryrun", "source_file", "dest_file", true, " -r " ) );
	}

	/**
	 * @covers Zorille\framework\scp_z::retrouve_Type
	 */
	public function testretrouve_Type_default() {
		$this ->assertEquals ( "cli", $this->object ->retrouve_Type ( "Another Value" ) );
	}

	/**
	 * @covers Zorille\framework\scp_z::retrouve_Type
	 */
	public function testretrouve_Type_cli() {
		$this ->assertEquals ( "cli", $this->object ->retrouve_Type ( "CLI" ) );
	}

	/**
	 * @covers Zorille\framework\scp_z::retrouve_Type
	 */
	public function testretrouve_Type_php() {
		$this ->assertEquals ( "php", $this->object ->retrouve_Type ( "PHP" ) );
	}
}
