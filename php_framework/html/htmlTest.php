<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-26 at 11:14:22.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class htmlTest extends MockedListeOptions {
	/**
     * @var html
     */
	protected $object;
	protected $fichier = "";

	public static function tearDownAfterClass() {
		system ( "rm -f /tmp/html_test*", $retour );
	}

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = new html ( "CONTENT", "DESCRIPTION", "KEYWORD", false, 'TESTS html' );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers html::titre
     */
	public function testTitre() {
		$this->assertSame ( $this->object, $this->object->titre ( "TITRE" ) );
		$this->assertEquals ( "<TITLE>TITRE</TITLE>\n", $this->object->getHTMLEntete () );
	}

	/**
     * @covers html::creer_liste_variable
     */
	public function testCreer_liste_variable_false() {
		$this->assertFalse ( $this->object->creer_liste_variable ( array (
				"DATA" 
		) ) );
	}

	/**
	 * @covers html::creer_liste_variable
	 */
	public function testCreer_liste_variable_valide() {
		$this->assertEquals ( "?VAR1=VALUE1&VAR2=VALUE2", $this->object->creer_liste_variable ( array (
				"VAR1",
				"VALUE1",
				"VAR2",
				"VALUE2" 
		) ) );
	}

	/**
     * @covers html::creer_lienHTML
     */
	public function testCreer_lienHTML_defaut() {
		$this->assertFalse ( $this->object->creer_lienHTML ( "", "" ) );
	}

	/**
	 * @covers html::creer_lienHTML
	 */
	public function testCreer_lienHTML_sansVariables() {
		$this->assertEquals ( '<A HREF="FILE.PHP" id="ID"  >TEXTE LIEN</A>', $this->object->creer_lienHTML ( "FILE.PHP", "TEXTE LIEN", "", "", "", "ID" ) );
	}

	/**
	 * @covers html::creer_lienHTML
	 */
	public function testCreer_lienHTML_avecVariables() {
		$this->assertEquals ( '<A HREF="FILE.PHP?VAR1=VALUE1&VAR2=VALUE2"   >TEXTE LIEN</A>', $this->object->creer_lienHTML ( "FILE.PHP", "TEXTE LIEN", array (
				"VAR1",
				"VALUE1",
				"VAR2",
				"VALUE2" 
		) ) );
	}

	/**
     * @covers html::input_form
     */
	public function testInput_form() {
		$this->assertEquals ( "<input type=\"TYPE\" name=\"NOM\" id=\"NOM\" OPTION>\n", $this->object->input_form ( "NOM", "TYPE", "OPTION" ) );
	}

	/**
	 * @covers html::gere_option_select
	 */
	public function testgere_option_select_defaut() {
		$datas = array (
				"DATA1",
				"DATA2" 
		);
		$i = 0;
		$this->assertEquals ( "          <option value=\"DATA1\" >DATA2</option>\n", $this->object->gere_option_select ( $datas, $i, "" ) );
		$this->assertEquals ( 1, $i );
	}

	/**
	 * @covers html::gere_option_select
	 */
	public function testgere_option_select_array() {
		$datas = array (
				"DATA1",
				array (
						"option" => "OPTIONS",
						"texte" => "DATA2" 
				) 
		);
		$i = 0;
		$this->assertEquals ( "          <option value=\"DATA1\" SELECTED OPTIONS >DATA2</option>\n", $this->object->gere_option_select ( $datas, $i, "SELECTED" ) );
		$this->assertEquals ( 1, $i );
	}

	/**
	 * @covers html::valide_selected
	 */
	public function testvalide_selected_defaut() {
		$this->assertEquals ( "", $this->object->valide_selected ( "SEARCHED", array (
				"VALUE" 
		) ) );
	}

	/**
	 * @covers html::valide_selected
	 */
	public function testvalide_selected_valide() {
		$this->assertEquals ( "SELECTED", $this->object->valide_selected ( "SEARCHED", array (
				"SEARCHED" 
		) ) );
	}

	/**
     * @covers html::select_form
     */
	public function testSelect_form_false() {
		$this->assertFalse ( $this->object->select_form ( "NOM", array (
				"DATA" 
		) ) );
	}

	/**
	 * @covers html::select_form
	 */
	public function testSelect_form_data() {
		$this->assertEquals ( "<select name=\"NOM\" id=\"NOM\" >\n          <option value=\"DATA1\"  OPTIONS >DATA2</option>\n</select>\n", $this->object->select_form ( "NOM", array (
				"DATA1",
				array (
						"option" => "OPTIONS",
						"texte" => "DATA2" 
				) 
		) ) );
	}

	/**
     * @covers html::textearea_form
     */
	public function testTextearea_form() {
		$this->assertEquals ( "<textarea name=\"NOM\" id=\"NOM\" OPTION>VALUE</textarea>\n", $this->object->textearea_form ( "NOM", "VALUE", "OPTION" ) );
	}

	/**
     * @covers html::texte2html
     */
	public function testTexte2html() {
		$this->assertEquals ( "texte encours<br> avec des donnees", $this->object->texte2html ( "texte encours\n avec des donnees" ) );
	}

	/**
     * @covers html::creer_photo
     */
	public function testCreer_photo() {
		$this->assertEquals ( "<IMG src=PHOTO alt=photo >", $this->object->creer_photo ( "PHOTO" ) );
	}

	/**
     * @covers html::creer_titre
     */
	public function testCreer_titre() {
		$this->assertEquals ( "<table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\">\n <TR >\n  <td >TITRE</td>\n </TR>\n</table>\n", $this->object->creer_titre ( "TITRE" ) );
	}

	/**
     * @covers html::creer_entete_tableau
     */
	public function testCreer_entete_tableau() {
		$this->assertEquals ( "<table OPTION>\n", $this->object->creer_entete_tableau ( "OPTION" ) );
	}

	/**
     * @covers html::creer_end_tableau
     */
	public function testCreer_end_tableau() {
		$this->assertEquals ( "</table>\n", $this->object->creer_end_tableau () );
	}

	/**
     * @covers html::creer_ligne_tableau_sans_td
     */
	public function testCreer_ligne_tableau_sans_td_defaut() {
		$this->assertEquals ( " <TR TR_OPTION>\nVAR </TR>\n\n", $this->object->creer_ligne_tableau_sans_td ( "VAR", "TR_OPTION", 0 ) );
	}

	/**
	 * @covers html::creer_ligne_tableau_sans_td
	 */
	public function testCreer_ligne_tableau_sans_td_array0() {
		$this->assertEquals ( " <TR TR_OPTION>\nVAR1\nVAR2\n </TR>\n", $this->object->creer_ligne_tableau_sans_td ( array (
				"VAR1",
				"VAR2" 
		), "TR_OPTION", 0 ) );
	}

	/**
	 * @covers html::creer_ligne_tableau_sans_td
	 */
	public function testCreer_ligne_tableau_sans_td_array1() {
		$this->assertEquals ( " <TR TR_OPTION>\nVAR1</TR>\n <TR TR_OPTION>\nVAR2</TR>\n", $this->object->creer_ligne_tableau_sans_td ( array (
				"VAR1",
				"VAR2" 
		), "TR_OPTION", 1 ) );
	}

	/**
     * @covers html::creer_ligne_tableau
     */
	public function testCreer_ligne_tableau_defaut() {
		$this->assertEquals ( " <TR TR_OPTION>\n  <td TD_OPTION>VAR</td>\n </TR>\n", $this->object->creer_ligne_tableau ( "VAR", "TR_OPTION", "TD_OPTION" ) );
	}

	/**
	 * @covers html::creer_ligne_tableau
	 */
	public function testCreer_ligne_tableau_array() {
		$this->assertEquals ( " <TR TR_OPTION>\n  <td TD_OPTION>VAR1</td>\n </TR>\n <TR TR_OPTION>\n  <td TD_OPTION>VAR2</td>\n </TR>\n", $this->object->creer_ligne_tableau ( array (
				"VAR1",
				"VAR2" 
		), "TR_OPTION", "TD_OPTION" ) );
	}

	/**
     * @covers html::creer_case_tableau
     */
	public function testCreer_case_tableau_defaut() {
		$this->assertEquals ( "  <td TD_OPTION>VAR</td>\n", $this->object->creer_case_tableau ( "VAR", "TD_OPTION" ) );
	}

	/**
	 * @covers html::creer_case_tableau
	 */
	public function testCreer_case_tableau_array() {
		$this->assertEquals ( "  <td TD_OPTION>VAR1</td>\n  <td TD_OPTION>VAR2</td>\n", $this->object->creer_case_tableau ( array (
				"VAR1",
				"VAR2" 
		), "TD_OPTION" ) );
	}

	/**
     * @covers html::creer_titre_tableau
     */
	public function testCreer_titre_tableau() {
		$this->assertEquals ( " <TR TR_OPTION>\n  <th TH_OPTION>VAR</th>\n </TR>\n", $this->object->creer_titre_tableau ( "VAR", "TR_OPTION", "TH_OPTION" ) );
	}

	/**
     * @covers html::creer_case_titre_tableau
     */
	public function testCreer_case_titre_tableau_defaut() {
		$this->assertEquals ( "  <th TH_OPTION>VAR</th>\n", $this->object->creer_case_titre_tableau ( "VAR", "TH_OPTION" ) );
	}

	/**
	 * @covers html::creer_case_titre_tableau
	 */
	public function testCreer_case_titre_tableau_array() {
		$this->assertEquals ( "  <th TH_OPTION>VAR1</th>\n  <th TH_OPTION>VAR2</th>\n", $this->object->creer_case_titre_tableau ( array (
				"VAR1",
				"VAR2" 
		), "TH_OPTION" ) );
	}

	/**
     * @covers html::creer_tableau
     */
	public function testCreer_tableau() {
		$this->assertEquals ( "<table TABLE_OPTION>\n <TR TR_OPTION>\n  <td TD_OPTION>VAR</td>\n </TR>\n</table>\n", $this->object->creer_tableau ( "VAR", "TABLE_OPTION", "TR_OPTION", "TD_OPTION" ) );
	}

	/**
     * @covers html::creer_div
     */
	public function testCreer_div_defaut() {
		$this->assertEquals ( "<div  >\nVAR\n</div>\n", $this->object->creer_div ( "VAR" ) );
	}

	/**
	 * @covers html::creer_div
	 */
	public function testCreer_div_array() {
		$this->assertEquals ( "<div id=\"NAME\" OPTION>\nVAR1<div id=\"NAME\" OPTION>\nVAR2", $this->object->creer_div ( array (
				"VAR1",
				"VAR2" 
		), "NAME", "OPTION", false ) );
	}

	/**
     * @covers html::creer_span
     */
	public function testCreer_span_defaut() {
		$this->assertEquals ( "<span  >\nVAR\n</span>\n", $this->object->creer_span ( "VAR" ) );
	}

	/**
	 * @covers html::creer_span
	 */
	public function testcreer_span_array() {
		$this->assertEquals ( "<span id=\"NAME\" OPTION>\nVAR1<span id=\"NAME\" OPTION>\nVAR2", $this->object->creer_span ( array (
				"VAR1",
				"VAR2" 
		), "NAME", "OPTION", false ) );
	}

	/**
     * @covers html::creer_form
     */
	public function testCreer_form_defaut() {
		$this->assertEquals ( "<form  method=\"post\" action=\"\" >\nVAR\n</form>\n", $this->object->creer_form ( "VAR" ) );
	}

	/**
	 * @covers html::creer_form
	 */
	public function testCreer_form_array() {
		$this->assertEquals ( "<form id=\"NAME\" method=\"GET\" action=\"ACTION\" OPTION>\nVAR1<form id=\"NAME\" method=\"GET\" action=\"ACTION\" OPTION>\nVAR2", $this->object->creer_form ( array (
				"VAR1",
				"VAR2" 
		), "NAME", "GET", "ACTION", "OPTION", false ) );
	}

	/**
     * @covers html::importer_fichier_dans_entete
     */
	public function testImporter_fichier_dans_entete() {
		$datas = "TEXTE\n";
		$this->fichier = "/tmp/html_test" . getmypid () . ".txt";
		system ( "echo '" . $datas . "' > " . $this->fichier, $retour );
		
		$this->assertSame ( $this->object, $this->object->importer_fichier_dans_entete ( $this->fichier ) );
		$this->assertEquals ( "\nTEXTE\n\n\n\n\n", $this->object->getHTMLEntete () );
	}

	/**
     * @covers html::afficher_page_html
     */
	public function testAfficher_page_html() {
		$this->assertSame ( $this->object, $this->object->afficher_page_html () );
	}

	/**
     * @covers html::afficher_json
     */
	public function testAfficher_json() {
		$this->assertSame ( $this->object, $this->object->afficher_json () );
	}

	/**
     * @covers html::construit_page_html
     */
	public function testConstruit_page_html() {
		$this->assertContains ( "!DOCTYPE html PUBLIC ", $this->object->construit_page_html () );
	}
}
