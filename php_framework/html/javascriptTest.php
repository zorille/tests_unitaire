<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-26 at 11:14:22.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class javascriptTest extends MockedListeOptions {
	/**
     * @var javascript
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = new javascript ( false, "TESTS javascript" );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers javascript::template_javascript
     */
	public function testTemplate_javascript() {
		$this->assertEquals ( "<SCRIPT language=\"JavaScript\" type=\"text/javascript\">\n<!--\nCODE_JS//-->\n</SCRIPT>\n\n", $this->object->template_javascript ( "CODE_JS" ) );
	}

	/**
     * @covers javascript::affiche_boutton_retour
     */
	public function testAffiche_boutton_retour() {
		$this->assertEquals ( "<center><script=\"Javascript\"><form><input type=reset value=\"Retour\"  onClick=\"history.go(-1)\"></form></script></center>", $this->object->affiche_boutton_retour ( 1 ) );
	}

	/**
     * @covers javascript::affiche_lien_html
     */
	public function testAffiche_lien_html() {
		$this->assertEquals ( "<SCRIPT language=\"JavaScript\" type=\"text/javascript\">\n<!--\nfunction go(form) {\nvaleur=form.VAR.options[form.VAR.selectedIndex].value\nself.location = \"EXECVAR=\"+valeur\n}\n//-->\n</SCRIPT>\n\n", $this->object->affiche_lien_html ( "VAR", "EXEC" ) );
	}

	/**
     * @covers javascript::affiche_lien_html_multi_vars
     */
	public function testAffiche_lien_html_multi_vars_defaut() {
		$this->assertEquals ( 0, $this->object->affiche_lien_html_multi_vars ( array () ) );
	}

	/**
	 * @covers javascript::affiche_lien_html_multi_vars
	 */
	public function testAffiche_lien_html_multi_vars_array() {
		$this->assertEquals ( "<SCRIPT language=\"JavaScript\" type=\"text/javascript\">\n<!--\nfunction go(form) {\nself.location = \"index.php?VAR1=\"+form.VAR2.options[form.VAR2.selectedIndex].value\n}\n//-->\n</SCRIPT>\n\n", $this->object->affiche_lien_html_multi_vars ( array (
				"VAR1",
				"VAR2" 
		) ) );
	}

	/**
     * @covers javascript::javascript_fonction_go
     */
	public function testJavascript_fonction_go_defaut() {
		$this->assertEquals ( "<SCRIPT language=\"JavaScript\" type=\"text/javascript\">\n<!--\nfunction go(form) {\nLOC=form.SELECT.options[form.SELECT.selectedIndex].value \n }\n//-->\n</SCRIPT>\n\n", $this->object->javascript_fonction_go ( "LOC","SELECT" ) );
	}
	
	/**
	 * @covers javascript::javascript_fonction_go
	 */
	public function testJavascript_fonction_go_with_option() {
		$this->assertEquals ( "<SCRIPT language=\"JavaScript\" type=\"text/javascript\">\n<!--\nfunction go(form) {\nLOC=\"option\"+form.SELECT.options[form.SELECT.selectedIndex].value \n }\n//-->\n</SCRIPT>\n\n", $this->object->javascript_fonction_go ( "LOC","SELECT","option" ) );
	}

	/**
     * @covers javascript::error
     */
	public function testError() {
		$this->assertEquals ( "<center><script=\"Javascript\"><form><input type=reset value=\"Retour\"  onClick=\"history.go(-2)\"></form></script></center></body></HTML>", $this->object->error ( 2 ) );
	}

	/**
     * @covers javascript::reload
     */
	public function testReload() {
		$this->assertEquals ( "<SCRIPT language=\"JavaScript\" type=\"text/javascript\">\n<!--\ndocument.location.replace('LIEN')\n//-->\n</SCRIPT>\n\n", $this->object->reload ( "LIEN" ) );
	}

	/**
     * @covers javascript::reload_frame
     */
	public function testReload_frame() {
		$this->assertEquals ( "self.parent.frames.FRAME.location.reload()", $this->object->reload_frame ( "FRAME" ) );
	}

	/**
     * @covers javascript::jq_ready
     */
	public function testJq_ready() {
		$this->assertEquals ( "$(document).ready(function() {\n					CODE\n			});\n			", $this->object->jq_ready ( "CODE" ) );
	}

	/**
     * @covers javascript::jq_load
     */
	public function testJq_load_1() {
		$this->assertContains ( "$('#DIV_DEST').load('FICHIER_DEST','');$(document).ready(function() {", $this->object->jq_load ( "DIV_DEST","FICHIER_DEST" ) );
	}
	
	/**
	 * @covers javascript::jq_load
	 */
	public function testJq_load_2() {
		$this->assertContains ( "$('#DIV_DEST').load('FICHIER_DEST','ARGS');$(document).ready(function() {", $this->object->jq_load ( "DIV_DEST","FICHIER_DEST","","ARGS" ) );
	}
	
	/**
	 * @covers javascript::jq_load
	 */
	public function testJq_load_3() {
		$this->assertContains ( "$('#DIV_DEST').load('FICHIER_DEST',$('#FORM').serialize());$(document).ready(function() {", $this->object->jq_load ( "DIV_DEST","FICHIER_DEST","FORM" ) );
	}
	
	/**
	 * @covers javascript::jq_load
	 */
	public function testJq_load_4() {
		$this->assertContains ( "$('#DIV_DEST').load('FICHIER_DEST',serialize() + '&ARG');$(document).ready(function() {", $this->object->jq_load ( "DIV_DEST","FICHIER_DEST","serialize()","ARG" ) );
	}

	/**
     * @covers javascript::jq_change
     */
	public function testJq_change() {
		$this->assertEquals ( "$('DIV').change(function() {\n					CODE\n			});", $this->object->jq_change ( "DIV", "CODE" ) );
	}

	/**
     * @covers javascript::jq_click
     */
	public function testJq_click() {
		$this->assertEquals ( "$('DIV').click(function() {\n					CODE\n			});", $this->object->jq_click ( "DIV", "CODE" ) );
	}

	/**
     * @covers javascript::jq_submit
     */
	public function testJq_submit() {
		$this->assertEquals ( "$('DIV').submit(function() {\n					CODE\n			});", $this->object->jq_submit ( "DIV", "CODE" ) );
	}

	/**
     * @covers javascript::jq_toggle_view_div
     */
	public function testJq_toggle_view_div() {
		$this->assertEquals ( "$('DIV').toggle(CODE);", $this->object->jq_toggle_view_div ( "DIV", "CODE" ) );
	}

	/**
     * @covers javascript::jq_clean_div
     */
	public function testJq_clean_div() {
		$this->assertEquals ( "$('#DIV').html('');\n", $this->object->jq_clean_div ( "DIV" ) );
	}

	/**
     * @covers javascript::jq_active_change
     */
	public function testJq_active_change() {
		$this->assertContains ( "$('#BOX').change();", $this->object->jq_active_change ( "BOX" ) );
	}

	/**
     * @covers javascript::jq_exec_change
     */
	public function testJq_exec_change() {
		$this->assertContains ( "$('#BOX2').change();", $this->object->jq_exec_change ( "BOX2" ) );
	}

	/**
     * @covers javascript::prepare_curseur
     */
	public function testPrepare_curseur() {
		$this->assertEquals ( "document.body.style.cursor='STYLE';", $this->object->prepare_curseur ( "STYLE" ) );
	}

	/**
     * @covers javascript::setCurseur
     */
	public function testSetCurseur() {
		$this->assertContains ( "$(document).ready(function() {", $this->object->setCurseur ( "STYLE" ) );
	}
}
