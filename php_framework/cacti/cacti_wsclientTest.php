<?php
namespace Zorille\framework;
use \Exception as Exception;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-25 at 16:53:15.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class cacti_wsclientTest extends MockedListeOptions {
	/**
     * @var cacti_wsclient
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		
		$utilisateurs = $this ->createMock('Zorille\framework\utilisateurs' );
		$gestion_connexion_url = $this ->createMock('Zorille\framework\gestion_connexion_url' );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getObjetUtilisateurs' ) 
			->will ( $this ->returnValue ( $utilisateurs ) );
		
		$cacti_datas = $this ->createMock('Zorille\framework\cacti_datas' );
		$curl = $this ->createMock('Zorille\framework\curl' );
		$curl ->expects ( $this ->any () )
		->method ( 'setUserPasswd', 'setHttpHAuth' )
		->will ( $this ->returnSelf () );
		
		$this->object = new cacti_wsclient ( false, "TEST cacti_wsclient" );
		$this->object ->setListeOptions ( $this ->getListeOption () ) 
			->setGestionConnexionUrl ( $gestion_connexion_url ) 
			->setObjetCactiDatas ( $cacti_datas ) 
			->setObjetCurl ( $curl );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers Zorille\framework\cacti_wsclient::prepare_connexion
     */
	public function testPrepare_connexion_exception() {
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'retrouve_connexion_params', 'prepare_prepend_url' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'getPrependUrl' ) 
			->will ( $this ->returnValue ( "http://localhost:80" ) );
		$this->object ->getObjetCactiDatas () 
			->method ( 'valide_presence_cacti_data' ) 
			->will ( $this ->returnValue ( false ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TEST cacti_wsclient) Aucune definition de cacti pour NOM1' );
		$this->object ->prepare_connexion ( "NOM1" );
	}

	/**
	 * @covers Zorille\framework\cacti_wsclient::prepare_connexion
	 */
	public function testPrepare_connexion_valide() {
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'retrouve_connexion_params', 'prepare_prepend_url' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'getPrependUrl' ) 
			->will ( $this ->returnValue ( "http://localhost:80" ) );
		$this->object ->getObjetCactiDatas () 
			->method ( 'valide_presence_cacti_data' ) 
			->will ( $this ->returnValue ( array () ) );
		
		$this ->assertSame ( $this->object, $this->object ->prepare_connexion ( "NOM1" ) );
	}

	/**
     * @covers Zorille\framework\cacti_wsclient::appel_listeDevices
     */
	public function testAppel_listeDevices_exception1() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TEST cacti_wsclient) Il faut des parametres pour cette appel au Webservice' );
		$this->object ->appel_listeDevices ();
	}

	/**
	 * @covers Zorille\framework\cacti_wsclient::appel_listeDevices
	 */
	public function testAppel_listeDevices_exception2() {
		$this->object ->setParams ( array ( 
				"PARAM1" => "value1", 
				"PARAM2" => "value2" ) );
		$this ->assertEquals ( null, $this->object ->appel_listeDevices () );
	}

	/**
     * @covers Zorille\framework\cacti_wsclient::appel_ajouteDevice
     */
	public function testAppel_ajouteDevice_exception1() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TEST cacti_wsclient) Il faut des parametres pour cette appel au Webservice' );
		$this->object ->appel_ajouteDevice ();
	}

	/**
	 * @covers Zorille\framework\cacti_wsclient::appel_ajouteDevice
	 */
	public function testAppel_ajouteDevice_exception2() {
		$this->object ->setParams ( array ( 
				"PARAM1" => "value1", 
				"PARAM2" => "value2" ) );
		$this ->assertEquals ( null, $this->object ->appel_ajouteDevice () );
	}

	/**
     * @covers Zorille\framework\cacti_wsclient::appel_udateDevice
     */
	public function testAppel_udateDevice_exception1() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TEST cacti_wsclient) Il faut des parametres pour cette appel au Webservice' );
		$this->object ->appel_udateDevice ();
	}

	/**
	 * @covers Zorille\framework\cacti_wsclient::appel_udateDevice
	 */
	public function testAppel_udateDevice_exception2() {
		$this->object ->setParams ( array ( 
				"PARAM1" => "value1", 
				"PARAM2" => "value2" ) );
		$this ->assertEquals ( null, $this->object ->appel_udateDevice () );
	}

	/**
     * @covers Zorille\framework\cacti_wsclient::appel_supprimeDevice
     */
	public function testAppel_supprimeDevice_exception1() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TEST cacti_wsclient) Il faut des parametres pour cette appel au Webservice' );
		$this->object ->appel_supprimeDevice ();
	}

	/**
	 * @covers Zorille\framework\cacti_wsclient::appel_supprimeDevice
	 */
	public function testAppel_supprimeDevice_exception2() {
		$this->object ->setParams ( array ( 
				"PARAM1" => "value1", 
				"PARAM2" => "value2" ) );
		$this ->assertEquals ( null, $this->object ->appel_supprimeDevice () );
	}
}
