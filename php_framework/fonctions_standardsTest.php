<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-25 at 17:11:46.
 */
if (! defined('__DOCUMENT_ROOT__')) {
    require_once $_SERVER["PWD"] . '/prepare.php';
}

class fonctions_standardsTest extends MockedListeOptions
{

    /**
     *
     * @var fonctions_standards
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        ob_start();
        $this->object = new fonctions_standards(false, "TESTS zabbix_action");
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        ob_end_clean();
    }

    /**
     * @covers fonctions_standards::creer_report_path
     */
    public function testCreer_report_path_defaut()
    {
        $this->getListeOption()
            ->expects($this->any())
            ->method('verifie_option_existe')
            ->will($this->returnValue(false));
        $this->assertEquals("/tmp", $this->object->creer_report_path($this->getListeOption()));
    }

    /**
     * @covers fonctions_standards::creer_report_path
     */
    public function testCreer_report_path_Valeur()
    {
        $this->getListeOption()
            ->expects($this->any())
            ->method('verifie_option_existe')
            ->will($this->returnValue(true));
        $this->getListeOption()
            ->expects($this->any())
            ->method('getOption')
            ->will($this->returnValue("DOSSIER"));
        $this->assertEquals("DOSSIER", $this->object->creer_report_path($this->getListeOption()));
    }

    /**
     * @covers fonctions_standards::renvoi_taille_octet
     */
    public function testrenvoi_taille_octet_Defaut()
    {
        $this->getListeOption()
            ->expects($this->any())
            ->method('verifie_option_existe')
            ->will($this->returnValue(false));
        $this->assertEquals(209715200, $this->object->renvoi_taille_octet($this->getListeOption()));
    }

    /**
     * @covers fonctions_standards::renvoi_taille_octet
     */
    public function testrenvoi_taille_octet_Valeur()
    {
        $this->getListeOption()
            ->expects($this->any())
            ->method('verifie_option_existe')
            ->will($this->returnValue(true));
        $this->getListeOption()
            ->expects($this->any())
            ->method('getOption')
            ->will($this->returnValue(100019185));
        $this->assertEquals(100019185, $this->object->renvoi_taille_octet($this->getListeOption()));
    }

    /**
     * @covers fonctions_standards::renvoi_taille_octet
     */
    public function testrenvoi_taille_octet_ValeurKo()
    {
        $this->getListeOption()
            ->expects($this->any())
            ->method('verifie_option_existe')
            ->will($this->returnValue(true));
        $this->getListeOption()
            ->expects($this->any())
            ->method('getOption')
            ->will($this->returnValue('100019185 ko'));
        $this->assertEquals(97674.0, $this->object->renvoi_taille_octet($this->getListeOption()));
    }

    /**
     * @covers fonctions_standards::renvoi_coef_octet
     */
    public function testrenvoi_coef_octet()
    {
        $this->assertEquals(1, $this->object->renvoi_coef_octet('o'));
        $this->assertEquals(1024, $this->object->renvoi_coef_octet('ko'));
        $this->assertEquals(1048576, $this->object->renvoi_coef_octet('Mo'));
        $this->assertEquals(1073741824, $this->object->renvoi_coef_octet('Go'));
        $this->assertEquals(1099511627776, $this->object->renvoi_coef_octet('To'));
    }

    /**
     * @covers fonctions_standards::creer_nom_fichier
     */
    public function testCreer_nom_fichier_Defaut()
    {
        $this->getListeOption()
            ->expects($this->any())
            ->method('verifie_option_existe')
            ->will($this->returnValue(false));
        $this->assertEquals('', $this->object->creer_nom_fichier($this->getListeOption()));
    }

    /**
     * @covers fonctions_standards::creer_nom_fichier
     */
    public function testCreer_nom_fichier_NomForce()
    {
        $this->getListeOption()
            ->expects($this->any())
            ->method('verifie_option_existe')
            ->will($this->returnValue(false));
        $this->assertEquals('./NOM1', $this->object->creer_nom_fichier($this->getListeOption(), false, "NOM1"));
    }

    /**
     * @covers fonctions_standards::creer_nom_fichier
     */
    public function testCreer_nom_fichier_ListeOption()
    {
        $this->getListeOption()
            ->expects($this->any())
            ->method('verifie_option_existe')
            ->will($this->returnValue(true));
        $this->getListeOption()
            ->expects($this->any())
            ->method('getOption')
            ->will($this->onConsecutiveCalls('NOM2', '.EXT1', "/tmp"));
        $this->assertEquals('/tmp/NOM2.EXT1', $this->object->creer_nom_fichier($this->getListeOption()));
    }

    /**
     * @covers fonctions_standards::trouve_nom_fichier
     */
    public function testTrouve_nom_fichierCLI()
    {
        $this->getListeOption()
            ->expects($this->any())
            ->method('verifie_option_existe')
            ->will($this->returnValue(true));
        $this->getListeOption()
            ->expects($this->any())
            ->method('getOption')
            ->will($this->returnValue("NOM2"));
        $nom_fichier = "";
        $this->assertSame($this->object, $this->object->trouve_nom_fichier($this->getListeOption(), $nom_fichier));
        $this->assertEquals('NOM2', $nom_fichier);
    }

    /**
     * @covers fonctions_standards::trouve_nom_fichier
     */
    public function testTrouve_nom_fichierXML()
    {
        $this->getListeOption()
            ->expects($this->any())
            ->method('verifie_option_existe')
            ->will($this->onConsecutiveCalls(false, true));
        $this->getListeOption()
            ->expects($this->any())
            ->method('getOption')
            ->will($this->returnValue("NOM3"));
        $nom_fichier = "";
        $this->assertSame($this->object, $this->object->trouve_nom_fichier($this->getListeOption(), $nom_fichier));
        $this->assertEquals('NOM3', $nom_fichier);
    }

    /**
     * @covers fonctions_standards::trouve_nom_fichier
     */
    public function testTrouve_nom_fichierDefaut()
    {
        $this->getListeOption()
            ->expects($this->any())
            ->method('verifie_option_existe')
            ->will($this->returnValue(false));
        $nom_fichier = "non";
        $this->assertSame($this->object, $this->object->trouve_nom_fichier($this->getListeOption(), $nom_fichier));
        $this->assertFalse($nom_fichier);
    }

    /**
     * @covers fonctions_standards::trouve_extension_fichier
     */
    public function testTrouve_extension_fichierCLI()
    {
        $this->getListeOption()
            ->expects($this->any())
            ->method('verifie_option_existe')
            ->will($this->returnValue(true));
        $this->getListeOption()
            ->expects($this->any())
            ->method('getOption')
            ->will($this->returnValue(".EXT2"));
        $nom_fichier = "NOM4";
        $this->assertSame($this->object, $this->object->trouve_extension_fichier($this->getListeOption(), $nom_fichier));
        $this->assertEquals('NOM4.EXT2', $nom_fichier);
    }

    /**
     * @covers fonctions_standards::trouve_extension_fichier
     */
    public function testTrouve_extension_fichierXML()
    {
        $this->getListeOption()
            ->expects($this->any())
            ->method('verifie_option_existe')
            ->will($this->onConsecutiveCalls(false, true));
        $this->getListeOption()
            ->expects($this->any())
            ->method('getOption')
            ->will($this->returnValue(".EXT3"));
        $nom_fichier = "NOM5";
        $this->assertSame($this->object, $this->object->trouve_extension_fichier($this->getListeOption(), $nom_fichier));
        $this->assertEquals('NOM5.EXT3', $nom_fichier);
    }

    /**
     * @covers fonctions_standards::trouve_dossier_fichier
     */
    public function testTrouve_dossier_fichierCLI()
    {
        $this->getListeOption()
            ->expects($this->any())
            ->method('verifie_option_existe')
            ->will($this->returnValue(true));
        $this->getListeOption()
            ->expects($this->any())
            ->method('getOption')
            ->will($this->returnValue("/DIR1"));
        $nom_fichier = "NOM";
        $dossier = "";
        $this->assertSame($this->object, $this->object->trouve_dossier_fichier($this->getListeOption(), $dossier, $nom_fichier));
        $this->assertEquals('/DIR1/', $dossier);
    }

    /**
     * @covers fonctions_standards::trouve_dossier_fichier
     */
    public function testTrouve_dossier_fichierXML()
    {
        $this->getListeOption()
            ->expects($this->any())
            ->method('verifie_option_existe')
            ->will($this->onConsecutiveCalls(false, true));
        $this->getListeOption()
            ->expects($this->any())
            ->method('getOption')
            ->will($this->returnValue("/DIR2"));
        $nom_fichier = "NOM";
        $dossier = "";
        $this->assertSame($this->object, $this->object->trouve_dossier_fichier($this->getListeOption(), $dossier, $nom_fichier));
        $this->assertEquals('/DIR2/', $dossier);
    }

    /**
     * @covers fonctions_standards::trouve_dossier_fichier
     */
    public function testTrouve_dossier_fichierXMLrep_scripts()
    {
        $this->getListeOption()
            ->expects($this->any())
            ->method('verifie_option_existe')
            ->will($this->onConsecutiveCalls(false, false, true));
        $this->getListeOption()
            ->expects($this->any())
            ->method('getOption')
            ->will($this->returnValue("/DIR3"));
        $nom_fichier = "NOM";
        $dossier = "";
        $this->assertSame($this->object, $this->object->trouve_dossier_fichier($this->getListeOption(), $dossier, $nom_fichier));
        $this->assertEquals('/DIR3/', $dossier);
    }

    /**
     * @covers fonctions_standards::trouve_dossier_fichier
     */
    public function testTrouve_dossier_fichierDefaut()
    {
        $this->getListeOption()
            ->expects($this->any())
            ->method('verifie_option_existe')
            ->will($this->returnValue(false));
        $nom_fichier = "NOM";
        $dossier = "";
        $this->assertSame($this->object, $this->object->trouve_dossier_fichier($this->getListeOption(), $dossier, $nom_fichier));
        $this->assertEquals('./', $dossier);
    }

    /**
     * @covers fonctions_standards::trouve_dossier_fichier
     */
    public function testTrouve_dossier_fichierFalse()
    {
        $this->getListeOption()
            ->expects($this->any())
            ->method('verifie_option_existe')
            ->will($this->returnValue(false));
        $nom_fichier = false;
        $dossier = "";
        $this->assertSame($this->object, $this->object->trouve_dossier_fichier($this->getListeOption(), $dossier, $nom_fichier));
        $this->assertFalse($dossier);
    }

    /**
     * @covers fonctions_standards::trouve_dates_fichier
     */
    public function testTrouve_dates_fichierMois()
    {
        $listeDates = $this->createMock('dates');
        $listeDates->expects($this->any())
            ->method('getListeMonth')
            ->will($this->returnValue(array(
            '20120501'
        )));
        
        $this->getListeOption()
            ->expects($this->any())
            ->method('verifie_option_existe')
            ->will($this->returnValue(true));
        $this->getListeOption()
            ->expects($this->any())
            ->method('getOption')
            ->will($this->returnValue("oui"));
        $nom_fichier = "NOM10.EXT1";
        $this->assertSame($this->object, $this->object->trouve_dates_fichier($this->getListeOption(), $nom_fichier, $listeDates));
        $this->assertEquals('20120501_NOM10.EXT1', $nom_fichier);
    }

    /**
     * @covers fonctions_standards::trouve_dates_fichier
     */
    public function testTrouve_dates_fichierSemaine()
    {
        $listeDates = $this->createMock('dates');
        $listeDates->expects($this->any())
            ->method('getListeWeek')
            ->will($this->returnValue(array(
            '20120521'
        )));
        
        $this->getListeOption()
            ->expects($this->any())
            ->method('verifie_option_existe')
            ->will($this->onConsecutiveCalls(false, true));
        $this->getListeOption()
            ->expects($this->any())
            ->method('getOption')
            ->will($this->returnValue("oui"));
        $nom_fichier = "NOM11.EXT1";
        $this->assertSame($this->object, $this->object->trouve_dates_fichier($this->getListeOption(), $nom_fichier, $listeDates));
        $this->assertEquals('20120521_NOM11.EXT1', $nom_fichier);
    }

    /**
     * @covers fonctions_standards::trouve_dates_fichier
     */
    public function testTrouve_dates_fichierDays()
    {
        $listeDates = $this->createMock('dates');
        $listeDates->expects($this->any())
            ->method('getListeDates')
            ->will($this->returnValue(array(
            '20120510',
            '20120515'
        )));
        
        $this->getListeOption()
            ->expects($this->any())
            ->method('verifie_option_existe')
            ->will($this->returnValue(false));
        $this->getListeOption()
            ->expects($this->any())
            ->method('getOption')
            ->will($this->returnValue("oui"));
        $nom_fichier = "NOM12.EXT1";
        $this->assertSame($this->object, $this->object->trouve_dates_fichier($this->getListeOption(), $nom_fichier, $listeDates));
        $this->assertEquals('20120510_20120515_NOM12.EXT1', $nom_fichier);
    }

    /**
     * @covers fonctions_standards::retrouve_class_parent
     */
    public function testRetrouve_class_parent_False()
    {
        $class_used = array(
            "abstract_log" => true
        );
        $this->assertFalse($this->object->retrouve_class_parent($class_used, "xml"));
    }

    /**
     * @covers fonctions_standards::retrouve_class_parent
     */
    public function testRetrouve_class_parent_True()
    {
        $class_used = array();
        $this->assertTrue($this->object->retrouve_class_parent($class_used, "xml"));
    }

    /**
     * @covers fonctions_standards::recupere_chemin_commande
     */
    public function testRecupere_chemin_commande()
    {
        $this->assertEquals('/bin/bash', $this->object->recupere_chemin_commande("bash"));
    }

    /**
     * @covers fonctions_standards::applique_commande_systeme
     */
    public function testApplique_commande_systeme()
    {
        $this->assertEquals(array(
            0,
            'oui'
        ), $this->object->applique_commande_systeme("echo 'oui'"));
    }

    /**
     * @covers fonctions_standards::applique_commande_systeme
     */
    public function testApplique_commande_systemeNoCMD()
    {
        $this->assertEquals(array(
            1
        ), $this->object->applique_commande_systeme(""));
    }

    /**
     * @covers fonctions_standards::applique_commande_systeme
     */
    public function testApplique_commande_systemeErreur()
    {
        $this->assertEquals(array(
            1
        ), $this->object->applique_commande_systeme("exit 1"));
    }

    /**
     * @covers fonctions_standards::applique_commande_systeme
     */
    public function testApplique_commande_systemeWarning()
    {
        $this->assertEquals(array(
            1
        ), $this->object->applique_commande_systeme("exit 1", false));
    }

    /**
     * @covers fonctions_standards::gestion_liste_option_via_url
     */
    public function testGestion_liste_option_via_url()
    {
        $_REQUEST["PARAM3"] = "VAL6";
        $this->assertEquals(array(
            'prog.php',
            '--PARAM1',
            'VAL1',
            '--PARAM2',
            'VAL2',
            'VAL3',
            '--PARAM3',
            'VAL6',
            '--PARAM4',
            'VAL5'
        ), $this->object->gestion_liste_option_via_url("prog.php", array(
            "PARAM1" => "VAL1",
            "PARAM2" => array(
                "VAL2",
                "VAL3"
            )
        ), array(
            "PARAM3" => "VAL4",
            "PARAM4" => "VAL5"
        )));
    }
}
