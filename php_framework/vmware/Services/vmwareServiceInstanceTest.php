<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-04-29 at 09:09:03.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class vmwareServiceInstanceTest extends MockedListeOptions {
	/**
     * @var vmwareServiceInstance
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		
		$this->object = new vmwareServiceInstance ( false, "TESTS vmwareServiceInstance" );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers vmwareServiceInstance::creer_entete_viewManager_this
     */
	public function testCreer_entete_viewManager_this() {
		$auth = new stdClass ();
		$auth->viewManager = array ( 
				'folder' );
		$this->object ->setAuth ( $auth );
		
		$request = new stdClass ();
		$request->_this = array ( 
				'folder' );
		
		$this ->assertEquals ( $request, $this->object ->creer_entete_viewManager_this () );
	}

	/**
     * @covers vmwareServiceInstance::about
     */
	public function testAbout() {
		$auth = new stdClass ();
		$auth->about = array ( 
				'folder' );
		$this->object ->setAuth ( $auth );
		
		$request = new stdClass ();
		$request->_this = array ( 
				'folder' );
		
		$this ->assertEquals ( array ( 
				'folder' ), $this->object ->about () );
	}

	/***************************** RootFolder ****************************/
	/**
	 * @covers vmwareServiceInstance::getRootFolder
	 */
	public function testgetRootFolder_Exception() {
		$auth = new stdClass ();
		$auth->noFolders = "MOID_noFolders";
		$this->object ->setAuth ( $auth );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS vmwareServiceInstance) Pas de propriete rootFolder dans la liste des ServiceInstances' );
		$this->object ->getRootFolder ();
	}

	/**
	 * @covers vmwareServiceInstance::getRootFolder
	 */
	public function testgetRootFolder() {
		$MOID = new stdClass ();
		$MOID->_ = "MOID_rootFolder";
		$MOID->type = "rootFolder";
		
		$auth = new stdClass ();
		$auth->rootFolder = $MOID;
		$this->object ->setAuth ( $auth );
		
		$this ->assertEquals ( $MOID, $this->object ->getRootFolder () );
	}

	/**
	 * @covers vmwareServiceInstance::creer_entete_rootFolder_this
	 */
	public function testcreer_entete_rootFolder_this() {
		$MOID = new stdClass ();
		$MOID->_ = "MOID_rootFolder";
		$MOID->type = "rootFolder";
		
		$auth = new stdClass ();
		$auth->rootFolder = $MOID;
		$this->object ->setAuth ( $auth );
		
		$MOID_propertyCollector = new stdClass ();
		$MOID_propertyCollector->_this = $MOID;
		
		$this ->assertEquals ( $MOID_propertyCollector, $this->object ->creer_entete_rootFolder_this () );
	}

	/***************************** RootFolder ****************************/
	
	/**
     * @covers vmwareServiceInstance::creer_entete_setting_this
     */
	public function testCreer_entete_setting_this() {
		$auth = new stdClass ();
		$auth->setting = array ( 
				'folder' );
		$this->object ->setAuth ( $auth );
		
		$request = new stdClass ();
		$request->_this = array ( 
				'folder' );
		
		$this ->assertEquals ( $request, $this->object ->creer_entete_setting_this () );
	}

	/**
     * @covers vmwareServiceInstance::creer_entete_userDirectory_this
     */
	public function testCreer_entete_userDirectory_this() {
		$auth = new stdClass ();
		$auth->userDirectory = array ( 
				'folder' );
		$this->object ->setAuth ( $auth );
		
		$request = new stdClass ();
		$request->_this = array ( 
				'folder' );
		
		$this ->assertEquals ( $request, $this->object ->creer_entete_userDirectory_this () );
	}

	/**
     * @covers vmwareServiceInstance::creer_entete_sessionManager_this
     */
	public function testCreer_entete_sessionManager_this() {
		$auth = new stdClass ();
		$auth->sessionManager = array ( 
				'folder' );
		$this->object ->setAuth ( $auth );
		
		$request = new stdClass ();
		$request->_this = array ( 
				'folder' );
		
		$this ->assertEquals ( $request, $this->object ->creer_entete_sessionManager_this () );
	}

	/**
     * @covers vmwareServiceInstance::creer_entete_authorizationManager_this
     */
	public function testCreer_entete_authorizationManager_this() {
		$auth = new stdClass ();
		$auth->authorizationManager = array ( 
				'folder' );
		$this->object ->setAuth ( $auth );
		
		$request = new stdClass ();
		$request->_this = array ( 
				'folder' );
		
		$this ->assertEquals ( $request, $this->object ->creer_entete_authorizationManager_this () );
	}

	/**
     * @covers vmwareServiceInstance::creer_entete_serviceManager_this
     */
	public function testCreer_entete_serviceManager_this() {
		$auth = new stdClass ();
		$auth->serviceManager = array ( 
				'folder' );
		$this->object ->setAuth ( $auth );
		
		$request = new stdClass ();
		$request->_this = array ( 
				'folder' );
		
		$this ->assertEquals ( $request, $this->object ->creer_entete_serviceManager_this () );
	}

	/**
     * @covers vmwareServiceInstance::creer_entete_perfManager_this
     */
	public function testCreer_entete_perfManager_this() {
		$auth = new stdClass ();
		$auth->perfManager = array ( 
				'folder' );
		$this->object ->setAuth ( $auth );
		
		$request = new stdClass ();
		$request->_this = array ( 
				'folder' );
		
		$this ->assertEquals ( $request, $this->object ->creer_entete_perfManager_this () );
	}

	/**
     * @covers vmwareServiceInstance::creer_entete_eventManager_this
     */
	public function testCreer_entete_eventManager_this() {
		$auth = new stdClass ();
		$auth->eventManager = array ( 
				'folder' );
		$this->object ->setAuth ( $auth );
		
		$request = new stdClass ();
		$request->_this = array ( 
				'folder' );
		
		$this ->assertEquals ( $request, $this->object ->creer_entete_eventManager_this () );
	}

	/**
     * @covers vmwareServiceInstance::creer_entete_taskManager_this
     */
	public function testCreer_entete_taskManager_this() {
		$auth = new stdClass ();
		$auth->taskManager = array ( 
				'folder' );
		$this->object ->setAuth ( $auth );
		
		$request = new stdClass ();
		$request->_this = array ( 
				'folder' );
		
		$this ->assertEquals ( $request, $this->object ->creer_entete_taskManager_this () );
	}

	/**
     * @covers vmwareServiceInstance::creer_entete_accountManager_this
     */
	public function testCreer_entete_accountManager_this() {
		$auth = new stdClass ();
		$auth->accountManager = array ( 
				'folder' );
		$this->object ->setAuth ( $auth );
		
		$request = new stdClass ();
		$request->_this = array ( 
				'folder' );
		
		$this ->assertEquals ( $request, $this->object ->creer_entete_accountManager_this () );
	}

	/**
     * @covers vmwareServiceInstance::creer_entete_diagnosticManager_this
     */
	public function testCreer_entete_diagnosticManager_this() {
		$auth = new stdClass ();
		$auth->diagnosticManager = array ( 
				'folder' );
		$this->object ->setAuth ( $auth );
		
		$request = new stdClass ();
		$request->_this = array ( 
				'folder' );
		
		$this ->assertEquals ( $request, $this->object ->creer_entete_diagnosticManager_this () );
	}

	/**
     * @covers vmwareServiceInstance::creer_entete_licenseManager_this
     */
	public function testCreer_entete_licenseManager_this() {
		$auth = new stdClass ();
		$auth->licenseManager = array ( 
				'folder' );
		$this->object ->setAuth ( $auth );
		
		$request = new stdClass ();
		$request->_this = array ( 
				'folder' );
		
		$this ->assertEquals ( $request, $this->object ->creer_entete_licenseManager_this () );
	}

	/**
     * @covers vmwareServiceInstance::creer_entete_searchIndex_this
     */
	public function testCreer_entete_searchIndex_this() {
		$auth = new stdClass ();
		$auth->searchIndex = array ( 
				'folder' );
		$this->object ->setAuth ( $auth );
		
		$request = new stdClass ();
		$request->_this = array ( 
				'folder' );
		
		$this ->assertEquals ( $request, $this->object ->creer_entete_searchIndex_this () );
	}

	/**
     * @covers vmwareServiceInstance::creer_entete_fileManager_this
     */
	public function testCreer_entete_fileManager_this() {
		$auth = new stdClass ();
		$auth->fileManager = array ( 
				'folder' );
		$this->object ->setAuth ( $auth );
		
		$request = new stdClass ();
		$request->_this = array ( 
				'folder' );
		
		$this ->assertEquals ( $request, $this->object ->creer_entete_fileManager_this () );
	}

	/**
     * @covers vmwareServiceInstance::creer_entete_datastoreNamespaceManager_this
     */
	public function testCreer_entete_datastoreNamespaceManager_this() {
		$auth = new stdClass ();
		$auth->datastoreNamespaceManager = array ( 
				'folder' );
		$this->object ->setAuth ( $auth );
		
		$request = new stdClass ();
		$request->_this = array ( 
				'folder' );
		
		$this ->assertEquals ( $request, $this->object ->creer_entete_datastoreNamespaceManager_this () );
	}

	/**
     * @covers vmwareServiceInstance::creer_entete_virtualDiskManager_this
     */
	public function testCreer_entete_virtualDiskManager_this() {
		$auth = new stdClass ();
		$auth->virtualDiskManager = array ( 
				'folder' );
		$this->object ->setAuth ( $auth );
		
		$request = new stdClass ();
		$request->_this = array ( 
				'folder' );
		
		$this ->assertEquals ( $request, $this->object ->creer_entete_virtualDiskManager_this () );
	}

	/**
     * @covers vmwareServiceInstance::creer_entete_ovfManager_this
     */
	public function testCreer_entete_ovfManager_this() {
		$auth = new stdClass ();
		$auth->ovfManager = array ( 
				'folder' );
		$this->object ->setAuth ( $auth );
		
		$request = new stdClass ();
		$request->_this = array ( 
				'folder' );
		
		$this ->assertEquals ( $request, $this->object ->creer_entete_ovfManager_this () );
	}

	/**
     * @covers vmwareServiceInstance::creer_entete_dvSwitchManager_this
     */
	public function testCreer_entete_dvSwitchManager_this() {
		$auth = new stdClass ();
		$auth->dvSwitchManager = array ( 
				'folder' );
		$this->object ->setAuth ( $auth );
		
		$request = new stdClass ();
		$request->_this = array ( 
				'folder' );
		
		$this ->assertEquals ( $request, $this->object ->creer_entete_dvSwitchManager_this () );
	}

	/**
     * @covers vmwareServiceInstance::creer_entete_localizationManager_this
     */
	public function testCreer_entete_localizationManager_this() {
		$auth = new stdClass ();
		$auth->localizationManager = array ( 
				'folder' );
		$this->object ->setAuth ( $auth );
		
		$request = new stdClass ();
		$request->_this = array ( 
				'folder' );
		
		$this ->assertEquals ( $request, $this->object ->creer_entete_localizationManager_this () );
	}

	/**
     * @covers vmwareServiceInstance::creer_entete_storageResourceManager_this
     */
	public function testCreer_entete_storageResourceManager_this() {
		$auth = new stdClass ();
		$auth->storageResourceManager = array ( 
				'folder' );
		$this->object ->setAuth ( $auth );
		
		$request = new stdClass ();
		$request->_this = array ( 
				'folder' );
		
		$this ->assertEquals ( $request, $this->object ->creer_entete_storageResourceManager_this () );
	}

	/**
     * @covers vmwareServiceInstance::creer_entete_guestOperationsManager_this
     */
	public function testCreer_entete_guestOperationsManager_this() {
		$auth = new stdClass ();
		$auth->guestOperationsManager = array ( 
				'folder' );
		$this->object ->setAuth ( $auth );
		
		$request = new stdClass ();
		$request->_this = array ( 
				'folder' );
		
		$this ->assertEquals ( $request, $this->object ->creer_entete_guestOperationsManager_this () );
	}

	/**
     * @covers vmwareServiceInstance::prepare_SoapMessage
     */
	public function testPrepare_SoapMessage() {
		$this ->assertEquals ( array ( 
				'_this' => new Soapvar ( "ServiceInstance", XSD_STRING, "ServiceInstance" ) ), $this->object ->prepare_SoapMessage () );
	}
}
