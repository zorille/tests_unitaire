<?php
namespace Zorille\framework;
use \Exception as Exception;
use \stdClass as stdClass;
use \ArrayObject as ArrayObject;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-08-17 at 11:44:04.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class vmwareVim25ManagedEntityTest extends MockedListeOptions {
	/**
     * @var vmwareVim25ManagedEntity
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		
		$objetVmwareClusterComputeResource = $this ->createMock('Zorille\framework\vmwareClusterComputeResource' );
		$objetVmwareComputeResource = $this ->createMock('Zorille\framework\vmwareComputeResource' );
		$objetVmwareDatacenter = $this ->createMock('Zorille\framework\vmwareDatacenter' );
		$objetVmwareDatastore = $this ->createMock('Zorille\framework\vmwareDatastore' );
		$objetVmwareFolder = $this ->createMock('Zorille\framework\vmwareFolder' );
		$objetVmwareHostSystem = $this ->createMock('Zorille\framework\vmwareHostSystem' );
		$objetVmwareNetwork = $this ->createMock('Zorille\framework\vmwareNetwork' );
		$objetVmwareResourcePool = $this ->createMock('Zorille\framework\vmwareResourcePool' );
		$vmwareVirtualMachine = $this ->createMock('Zorille\framework\vmwareVirtualMachine' );
		
		$objetVmwareWsclient = $this ->_prepareWsclient ( "TypeVMWare" );
		
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "TypeVMWare" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		
		$this->object = new vmwareVim25ManagedEntity ( false, "TESTS vmwareVim25ManagedEntity" );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector ) 
			->setObjectVmwareWsclient ( $objetVmwareWsclient ) 
			->setObjectVmwareClusterComputeResource ( $objetVmwareClusterComputeResource ) 
			->setObjectVmwareComputeResource ( $objetVmwareComputeResource ) 
			->setObjectVmwareDatacenter ( $objetVmwareDatacenter ) 
			->setObjectVmwareDatastore ( $objetVmwareDatastore ) 
			->setObjectVmwareFolder ( $objetVmwareFolder ) 
			->setObjectVmwareHostSystem ( $objetVmwareHostSystem ) 
			->setObjectVmwareNetwork ( $objetVmwareNetwork ) 
			->setObjectVmwareResourcePool ( $objetVmwareResourcePool ) 
			->setObjectVmwareVirtualMachine ( $vmwareVirtualMachine );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	private function _prepareWsclient($type = "TypeVMWare") {
		$objetXML = $this ->createMock('Zorille\framework\xml' );
		$objetXML ->expects ( $this ->any () ) 
			->method ( 'renvoi_donnee' ) 
			->will ( $this ->returnValue ( array ( 
				"_" => "ObjMOID", 
				"type" => $type ) ) );
		$getObjectServiceInstance = $this ->createMock('Zorille\framework\vmwareServiceInstance' );
		$getObjectServiceInstance ->expects ( $this ->any () ) 
			->method ( 'creer_entete_rootFolder_this' ) 
			->will ( $this ->returnValue ( array ( 
				"_this" => "rootFolder_MOID" ) ) );
		$objetVmwareWsclient = $this ->createMock('Zorille\framework\vmwareWsclient' );
		$objetVmwareWsclient ->expects ( $this ->any () ) 
			->method ( 'getObjectServiceInstance' ) 
			->will ( $this ->returnValue ( $getObjectServiceInstance ) );
		$objetVmwareWsclient ->expects ( $this ->any () ) 
			->method ( 'convertit_donnees' ) 
			->will ( $this ->returnValue ( $objetXML ) );
		
		return $objetVmwareWsclient;
	}

	/**
	 * @covers Zorille\framework\vmwareVim25ManagedEntity::renvoi_obj
	 */
	public function testrenvoi_obj() {
		$this ->assertEquals ( array ( 
				array ( 
						"_" => "ObjMOID", 
						"type" => "TypeVMWare" ) ), $this->object ->renvoi_obj ( 'NOM2' ) );
	}

	/**
	 * @covers Zorille\framework\vmwareVim25ManagedEntity::creer_Folder_spec
	 */
	public function testcreer_Folder_spec() {
		$this ->assertEquals ( new arrayObject ( array ( 
				'name' => 'FolderTraversalSpec', 
				'type' => 'Folder', 
				'path' => 'childEntity', 
				'skip' => false ) ), $this->object ->creer_Folder_spec () );
	}

	/**
	 * @covers Zorille\framework\vmwareVim25ManagedEntity::creer_Datacenter_spec
	 */
	public function testcreer_Datacenter_spec() {
		$this ->assertEquals ( new arrayObject ( array ( 
				'name' => 'DataCenterTraversalSpec', 
				'type' => 'Datacenter', 
				'path' => "PATH", 
				'skip' => true ) ), $this->object ->creer_Datacenter_spec ( 'PATH', true ) );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Del_Cluster
     */
	public function testDel_Cluster() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS vmwareVim25ManagedEntity) NOT Implemented' );
		$this->object ->Del_Cluster ( 'NOM2' );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_Cluster
     */
	public function testGet_Cluster() {
		$this ->assertEquals ( array ( 
				array ( 
						"_" => "ObjMOID", 
						"type" => "TypeVMWare" ) ), $this->object ->Get_Cluster () );
	}

	/**
	 * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_Cluster_Name
	 */
	public function testGet_Cluster_Name_Exception() {
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "ClusterComputeResource" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS vmwareVim25ManagedEntity) Pas de Cluster/Standalone nomme NOM2' );
		$this->object ->Get_Cluster_Name ( 'NOM2' );
	}

	/**
	 * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_Cluster_Datas
	 */
	public function testGet_Cluster_Datas_ClusterComputeResource() {
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "ClusterComputeResource" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$objetVmwareWsclient = $this ->_prepareWsclient ( "ClusterComputeResource" );
		$this->object ->setObjectVmwareWsclient ( $objetVmwareWsclient );
		
		$this->object ->getObjectVmwareClusterComputeResource () 
			->expects ( $this ->any () ) 
			->method ( 'setClusterComputeResource' ) 
			->will ( $this ->returnSelf () );
		
		$this ->assertEquals ( array ( 
				'name' => 'NOM1' ), $this->object ->Get_Cluster_Datas ( 'NOM1' ) );
	}

	/**
	 * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_Cluster_Datas
	 */
	public function testGet_Cluster_Datas_ComputeResource() {
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "ComputeResource" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this->object ->getObjectVmwareComputeResource () 
			->expects ( $this ->any () ) 
			->method ( 'setComputeResource' ) 
			->will ( $this ->returnSelf () );
		
		$this ->assertEquals ( array ( 
				'name' => 'NOM1' ), $this->object ->Get_Cluster_Datas ( 'NOM1' ) );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_Cluster_Name
     */
	public function testGet_Cluster_Name_ClusterComputeResource() {
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "ClusterComputeResource" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$objetVmwareWsclient = $this ->_prepareWsclient ( "ClusterComputeResource" );
		$this->object ->setObjectVmwareWsclient ( $objetVmwareWsclient );
		
		$this->object ->getObjectVmwareClusterComputeResource () 
			->expects ( $this ->any () ) 
			->method ( 'setClusterComputeResource' ) 
			->will ( $this ->returnSelf () );
		
		$this ->assertInstanceOf ( 'Zorille\framework\vmwareClusterComputeResource', $this->object ->Get_Cluster_Name ( 'NOM1' ) );
	}

	/**
	 * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_Cluster_Name
	 */
	public function testGet_Cluster_Name_ComputeResource() {
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "ComputeResource" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		$this->object ->getObjectVmwareComputeResource () 
			->expects ( $this ->any () ) 
			->method ( 'setComputeResource' ) 
			->will ( $this ->returnSelf () );
		
		$this ->assertInstanceOf ( 'Zorille\framework\vmwareComputeResource', $this->object ->Get_Cluster_Name ( 'NOM1' ) );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Set_Cluster
     */
	public function testSet_Cluster() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS vmwareVim25ManagedEntity) NOT Implemented' );
		$this->object ->Set_Cluster ( 'NOM2' );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Del_Datacenter
     */
	public function testDel_Datacenter() {
		$this->object ->getObjectVmwareDatacenter () 
			->expects ( $this ->any () ) 
			->method ( 'setDatacenter' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getObjectVmwareDatacenter () 
			->expects ( $this ->any () ) 
			->method ( 'Destroy_Task' ) 
			->will ( $this ->returnValue ( "SUCCESS" ) );
		
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->onConsecutiveCalls ( array ( 
				array ( 
						'ManagedObjectReference' => array ( 
								"MOID_Datacenter" ) ) ), array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->assertEquals ( "SUCCESS", $this->object ->Del_Datacenter ( 'NOM1' ) );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_Datacenter
     */
	public function testGet_Datacenter() {
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				array ( 
						'ManagedObjectReference' => array ( 
								array ( 
										"_" => "ObjMOID", 
										"type" => "Datacenter" ) ) ) ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		$this ->assertEquals ( array ( 
				array ( 
						"_" => "ObjMOID", 
						"type" => "Datacenter" ) ), $this->object ->Get_Datacenter () );
	}

	/**
	 * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_Datacenter_Name
	 */
	public function testGet_Datacenter_Name_Exception() {
		$this->object ->getObjectVmwareDatacenter () 
			->expects ( $this ->any () ) 
			->method ( 'setDatacenter' ) 
			->will ( $this ->returnSelf () );
		
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->onConsecutiveCalls ( array ( 
				array ( 
						'ManagedObjectReference' => array ( 
								"MOID_Datacenter" ) ) ), array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS vmwareVim25ManagedEntity) Pas de Datacenter nomme NOM2' );
		$this->object ->Get_Datacenter_Name ( 'NOM2' );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_Datacenter_Name
     */
	public function testGet_Datacenter_Name() {
		$this->object ->getObjectVmwareDatacenter () 
			->expects ( $this ->any () ) 
			->method ( 'setDatacenter' ) 
			->will ( $this ->returnSelf () );
		
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->onConsecutiveCalls ( array ( 
				array ( 
						'ManagedObjectReference' => array ( 
								"MOID_Datacenter" ) ) ), array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->assertInstanceOf ( 'Zorille\framework\vmwareDatacenter', $this->object ->Get_Datacenter_Name ( 'NOM1' ) );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Set_Datacenter
     */
	public function testSet_Datacenter_Exception() {
		$this->object ->getObjectVmwareFolder () 
			->expects ( $this ->any () ) 
			->method ( 'setMoIDFolder' ) 
			->will ( $this ->returnSelf () );
		
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "Folder" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1', 
				'parent' => 'NOMX' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS vmwareVim25ManagedEntity) Pas de rootFolder pour le creer le Datacenter NOM2' );
		$this->object ->Set_Datacenter ( 'NOM2' );
	}

	/**
	 * @covers Zorille\framework\vmwareVim25ManagedEntity::Set_Datacenter
	 */
	public function testSet_Datacenter() {
		$this->object ->getObjectVmwareFolder () 
			->expects ( $this ->any () ) 
			->method ( 'setMoIDFolder' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getObjectVmwareFolder () 
			->expects ( $this ->any () ) 
			->method ( 'CreateDatacenter' ) 
			->will ( $this ->returnValue ( array ( 
				'success' ) ) );
		$this ->assertEquals ( array ( 
				'success' ), $this->object ->Set_Datacenter ( 'NOM2' ) );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Del_Datastore
     */
	public function testDel_Datastore() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS vmwareVim25ManagedEntity) NOT Implemented' );
		$this->object ->Del_Datastore ( 'NOM2' );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_Datastore
     */
	public function testGet_Datastore() {
		$this ->assertEquals ( array ( 
				array ( 
						"_" => "ObjMOID", 
						"type" => "TypeVMWare" ) ), $this->object ->Get_Datastore () );
	}

	/**
	 * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_Datastore_Name
	 */
	public function testGet_Datastore_Name_Exception() {
		$this->object ->getObjectVmwareDatastore () 
			->expects ( $this ->any () ) 
			->method ( 'setDatastore' ) 
			->will ( $this ->returnSelf () );
		
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "Datastore" ) ) );
		
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS vmwareVim25ManagedEntity) Pas de Datastore nomme NOM2' );
		$this->object ->Get_Datastore_Name ( 'NOM2' );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_Datastore_Name
     */
	public function testGet_Datastore_Name() {
		$this->object ->getObjectVmwareDatastore () 
			->expects ( $this ->any () ) 
			->method ( 'setDatastore' ) 
			->will ( $this ->returnSelf () );
		
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "Datastore" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->assertInstanceOf ( 'Zorille\framework\vmwareDatastore', $this->object ->Get_Datastore_Name ( 'NOM1' ) );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Set_Datastore
     */
	public function testSet_Datastore() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS vmwareVim25ManagedEntity) NOT Implemented' );
		$this->object ->Set_Datastore ( 'NOM2' );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Del_Folder
     */
	public function testDel_Folder() {
		$this->object ->getObjectVmwareFolder () 
			->expects ( $this ->any () ) 
			->method ( 'setMoIDFolder' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getObjectVmwareFolder () 
			->expects ( $this ->any () ) 
			->method ( 'Destroy_Task' ) 
			->will ( $this ->returnValue ( array ( 
				'SUCCESS' ) ) );
		
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "Folder" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->assertEquals ( array ( 
				"SUCCESS" ), $this->object ->Del_Folder ( 'NOM1' ) );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_Folder
     */
	public function testGet_Folder() {
		$this ->assertEquals ( array ( 
				array ( 
						"_" => "ObjMOID", 
						"type" => "TypeVMWare" ) ), $this->object ->Get_Folder () );
	}

	/**
	 * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_Folder_Name
	 */
	public function testGet_Folder_Name_Exception() {
		$this->object ->getObjectVmwareFolder () 
			->expects ( $this ->any () ) 
			->method ( 'setMoIDFolder' ) 
			->will ( $this ->returnSelf () );
		
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "Folder" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS vmwareVim25ManagedEntity) Pas de Folder nomme NOM2' );
		$this->object ->Get_Folder_Name ( 'NOM2' );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_Folder_Name
     */
	public function testGet_Folder_Name() {
		$this->object ->getObjectVmwareFolder () 
			->expects ( $this ->any () ) 
			->method ( 'setMoIDFolder' ) 
			->will ( $this ->returnSelf () );
		
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "Folder" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->assertInstanceOf ( 'Zorille\framework\vmwareFolder', $this->object ->Get_Folder_Name ( 'NOM1' ) );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Set_Folder
     */
	public function testSet_Folder() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS vmwareVim25ManagedEntity) NOT Implemented' );
		$this->object ->Set_Folder ( 'NOM2' );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Del_HostSystem
     */
	public function testDel_HostSystem() {
		$this->object ->getObjectVmwareHostSystem () 
			->expects ( $this ->any () ) 
			->method ( 'setHostSystem' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getObjectVmwareHostSystem () 
			->expects ( $this ->any () ) 
			->method ( 'Destroy_Task' ) 
			->will ( $this ->returnValue ( array ( 
				'SUCCESS' ) ) );
		
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "HostSystem" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->assertEquals ( array ( 
				"SUCCESS" ), $this->object ->Del_HostSystem ( 'NOM1' ) );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_HostSystem
     */
	public function testGet_HostSystem() {
		$this ->assertEquals ( array ( 
				array ( 
						"_" => "ObjMOID", 
						"type" => "TypeVMWare" ) ), $this->object ->Get_HostSystem () );
	}

	/**
	 * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_HostSystem_Name
	 */
	public function testGet_HostSystem_Name_Exception() {
		$this->object ->getObjectVmwareHostSystem () 
			->expects ( $this ->any () ) 
			->method ( 'setHostSystem' ) 
			->will ( $this ->returnSelf () );
		
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "Datastore" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS vmwareVim25ManagedEntity) Pas de HostSystem nomme NOM2' );
		$this->object ->Get_HostSystem_Name ( 'NOM2' );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_HostSystem_Name
     */
	public function testGet_HostSystem_Name() {
		$this->object ->getObjectVmwareHostSystem () 
			->expects ( $this ->any () ) 
			->method ( 'setHostSystem' ) 
			->will ( $this ->returnSelf () );
		
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "HostSystem" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->assertInstanceOf ( 'Zorille\framework\vmwareHostSystem', $this->object ->Get_HostSystem_Name ( 'NOM1' ) );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Set_HostSystem
     */
	public function testSet_HostSystem() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS vmwareVim25ManagedEntity) NOT Implemented' );
		$this->object ->Set_HostSystem ( 'NOM2' );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Del_Network
     */
	public function testDel_Network() {
		$this->object ->getObjectVmwareNetwork () 
			->expects ( $this ->any () ) 
			->method ( 'setNetwork' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getObjectVmwareNetwork () 
			->expects ( $this ->any () ) 
			->method ( 'Destroy_Task' ) 
			->will ( $this ->returnValue ( array ( 
				'SUCCESS' ) ) );
		
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "Network" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->assertEquals ( array ( 
				"SUCCESS" ), $this->object ->Del_Network ( 'NOM1' ) );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_Network
     */
	public function testGet_Network() {
		$this ->assertEquals ( array ( 
				array ( 
						"_" => "ObjMOID", 
						"type" => "TypeVMWare" ) ), $this->object ->Get_Network () );
	}

	/**
	 * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_Network_Name
	 */
	public function testGet_Network_Name_Exception() {
		$this->object ->getObjectVmwareNetwork () 
			->expects ( $this ->any () ) 
			->method ( 'setNetwork' ) 
			->will ( $this ->returnSelf () );
		
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "Datastore" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS vmwareVim25ManagedEntity) Pas de Network nomme NOM2' );
		$this->object ->Get_Network_Name ( 'NOM2' );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_Network_Name
     */
	public function testGet_Network_Name() {
		$this->object ->getObjectVmwareNetwork () 
			->expects ( $this ->any () ) 
			->method ( 'setNetwork' ) 
			->will ( $this ->returnSelf () );
		
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "Network" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->assertInstanceOf ( 'Zorille\framework\vmwareNetwork', $this->object ->Get_Network_Name ( 'NOM1' ) );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Set_Network
     */
	public function testSet_Network() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS vmwareVim25ManagedEntity) NOT Implemented' );
		$this->object ->Set_Network ( 'NetworkConfigSpec', 'ResourcePool', 'NOM2' );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Del_ResourcePool
     */
	public function testDel_ResourcePool() {
		$this->object ->getObjectVmwareResourcePool () 
			->expects ( $this ->any () ) 
			->method ( 'setResourcePool' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getObjectVmwareResourcePool () 
			->expects ( $this ->any () ) 
			->method ( 'Destroy_Task' ) 
			->will ( $this ->returnValue ( array ( 
				'SUCCESS' ) ) );
		
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "ResourcePool" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->assertEquals ( array ( 
				"SUCCESS" ), $this->object ->Del_ResourcePool ( 'NOM1' ) );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_ResourcePool
     */
	public function testGet_ResourcePool() {
		$this ->assertEquals ( array ( 
				array ( 
						"_" => "ObjMOID", 
						"type" => "TypeVMWare" ) ), $this->object ->Get_ResourcePool () );
	}

	/**
	 * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_ResourcePool_Name
	 */
	public function testGet_ResourcePool_Name_Exception() {
		$this->object ->getObjectVmwareResourcePool () 
			->expects ( $this ->any () ) 
			->method ( 'setResourcePool' ) 
			->will ( $this ->returnSelf () );
		
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "ResourcePool" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS vmwareVim25ManagedEntity) Pas de ResourcePool nomme NOM2' );
		$this->object ->Get_ResourcePool_Name ( 'NOM2' );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_ResourcePool_Name
     */
	public function testGet_ResourcePool_Name() {
		$this->object ->getObjectVmwareResourcePool () 
			->expects ( $this ->any () ) 
			->method ( 'setResourcePool' ) 
			->will ( $this ->returnSelf () );
		
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "ResourcePool" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->assertInstanceOf ( 'Zorille\framework\vmwareResourcePool', $this->object ->Get_ResourcePool_Name ( 'NOM1' ) );
	}

	/**
	 * @covers Zorille\framework\vmwareVim25ManagedEntity::valide_nom_resourcePool
	 */
	public function testvalide_nom_resourcePool_true() {
		$this->object ->getObjectVmwareResourcePool () 
			->expects ( $this ->any () ) 
			->method ( 'setResourcePool' ) 
			->will ( $this ->returnSelf () );
		
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->assertTrue ( $this->object ->valide_nom_resourcePool ( array ( 
				"_" => "ObjMOID", 
				"type" => "ResourcePool" ), 'NOM1' ) );
	}

	/**
	 * @covers Zorille\framework\vmwareVim25ManagedEntity::valide_nom_resourcePool
	 */
	public function testvalide_nom_resourcePool_false() {
		$this->object ->getObjectVmwareResourcePool () 
			->expects ( $this ->any () ) 
			->method ( 'setResourcePool' ) 
			->will ( $this ->returnSelf () );
		
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->assertFalse ( $this->object ->valide_nom_resourcePool ( array ( 
				"_" => "ObjMOID", 
				"type" => "ResourcePool" ), 'NOM2' ) );
	}

	/**
	 * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_ResourcePool_From_Clusters
	 */
	public function testGet_ResourcePool_From_Clusters_Exception() {
		$this->object ->getObjectVmwareResourcePool () 
			->expects ( $this ->any () ) 
			->method ( 'setResourcePool' ) 
			->will ( $this ->returnSelf () );
		
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "ResourcePool" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->onConsecutiveCalls ( array ( 
				'name' => 'CLUSTER1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$objetVmwareWsclient = $this ->_prepareWsclient ( "ClusterComputeResource" );
		$this->object ->setObjectVmwareWsclient ( $objetVmwareWsclient );
		
		$this->object ->getObjectVmwareClusterComputeResource () 
			->expects ( $this ->any () ) 
			->method ( 'setClusterComputeResource' ) 
			->will ( $this ->returnSelf () );
		
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS vmwareVim25ManagedEntity) Pas de ResourcePool nomme NOM1' );
		$this->object ->Get_ResourcePool_From_Clusters ( 'CLUSTER1', 'NOM1' );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_ResourcePool_From_Clusters
     */
	public function testGet_ResourcePool_From_Clusters_defaultResourcePool() {
		$this->object ->getObjectVmwareResourcePool () 
			->expects ( $this ->any () ) 
			->method ( 'setResourcePool' ) 
			->will ( $this ->returnSelf () );
		
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "ClusterComputeResource" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->onConsecutiveCalls ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->onConsecutiveCalls ( array ( 
				'name' => 'CLUSTER1' ), array ( 
				'resourcePool' => array ( 
						"_" => "ObjMOID", 
						"type" => "resourcePool" ) ), array ( 
				'name' => 'Resources' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$objetVmwareWsclient = $this ->_prepareWsclient ( "ClusterComputeResource" );
		$this->object ->setObjectVmwareWsclient ( $objetVmwareWsclient );
		
		$this->object ->getObjectVmwareClusterComputeResource () 
			->expects ( $this ->any () ) 
			->method ( 'setClusterComputeResource' ) 
			->will ( $this ->returnSelf () );
		
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->assertInstanceOf ( 'Zorille\framework\vmwareResourcePool', $this->object ->Get_ResourcePool_From_Clusters ( 'CLUSTER1' ) );
	}

	/**
	 * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_ResourcePool_From_Clusters
	 */
	public function testGet_ResourcePool_From_Clusters_specificResourcePool() {
		$this->object ->getObjectVmwareResourcePool () 
			->expects ( $this ->any () ) 
			->method ( 'setResourcePool' ) 
			->will ( $this ->returnSelf () );
		
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "ClusterComputeResource" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->onConsecutiveCalls ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( 
				$this ->onConsecutiveCalls ( array ( 
							'name' => 'CLUSTER1' ), array ( 
							'resourcePool' => array ( 
									"_" => "ObjMOID", 
									"type" => "resourcePool" ) ), array ( 
							'name' => 'Resources' ), array ( 
							'resourcePool' => array ( 
									array ( 
											"_" => "ObjMOID2", 
											"type" => "resourcePool" ), 
									array ( 
											"_" => "ObjMOID3", 
											"type" => "resourcePool" ) ) ), array ( 
							'name' => 'NOM0' ), array ( 
							'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$objetVmwareWsclient = $this ->_prepareWsclient ( "ClusterComputeResource" );
		$this->object ->setObjectVmwareWsclient ( $objetVmwareWsclient );
		
		$this->object ->getObjectVmwareClusterComputeResource () 
			->expects ( $this ->any () ) 
			->method ( 'setClusterComputeResource' ) 
			->will ( $this ->returnSelf () );
		
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->assertInstanceOf ( 'Zorille\framework\vmwareResourcePool', $this->object ->Get_ResourcePool_From_Clusters ( 'CLUSTER1', 'NOM1' ) );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Set_ResourcePool
     */
	public function testSet_ResourcePool() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS vmwareVim25ManagedEntity) NOT Implemented' );
		$this->object ->Set_ResourcePool ( 'NOM2' );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Del_VirtualMachine
     */
	public function testDel_VirtualMachine() {
		$this->object ->getObjectVmwareVirtualMachine () 
			->expects ( $this ->any () ) 
			->method ( 'setMoIDVirtualMachine' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getObjectVmwareVirtualMachine () 
			->expects ( $this ->any () ) 
			->method ( 'Destroy_Task' ) 
			->will ( $this ->returnValue ( array ( 
				'SUCCESS' ) ) );
		
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "VirtualMachine" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->assertEquals ( array ( 
				"SUCCESS" ), $this->object ->Del_VirtualMachine ( 'NOM1' ) );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_VirtualMachine
     */
	public function testGet_VirtualMachine() {
		$this ->assertEquals ( array ( 
				array ( 
						"_" => "ObjMOID", 
						"type" => "TypeVMWare" ) ), $this->object ->Get_VirtualMachine () );
	}

	/**
	 * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_VirtualMachine_Name
	 */
	public function testGet_VirtualMachine_Name_Exception() {
		$this->object ->getObjectVmwareVirtualMachine () 
			->expects ( $this ->any () ) 
			->method ( 'setMoIDVirtualMachine' ) 
			->will ( $this ->returnSelf () );
		
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "VirtualMachine" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS vmwareVim25ManagedEntity) Pas de VirtualMachine nomme NOM2' );
		$this->object ->Get_VirtualMachine_Name ( 'NOM2' );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Get_VirtualMachine_Name
     */
	public function testGet_VirtualMachine_Name() {
		$this->object ->getObjectVmwareVirtualMachine () 
			->expects ( $this ->any () ) 
			->method ( 'setMoIDVirtualMachine' ) 
			->will ( $this ->returnSelf () );
		
		$stdClass_RetrievePropertiesEx = new stdClass ();
		$stdClass_RetrievePropertiesEx->objects = array ( 
				array ( 
						"obj" => array ( 
								"_" => "ObjMOID", 
								"type" => "VirtualMachine" ) ) );
		$objetVmwarePropertyCollector = $this ->createMock('Zorille\framework\vmwarePropertyCollector' );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'RetrievePropertiesEx' ) 
			->will ( $this ->returnValue ( $stdClass_RetrievePropertiesEx ) );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'ObjectSpec' ) 
			->will ( $this ->returnSelf () );
		$objetVmwarePropertyCollector ->expects ( $this ->any () ) 
			->method ( 'retrouve_propset' ) 
			->will ( $this ->returnValue ( array ( 
				'name' => 'NOM1' ) ) );
		$this->object ->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this ->assertInstanceOf ( 'Zorille\framework\vmwareVirtualMachine', $this->object ->Get_VirtualMachine_Name ( 'NOM1' ) );
	}

	/**
     * @covers Zorille\framework\vmwareVim25ManagedEntity::Set_VirtualMachine
     */
	public function testSet_VirtualMachine() {
		$this->object ->getObjectVmwareFolder () 
			->expects ( $this ->any () ) 
			->method ( 'CreateVM_Task' ) 
			->will ( $this ->returnValue ( array ( 
				"_" => "ObjMOID", 
				"type" => "Task" ) ) );
		$this ->assertEquals ( array ( 
				"_" => "ObjMOID", 
				"type" => "Task" ), $this->object ->Set_VirtualMachine ( array ( 
				"VirtualMachineConfigSpec" ), array ( 
				"MOIDResourcePool" ), array ( 
				"MOIDHostSystem" ) ) );
	}
}
