<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-04-29 at 09:09:03.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class vmwareVim25ManagedObjectTest extends MockedListeOptions {
	/**
     * @var vmwareVim25ManagedObject
     */
	protected $object;
	/**
	 * @var stdClass
	 */
	protected $MOID;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		
		$this->MOID = array (
				"_" => "MOID_vmware",
				"type" => "Task" 
		);
		
		$objetVmwarePropertyCollector = $this->createMock ( "vmwarePropertyCollector" );
		$objetVmwarePropertyCollector->expects ( $this->any () )
			->method ( 'retrouve_donnees_par_ManagedObject' )
			->will ( $this->returnValue ( array (
				"DATAS OBJECT" 
		) ) );
		$objetVmwarePropertyCollector->expects ( $this->any () )
			->method ( 'retrouve_propset' )
			->will ( $this->returnValue ( array (
				"info.state" => "success" 
		) ) );
		
		$this->object = new vmwareVim25ManagedObject ( false, "TESTS vmwareVim25ManagedObject" );
		$this->object->setListeOptions ( $this->getListeOption () )
			->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * @covers vmwareVim25ManagedObject::Get_Task_Datas
	 */
	public function testGet_Task_Datas() {
		$this->assertEquals ( array (
				"DATAS OBJECT" 
		), $this->object->Get_Task_Datas ( $this->MOID ) );
	}

	/**
	 * @covers vmwareVim25ManagedObject::Wait_Task
	 */
	public function testWait_Task() {
		$this->assertEquals ( 'success', $this->object->Wait_Task ( $this->MOID ) );
	}

	/**
	 * @covers vmwareVim25ManagedObject::progress_task
	 */
	public function testprogress_task() {
		$tate = 'running';
		$objetVmwarePropertyCollector = $this->createMock ( "vmwarePropertyCollector" );
		$objetVmwarePropertyCollector->expects ( $this->any () )
			->method ( 'retrouve_propset' )
			->will ( $this->onConsecutiveCalls ( array (
						"info.progress" => "25",
						"info.state" => "running"  
		), array (
				"info.state" => "success" 
		) ) );
		$this->object->setObjectVmwarePropertyCollector ( $objetVmwarePropertyCollector );
		
		$this->assertSame ( $this->object, $this->object->progress_task ( $tate, $this->MOID ) );
		$this->assertEquals ( 'success', $tate );
	}
}
