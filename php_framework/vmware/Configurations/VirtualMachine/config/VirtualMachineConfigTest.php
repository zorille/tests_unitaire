<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-09-07 at 11:31:16.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class VirtualMachineConfigTest extends MockedListeOptions {
	/**
     * @var VirtualMachineConfig
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = $this->getMockForAbstractClass ( "VirtualMachineConfig" );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * @covers VirtualMachineConfig::renvoi_donnees_soap
	 */
	public function testrenvoi_donnees_soap_Valide() {
		$bootOptions = $this->createMock ( "VirtualMachineBootOptions" );
		$bootOptions->expects ( $this->any () )
			->method ( 'renvoi_donnees_soap' )
			->will ( $this->returnValue ( array (
				"bootOptions" 
		) ) );
		$files = $this->createMock ( "VirtualMachineFileInfo" );
		$files->expects ( $this->any () )
			->method ( 'renvoi_donnees_soap' )
			->will ( $this->returnValue ( array (
				"VirtualMachineFileInfo" 
		) ) );
		$consolePreferences = "OBJET TODO";
		$cpuAffinity = "OBJET TODO";
		$cpuAllocation = "OBJET TODO";
		$flags = "OBJET TODO";
		$ftInfo = "OBJET TODO";
		$latencySensitivity = "OBJET TODO";
		$managedBy = "OBJET TODO";
		$memoryAffinity = "OBJET TODO";
		$memoryAllocation = "OBJET TODO";
		$networkShaper = "OBJET TODO";
		$scheduledHardwareUpgradeInfo = "OBJET TODO";
		$tools = "OBJET TODO";
		$vAppConfig = "OBJET TODO";
		
		$this->object->setAlternateGuestName ( "ALTGUESTNAME" )
			->setAnnotation ( "ANNOTATION" )
			->setBootOptions ( $bootOptions ) //VirtualMachineBootOptions
			->setChangeTrackingEnabled ( TRUE )
			->setChangeVersion ( "VERSION" )
			->setConsolePreferences ( $consolePreferences ) //VirtualMachineConsolePreferences
			->setCpuAffinity ( $cpuAffinity ) //VirtualMachineAffinityInfo
			->setCpuAllocation ( $cpuAllocation ) //ResourceAllocationInfo
			->setCpuFeatureMask ( array (
				"CpuFeatureMask" 
		) )
			->setCpuHotAddEnabled ( TRUE )
			->setCpuHotRemoveEnabled ( TRUE )
			->setChangeTrackingEnabled ( TRUE )
			->setExtraConfig ( array (
				"OptionValueClass" 
		) )
			->setFiles ( $files ) //VirtualMachineFileInfo
			->setFirmware ( "FIRMWARE" )
			->setFlags ( $flags ) //VirtualMachineFlagInfo
			->setFtInfo ( $ftInfo ) //FaultToleranceConfigInfo
			->setGuestAutoLockEnabled ( TRUE )
			->setGuestId ( "GUESTID" )
			->setInstanceUuid ( "INSTANCE_UUID" )
			->setLatencySensitivity ( $latencySensitivity ) //LatencySensitivity
			->setLocationId ( "locationId" )
			->setManagedBy ( $managedBy ) //ManagedByInfo
			->setMaxMksConnections ( 10 )
			->setMemoryAffinity ( $memoryAffinity ) //VirtualMachineAffinityInfo
			->setMemoryAllocation ( $memoryAllocation ) //ResourceAllocationInfo
			->setMemoryHotAddEnabled ( TRUE )
			->setChangeTrackingEnabled ( TRUE )
			->setMemoryReservationLockedToMax ( TRUE )
			->setName ( "NOM" )
			->setNestedHVEnabled ( TRUE )
			->setNetworkShaper ( $networkShaper ) //VirtualMachineNetworkShaperInfo
			->setNpivDesiredNodeWwns ( 15 )
			->setNpivDesiredPortWwns ( 10525 )
			->setNpivNodeWorldWideName ( array (
				"WWN" 
		) )
			->setNpivOnNonRdmDisks ( TRUE )
			->setNpivPortWorldWideName ( array (
				"PORT_WWN" 
		) )
			->setNpivTemporaryDisabled ( TRUE )
			->setNpivWorldWideNameType ( "TYPE" )
			->setScheduledHardwareUpgradeInfo ( $scheduledHardwareUpgradeInfo ) //ScheduledHardwareUpgradeInfo
			->setSwapPlacement ( "swapPlacement" )
			->setTools ( $tools ) //ToolsConfigInfo
			->setUuid ( "UUID" )
			->setVAppConfig ( $vAppConfig ) //VmConfigInfo
			->setVAssertsEnabled ( TRUE )
			->setVersion ( "VERSION" )
			->setVPMCEnabled ( TRUE );
		$this->assertEquals ( array (
				'alternateGuestName' => 'ALTGUESTNAME',
				'annotation' => 'ANNOTATION',
				'changeTrackingEnabled' => true,
				'changeVersion' => 'VERSION',
				'cpuFeatureMask' => Array (
						'CpuFeatureMask' 
				),
				'cpuHotAddEnabled' => true,
				'cpuHotRemoveEnabled' => true,
				'extraConfig' => Array (
						'OptionValueClass' 
				),
				'firmware' => 'FIRMWARE',
				'guestAutoLockEnabled' => true,
				'guestId' => 'GUESTID',
				'instanceUuid' => 'INSTANCE_UUID',
				'locationId' => 'locationId',
				'maxMksConnections' => 10,
				'memoryHotAddEnabled' => true,
				'memoryReservationLockedToMax' => true,
				'name' => 'NOM',
				'nestedHVEnabled' => true,
				'npivDesiredNodeWwns' => 15,
				'npivDesiredPortWwns' => 10525,
				'npivNodeWorldWideName' => Array (
						'WWN' 
				),
				'npivOnNonRdmDisks' => true,
				'npivPortWorldWideName' => Array (
						'PORT_WWN' 
				),
				'npivTemporaryDisabled' => true,
				'npivWorldWideNameType' => 'TYPE',
				'swapPlacement' => 'swapPlacement',
				'uuid' => 'UUID',
				'vAssertsEnabled' => true,
				'version' => 'VERSION',
				'vPMCEnabled' => true,
				'bootOptions' => Array (
						'bootOptions' 
				),
				'files' => Array (
						'VirtualMachineFileInfo' 
				),
				'consolePreferences' => 'OBJET TODO',
				'cpuAffinity' => 'OBJET TODO',
				'cpuAllocation' => 'OBJET TODO',
				'flags' => 'OBJET TODO',
				'ftInfo' => 'OBJET TODO',
				'latencySensitivity' => 'OBJET TODO',
				'managedBy' => 'OBJET TODO',
				'memoryAffinity' => 'OBJET TODO',
				'memoryAllocation' => 'OBJET TODO',
				'networkShaper' => 'OBJET TODO',
				'scheduledHardwareUpgradeInfo' => 'OBJET TODO',
				'tools' => 'OBJET TODO',
				'vAppConfig' => 'OBJET TODO' 
		), $this->object->renvoi_donnees_soap () );
	}

	/**
	 * @covers VirtualMachineConfig::renvoi_donnees_soap
	 */
	public function testrenvoi_donnees_soap_renvoi_objet() {
		$object = new arrayObject ();
		$this->assertEquals ( $object, $this->object->renvoi_donnees_soap ( true ) );
	}
}
