<?php
namespace Zorille\framework;
use \Exception as Exception;
use \ArrayObject as ArrayObject;
use \soapvar as soapvar;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-09-07 at 11:31:16.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class VirtualDiskTest extends MockedListeOptions {
	/**
     * @var VirtualDisk
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = new VirtualDisk ( false, "TESTS VirtualDisk" );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * @covers Zorille\framework\VirtualDisk::renvoi_donnees_soap
	 */
	public function testrenvoi_donnees_soap_Exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS VirtualDisk) Il faut definir une capacite au disque' );
		$this->object ->renvoi_donnees_soap ();
	}

	/**
	 * @covers Zorille\framework\VirtualDisk::renvoi_donnees_soap
	 */
	public function testrenvoi_donnees_soap() {
		$shares = $this ->createMock('Zorille\framework\SharesInfo' );
		$shares ->expects ( $this ->any () ) 
			->method ( 'renvoi_donnees_soap' ) 
			->will ( $this ->returnValue ( array ( 
				"SharesInfo" ) ) );
		$storageIOAllocation = $this ->createMock('Zorille\framework\StorageIOAllocationInfo' );
		$storageIOAllocation ->expects ( $this ->any () ) 
			->method ( 'renvoi_donnees_soap' ) 
			->will ( $this ->returnValue ( array ( 
				"StorageIOAllocationInfo" ) ) );
		$vFlashCacheConfigInfo = $this ->createMock('Zorille\framework\VirtualDiskVFlashCacheConfigInfo' );
		$vFlashCacheConfigInfo ->expects ( $this ->any () ) 
			->method ( 'renvoi_donnees_soap' ) 
			->will ( $this ->returnValue ( array ( 
				"VirtualDiskVFlashCacheConfigInfo" ) ) );
		$this->object ->setCapacityInBytes ( 80000000000 ) 
			->setDiskObjectId ( "diskObjectId" ) 
			->setShares ( $shares ) 
			->setStorageIOAllocation ( $storageIOAllocation ) 
			->setVFlashCacheConfigInfo ( $vFlashCacheConfigInfo );
		$this ->assertEquals ( 
				array ( 
							'capacityInKB' => 78125000.0, 
							'capacityInBytes' => 80000000000, 
							'diskObjectId' => 'diskObjectId', 
							'shares' => array ( 
									'SharesInfo' ), 
							'storageIOAllocation' => array ( 
									'StorageIOAllocationInfo' ), 
							'vFlashCacheConfigInfo' => array ( 
									'VirtualDiskVFlashCacheConfigInfo' ) ), 
					$this->object ->renvoi_donnees_soap () );
	}

	/**
	 * @covers Zorille\framework\VirtualDisk::renvoi_donnees_soap
	 */
	public function testrenvoi_donnees_soap_renvoi_objet() {
		$this->object ->setCapacityInKB ( 80000000 );
		$object = new arrayObject ( array ( 
				'capacityInKB' => 80000000 ) );
		$this ->assertEquals ( $object, $this->object ->renvoi_donnees_soap ( true ) );
	}

	/**
	 * @covers Zorille\framework\VirtualDisk::renvoi_objet_soap
	 */
	public function testrenvoi_objet_soap_renvoi_objet() {
		$this->object ->setCapacityInKB ( 80000000 );
		$object = new arrayObject ( array ( 
				'capacityInKB' => 80000000 ) );
		$resultat = new soapvar ( $object, SOAP_ENC_OBJECT, "VirtualDisk" );
		$this ->assertEquals ( $resultat, $this->object ->renvoi_objet_soap ( true ) );
	}
}
