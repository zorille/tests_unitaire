<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-09-07 at 11:31:16.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class CustomizationLinuxPrepTest extends MockedListeOptions {
	/**
     * @var CustomizationLinuxPrep
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = new CustomizationLinuxPrep ( false, "TESTS CustomizationLinuxPrep" );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * @covers CustomizationLinuxPrep::renvoi_donnees_soap
	 */
	public function testrenvoi_donnees_soap_Exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS CustomizationLinuxPrep) Il faut un hostName' );
		$this ->assertEquals ( "Never reached", $this->object ->renvoi_donnees_soap () );
	}

	/**
	 * @covers CustomizationLinuxPrep::renvoi_donnees_soap
	 */
	public function testrenvoi_donnees_soap_Exception2() {
		$hostName = $this ->createMock ( "CustomizationFixedName" );
		$hostName ->expects ( $this ->any () ) 
			->method ( 'renvoi_objet_soap' ) 
			->will ( $this ->returnValue ( array ( 
				"CustomizationName" ) ) );
		$this->object ->setHostName ( $hostName );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS CustomizationLinuxPrep) Il faut un domain' );
		$this ->assertEquals ( "Never reached", $this->object ->renvoi_donnees_soap () );
	}

	/**
	 * @covers CustomizationLinuxPrep::renvoi_donnees_soap
	 */
	public function testrenvoi_donnees_soap() {
		$hostName = $this ->createMock ( "CustomizationFixedName" );
		$hostName ->expects ( $this ->any () ) 
			->method ( 'renvoi_objet_soap' ) 
			->will ( $this ->returnValue ( array ( 
				"CustomizationName" ) ) );
		$this->object ->setDomain ( ".A.B.C.com" ) 
			->setHostName ( $hostName ) 
			->setHwClockUTC ( TRUE ) 
			->setTimeZone ( "Europe/Paris" );
		
		//Le webservice renvoie une erreur sur le champ timezone
		$this ->assertEquals ( array ( 
				'hostName' => Array ( 
						"CustomizationName" ), 
				'domain' => '.A.B.C.com', 
				'hwClockUTC' => true ), $this->object ->renvoi_donnees_soap () );
	}

	/**
	 * @covers CustomizationLinuxPrep::renvoi_donnees_soap
	 */
	public function testrenvoi_donnees_soap_renvoi_objet() {
		$hostName = $this ->createMock ( "CustomizationFixedName" );
		$hostName ->expects ( $this ->any () ) 
			->method ( 'renvoi_objet_soap' ) 
			->will ( $this ->returnValue ( array ( 
				"CustomizationName" ) ) );
		$this->object ->setHostName ( $hostName ) 
			->setDomain ( ".A.B.C.com" );
		$object = new arrayObject ( array ( 
				'hostName' => Array ( 
						"CustomizationName" ), 
				'domain' => '.A.B.C.com' ) );
		$this ->assertEquals ( $object, $this->object ->renvoi_donnees_soap ( true ) );
	}

	/**
	 * @covers CustomizationLinuxPrep::renvoi_objet_soap
	 */
	public function testrenvoi_objet_soap_renvoi_objet() {
		$hostName = $this ->createMock ( "CustomizationFixedName" );
		$hostName ->expects ( $this ->any () ) 
			->method ( 'renvoi_objet_soap' ) 
			->will ( $this ->returnValue ( array ( 
				"CustomizationName" ) ) );
		$this->object ->setHostName ( $hostName ) 
			->setDomain ( ".A.B.C.com" );
		$object = new arrayObject ( array ( 
				'hostName' => Array ( 
						"CustomizationName" ), 
				'domain' => '.A.B.C.com' ) );
		$resultat = new soapvar ( $object, SOAP_ENC_OBJECT, "CustomizationLinuxPrep" );
		$this ->assertEquals ( $resultat, $this->object ->renvoi_objet_soap ( true ) );
	}
}
