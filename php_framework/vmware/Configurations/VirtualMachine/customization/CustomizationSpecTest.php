<?php
namespace Zorille\framework;
use \Exception as Exception;
use \ArrayObject as ArrayObject;
use \soapvar as soapvar;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-09-07 at 11:31:16.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class CustomizationSpecTest extends MockedListeOptions {
	/**
     * @var CustomizationSpec
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = new CustomizationSpec ( false, "TESTS CustomizationSpec" );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * @covers Zorille\framework\CustomizationSpec::renvoi_donnees_soap
	 */
	public function testrenvoi_donnees_soap_Exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS CustomizationSpec) Il faut un globalIPSettings' );
		$this->object ->renvoi_donnees_soap ();
	}

	/**
	 * @covers Zorille\framework\CustomizationSpec::renvoi_donnees_soap
	 */
	public function testrenvoi_donnees_soap_Exception2() {
		$globalIPSettings = $this ->createMock('Zorille\framework\CustomizationGlobalIPSettings' );
		$globalIPSettings ->expects ( $this ->any () ) 
			->method ( 'renvoi_donnees_soap' ) 
			->will ( $this ->returnValue ( array ( 
				"CustomizationGlobalIPSettings" ) ) );
		$this->object ->setGlobalIPSettings ( $globalIPSettings );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS CustomizationSpec) Il faut une identity' );
		$this->object ->renvoi_donnees_soap ();
	}

	/**
	 * @covers Zorille\framework\CustomizationSpec::renvoi_donnees_soap
	 */
	public function testrenvoi_donnees_soap() {
		$globalIPSettings = $this ->createMock('Zorille\framework\CustomizationGlobalIPSettings' );
		$globalIPSettings ->expects ( $this ->any () ) 
			->method ( 'renvoi_donnees_soap' ) 
			->will ( $this ->returnValue ( array ( 
				"CustomizationGlobalIPSettings" ) ) );
		$identity = $this ->createMock('Zorille\framework\CustomizationGlobalIPSettings' );
		$identity ->expects ( $this ->any () ) 
			->method ( 'renvoi_objet_soap' ) 
			->will ( $this ->returnValue ( array ( 
				"CustomizationGlobalIPSettings" ) ) );
		$options = $this ->createMock('Zorille\framework\CustomizationLinuxOptions' );
		$options ->expects ( $this ->any () ) 
			->method ( 'renvoi_objet_soap' ) 
			->will ( $this ->returnValue ( array ( 
				"CustomizationLinuxOptions" ) ) );
		$this->object ->setEncryptionKey ( "encryptionKey" ) 
			->setGlobalIPSettings ( $globalIPSettings ) 
			->setIdentity ( $identity ) 
			->setNicSettingMap ( array ( 
				"nicSettingMap" ) ) 
			->setOptions ( $options );
		$this ->assertEquals ( 
				array ( 
							'encryptionKey' => 'encryptionKey', 
							'globalIPSettings' => Array ( 
									"CustomizationGlobalIPSettings" ), 
							'identity' => Array ( 
									"CustomizationGlobalIPSettings" ), 
							'nicSettingMap' => Array ( 
									"nicSettingMap" ), 
							'options' => Array ( 
									"CustomizationLinuxOptions" ) ), 
					$this->object ->renvoi_donnees_soap () );
	}

	/**
	 * @covers Zorille\framework\CustomizationSpec::renvoi_donnees_soap
	 */
	public function testrenvoi_donnees_soap_renvoi_objet() {
		$globalIPSettings = $this ->createMock('Zorille\framework\CustomizationGlobalIPSettings' );
		$globalIPSettings ->expects ( $this ->any () ) 
			->method ( 'renvoi_donnees_soap' ) 
			->will ( $this ->returnValue ( array ( 
				"CustomizationGlobalIPSettings" ) ) );
		$identity = $this ->createMock('Zorille\framework\CustomizationGlobalIPSettings' );
		$identity ->expects ( $this ->any () ) 
			->method ( 'renvoi_objet_soap' ) 
			->will ( $this ->returnValue ( array ( 
				"CustomizationGlobalIPSettings" ) ) );
		$this->object ->setGlobalIPSettings ( $globalIPSettings ) 
			->setIdentity ( $identity );
		$object = new arrayObject ( array ( 
				'globalIPSettings' => Array ( 
						"CustomizationGlobalIPSettings" ), 
				'identity' => Array ( 
						"CustomizationGlobalIPSettings" ) ) );
		$this ->assertEquals ( $object, $this->object ->renvoi_donnees_soap ( true ) );
	}

	/**
	 * @covers Zorille\framework\CustomizationSpec::renvoi_objet_soap
	 */
	public function testrenvoi_objet_soap_renvoi_objet() {
		$globalIPSettings = $this ->createMock('Zorille\framework\CustomizationGlobalIPSettings' );
		$globalIPSettings ->expects ( $this ->any () ) 
			->method ( 'renvoi_donnees_soap' ) 
			->will ( $this ->returnValue ( array ( 
				"CustomizationGlobalIPSettings" ) ) );
		$identity = $this ->createMock('Zorille\framework\CustomizationGlobalIPSettings' );
		$identity ->expects ( $this ->any () ) 
			->method ( 'renvoi_objet_soap' ) 
			->will ( $this ->returnValue ( array ( 
				"CustomizationGlobalIPSettings" ) ) );
		$this->object ->setGlobalIPSettings ( $globalIPSettings ) 
			->setIdentity ( $identity );
		$object = new arrayObject ( array ( 
				'globalIPSettings' => Array ( 
						"CustomizationGlobalIPSettings" ), 
				'identity' => Array ( 
						"CustomizationGlobalIPSettings" ) ) );
		$resultat = new soapvar ( $object, SOAP_ENC_OBJECT, "CustomizationSpec" );
		$this ->assertEquals ( $resultat, $this->object ->renvoi_objet_soap ( true ) );
	}
}
