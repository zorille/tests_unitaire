<?php
namespace Zorille\framework;
use \Exception as Exception;
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-09-01 at 14:40:26.
 */
class gestion_connexion_urlTest extends MockedListeOptions {
	/**
     * @var gestion_connexion_url
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		
		$utilisateurs = $this ->createMock('Zorille\framework\utilisateurs' );
		$utilisateurs ->expects ( $this ->any () ) 
			->method ( 'retrouve_utilisateurs_array' ) 
			->will ( $this ->returnValue ( $utilisateurs ) );
		$utilisateurs ->expects ( $this ->any () ) 
			->method ( 'getUsername' ) 
			->will ( $this ->returnValue ( 'USER1' ) );
		$utilisateurs ->expects ( $this ->any () ) 
			->method ( 'getPassword' ) 
			->will ( $this ->returnValue ( 'PASS1' ) );
		
		$this->object = new gestion_connexion_url ( false, "TEST gestion_connexion_url" );
		$this->object ->setListeOptions ( $this ->getListeOption () ) 
			->setObjetUtilisateurs ( $utilisateurs );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * @covers Zorille\framework\gestion_connexion_url::retrouve_connexion_params
	 */
	public function testRetrouve_connexion_params_Exception() {
		$serveur_data = array ( 
				"tunnel" => array ( 
						"tunnel" ), 
				"proxy" => array ( 
						"proxy" ), 
				"useSSL" => "oui" );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TEST gestion_connexion_url) Il faut un Host ou Port pour creer une connexion.' );
		$this->object ->retrouve_connexion_params ( $serveur_data );
		$this ->assertEquals ( array (), $this->object ->getTunnel () );
		$this ->assertEquals ( array (), $this->object ->getProxy () );
		$this ->assertFalse ( $this->object ->getHttps () );
	}

	/**
	 * @covers Zorille\framework\gestion_connexion_url::retrouve_connexion_params
	 * WARNING : ssh not use timeoutssh !!!
	 */
// 	public function testRetrouve_connexion_params_tunnel() {
// 		$this ->getListeOption () 
// 			->method ( 'verifie_option_existe' ) 
// 			->with ( "use_tunnel" ) 
// 			->will ( $this ->returnValue ( true ) );
		
// 		$this->object ->reset_datas ();
// 		$serveur_data = array ( 
// 				"host" => "HOST_TEST", 
// 				"port" => "80", 
// 				"tunnel" => array ( 
// 						"host" => "host_rebond", 
// 						"port" => 18018, 
// 						"timeoutssh" => 1 ), 
// 				"proxy" => array ( 
// 						"proxy" ), 
// 				"useSSL" => "oui", 
// 				"uri" => "/uri" );
// 		$this ->expectException(Exception::class);
//         $this->expectExceptionMessage( '(TEST gestion_connexion_url) La connexion a la machine HOST_TEST par tunnel est en erreur' );
// 		$this->object ->retrouve_connexion_params ( $serveur_data );
		
// 		$this ->assertEquals ( array ( 
// 				"host" => "host_rebond", 
// 				"port" => 18018, 
// 				"timeoutssh" => 1 ), $this->object ->getTunnel () );
// 		$this ->assertEquals ( array (), $this->object ->getProxy () );
// 		$this ->assertTrue ( $this->object ->getHttps () );
// 	}

	/**
     * @covers Zorille\framework\gestion_connexion_url::retrouve_connexion_params
     */
	public function testRetrouve_connexion_params() {
		$this ->getListeOption () 
			->method ( 'verifie_option_existe' ) 
			->with ( "use_tunnel" ) 
			->will ( $this ->returnValue ( false ) );
		
		$this->object ->reset_datas ();
		$serveur_data = array ( 
				"host" => "HOST_TEST", 
				"port" => "80", 
				"tunnel" => array ( 
						"host" => "host_rebond", 
						"port" => 18018, 
						"timeoutssh" => 1 ), 
				"proxy" => array ( 
						"proxy" ), 
				"useSSL" => "oui", 
				"uri" => "/uri" );
		
		$this->object ->reset_datas ();
		$this ->assertSame ( $this->object, $this->object ->retrouve_connexion_params ( $serveur_data ) );
		$this ->assertEquals ( array (), $this->object ->getTunnel () );
		$this ->assertEquals ( array ( 
				"proxy" ), $this->object ->getProxy () );
		$this ->assertTrue ( $this->object ->getHttps () );
	}

	/**
     * @covers Zorille\framework\gestion_connexion_url::valide_tunnel_existe
     */
	public function testValide_tunnel_existe() {
		$this ->assertFalse ( $this->object ->valide_tunnel_existe () );
		
		$this->object ->setTunnel ( array ( 
				"tunnel" ) );
		$this ->assertTrue ( $this->object ->valide_tunnel_existe () );
	}

	/**
     * @covers Zorille\framework\gestion_connexion_url::utilise_tunnel
     */
	public function testUtilise_tunnel() {
		$this ->assertFalse ( $this->object ->utilise_tunnel () );
	}

	/**
     * @covers Zorille\framework\gestion_connexion_url::valide_proxy_existe
     */
	public function testValide_proxy_existe() {
		$this ->assertFalse ( $this->object ->valide_proxy_existe () );
		
		$this->object ->setProxy ( array ( 
				"proxy" ) );
		$this ->assertTrue ( $this->object ->valide_proxy_existe () );
	}

	/**
     * @covers Zorille\framework\gestion_connexion_url::utilise_proxy
     */
	public function testUtilise_proxy() {
		$this ->assertEquals ( array (), $this->object ->utilise_proxy () );
		
		$this->object ->setProxy ( array ( 
				"proxy" ) );
		$this ->assertEquals ( array (), $this->object ->utilise_proxy () );
		
		$this->object ->setProxy ( array ( 
				"host" => "CI_TEST" ) );
		$this ->assertEquals ( array ( 
				"proxy_host" => "CI_TEST", 
				'proxy_port' => '80', 
				'proxy_login' => 'USER1', 
				'proxy_password' => 'PASS1', 
				'proxy_type' => 0 ), $this->object ->utilise_proxy () );
		
		$this->object ->setProxy ( array ( 
				"host" => "CI_TEST", 
				"port" => 8080, 
				"login" => "LOGIN", 
				"password" => "PASSWD", 
				"type" => 5 ) );
		$this ->assertEquals ( array ( 
				"proxy_host" => "CI_TEST", 
				'proxy_port' => 8080, 
				'proxy_login' => 'LOGIN', 
				'proxy_password' => 'PASSWD', 
				'proxy_type' => 5 ), $this->object ->utilise_proxy () );
	}

	/**
     * @covers Zorille\framework\gestion_connexion_url::utilise_SSL
     */
	public function testUtilise_SSL() {
		$this ->assertEquals ( "http://", $this->object ->utilise_SSL () );
		
		$this->object ->setHttps ( true );
		$this ->assertEquals ( "https://", $this->object ->utilise_SSL () );
	}

	/**
	 * @covers Zorille\framework\gestion_connexion_url::prepare_prepend_url
	 */
	public function testPrepare_prepend_url() {
		$this->object ->prepare_prepend_url ();
		$this ->assertEquals ( "http://:", $this->object ->getPrependUrl () );
		
		$this->object ->setHost ( "TEST_HOST" );
		$this->object ->setPort ( "TEST_PORT" );
		$this->object ->prepare_prepend_url ();
		$this ->assertEquals ( "http://TEST_HOST:TEST_PORT", $this->object ->getPrependUrl () );
		
		$this->object ->prepare_prepend_url ( "/URI" );
		$this ->assertEquals ( "http://TEST_HOST:TEST_PORT/URI", $this->object ->getPrependUrl () );
	}

	/**
     * @covers Zorille\framework\gestion_connexion_url::reset_datas
     * @todo   Implement testReset_datas().
     */
	public function testReset_datas() {
		$this ->getListeOption () 
			->method ( 'verifie_option_existe' ) 
			->will ( $this ->returnValue ( false ) );
		
		$serveur_data = array ( 
				"host" => "HOST_TEST", 
				"port" => "80", 
				"tunnel" => array ( 
						"host" => "host_rebond", 
						"port" => 18018, 
						"timeoutssh" => 2 ), 
				"proxy" => array ( 
						"proxy" ), 
				"useSSL" => "oui" );
		
		$this->object ->retrouve_connexion_params ( $serveur_data );
		$this ->assertEquals ( "", $this->object ->getPrependUrl () );
		$this ->assertEquals ( "HOST_TEST", $this->object ->getHost () );
		$this ->assertEquals ( "80", $this->object ->getPort () );
		$this ->assertEquals ( array (), $this->object ->getTunnel () );
		$this ->assertEquals ( array ( 
				"proxy" ), $this->object ->getProxy () );
		$this ->assertSame ( $this->object, $this->object ->reset_datas () );
		$this ->assertEquals ( "", $this->object ->getPrependUrl () );
		$this ->assertEquals ( "", $this->object ->getHost () );
		$this ->assertEquals ( "0", $this->object ->getPort () );
		$this ->assertEquals ( array (), $this->object ->getTunnel () );
		$this ->assertEquals ( array (), $this->object ->getProxy () );
	}
}
