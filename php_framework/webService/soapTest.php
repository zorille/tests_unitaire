<?php
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-09-01 at 14:36:57.
 */
class soapTest extends MockedListeOptions {
	/**
     * @var soap
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		
		$this->object = new soap ( false, "TEST soap" );
		$this->object ->setListeOptions ( $this ->getListeOption () );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * @covers soap::valide_presence_variables
	 */
	public function testValide_presence_variables_host_Exception() {
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->at ( 0 ) ) 
			->method ( 'getHost' ) 
			->will ( $this ->returnValue ( "" ) );
		$this->object ->setGestionConnexionUrl ( $gestion_connexion_url );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TEST soap) Il faut un champ host dans la definition du soap' );
		$this->object ->valide_presence_variables ();
	}

	/**
	 * @covers soap::valide_presence_variables
	 */
	public function testValide_presence_variables_port_Exception() {
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getHost' ) 
			->will ( $this ->returnValue ( "TEST_HOST" ) );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getPort' ) 
			->will ( $this ->returnValue ( "" ) );
		$this->object ->setGestionConnexionUrl ( $gestion_connexion_url );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TEST soap) Il faut un champ port dans la definition du soap' );
		$this->object ->valide_presence_variables ();
	}

	/**
	 * @covers soap::valide_presence_variables
	 */
	public function testValide_presence_variables_url_Exception() {
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getHost' ) 
			->will ( $this ->returnValue ( "TEST_HOST" ) );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getPort' ) 
			->will ( $this ->returnValue ( "TEST_PORT" ) );
		$this->object ->setGestionConnexionUrl ( $gestion_connexion_url );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TEST soap) Il faut un champ url dans la definition du soap' );
		$this->object ->valide_presence_variables ();
	}

	/**
	 * @covers soap::valide_presence_variables
	 */
	public function testValide_presence_variables_wsdl_Exception() {
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getHost' ) 
			->will ( $this ->returnValue ( "TEST_HOST" ) );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getPort' ) 
			->will ( $this ->returnValue ( "TEST_PORT" ) );
		$this->object ->setGestionConnexionUrl ( $gestion_connexion_url );
		$this->object ->setUrl ( "TEST_URI" );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TEST soap) Il faut un champ wsdl dans la definition du soap' );
		$this->object ->valide_presence_variables ();
	}

	/**
	 * @covers soap::valide_presence_variables
	 */
	public function testValide_presence_variables_ConnexionTimeout_Exception() {
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getHost' ) 
			->will ( $this ->returnValue ( "TEST_HOST" ) );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getPort' ) 
			->will ( $this ->returnValue ( "TEST_PORT" ) );
		$this->object ->setGestionConnexionUrl ( $gestion_connexion_url );
		$this->object ->setUrl ( "TEST_URI" );
		$this->object ->setWsdl ( "TEST_WSDL" );
		$this->object ->setConnexionTimeout ( "" );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TEST soap) Il faut un champ RequestTimeout dans la definition du soap' );
		$this->object ->valide_presence_variables ();
	}

	/**
     * @covers soap::valide_presence_variables
     */
	public function testValide_presence_variables() {
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getHost' ) 
			->will ( $this ->returnValue ( "TEST_HOST" ) );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getPort' ) 
			->will ( $this ->returnValue ( "TEST_PORT" ) );
		$this->object ->setGestionConnexionUrl ( $gestion_connexion_url );
		$this->object ->setUrl ( "TEST_URI" );
		$this->object ->setWsdl ( "TEST_WSDL" );
		$this ->assertSame ( $this->object, $this->object ->valide_presence_variables () );
	}

	/**
	 * @covers soap::retrouve_variables_tableau
	 */
	public function testRetrouve_variables_tableau_Exception() {
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'reset_datas', 'retrouve_connexion_params' ) 
			->will ( $this ->returnSelf () );
		$this->object ->setGestionConnexionUrl ( $gestion_connexion_url );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TEST soap) Il faut un tableau de definition du serveur' );
		$this->object ->retrouve_variables_tableau ( false );
	}

	/**
	 * @covers soap::retrouve_variables_tableau
	 */
	public function testRetrouve_variables_tableau_url_Exception() {
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'reset_datas', 'retrouve_connexion_params' ) 
			->will ( $this ->returnSelf () );
		$this->object ->setGestionConnexionUrl ( $gestion_connexion_url );
		$serveur_data = array ();
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TEST soap) Il faut un champ url dans la definition du serveur' );
		$this->object ->retrouve_variables_tableau ( $serveur_data );
	}

	/**
	 * @covers soap::retrouve_variables_tableau
	 */
	public function testRetrouve_variables_tableau_wsdl_Exception() {
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'reset_datas', 'retrouve_connexion_params' ) 
			->will ( $this ->returnSelf () );
		$this->object ->setGestionConnexionUrl ( $gestion_connexion_url );
		$serveur_data = array ();
		$serveur_data ["url"] = "TEST_URI";
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TEST soap) Il faut un champ wsdl dans la definition du serveur' );
		$this->object ->retrouve_variables_tableau ( $serveur_data );
	}

	/**
	 * @covers soap::retrouve_variables_tableau
	 */
	public function testRetrouve_variables_tableau_methode_Exception() {
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'reset_datas', 'retrouve_connexion_params' ) 
			->will ( $this ->returnSelf () );
		$this->object ->setGestionConnexionUrl ( $gestion_connexion_url );
		$serveur_data = array ();
		$serveur_data ["url"] = "TEST_URI";
		$serveur_data ["wsdl"] = "TEST_WSDL";
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TEST soap) Il faut un champ methode (soap/curl) dans la definition du serveur' );
		$this->object ->retrouve_variables_tableau ( $serveur_data );
	}

	/**
	 * @covers soap::retrouve_variables_tableau
	 */
	public function testRetrouve_variables_tableau_username_Exception() {
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'reset_datas', 'retrouve_connexion_params' ) 
			->will ( $this ->returnSelf () );
		$this->object ->setGestionConnexionUrl ( $gestion_connexion_url );
		$serveur_data = array ();
		$serveur_data ["url"] = "TEST_URI";
		$serveur_data ["wsdl"] = "TEST_WSDL";
		$serveur_data ["methode"] = "TEST_SOAP";
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TEST soap) Il faut un champ username dans la definition du serveur' );
		$this->object ->retrouve_variables_tableau ( $serveur_data );
	}

	/**
	 * @covers soap::retrouve_variables_tableau
	 */
	public function testRetrouve_variables_tableau_password_Exception() {
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'reset_datas', 'retrouve_connexion_params' ) 
			->will ( $this ->returnSelf () );
		$this->object ->setGestionConnexionUrl ( $gestion_connexion_url );
		$serveur_data = array ();
		$serveur_data ["url"] = "TEST_URI";
		$serveur_data ["wsdl"] = "TEST_WSDL";
		$serveur_data ["methode"] = "TEST_SOAP";
		$serveur_data ["username"] = "TEST_USER";
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TEST soap) Il faut un champ password dans la definition du serveur' );
		$this->object ->retrouve_variables_tableau ( $serveur_data );
	}

	/**
	 * @covers soap::retrouve_variables_tableau
	 */
	public function testRetrouve_variables_tableau_RequestTimeout_Exception() {
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'reset_datas', 'retrouve_connexion_params' ) 
			->will ( $this ->returnSelf () );
		$this->object ->setGestionConnexionUrl ( $gestion_connexion_url );
		$serveur_data = array ();
		$serveur_data ["url"] = "TEST_URI";
		$serveur_data ["wsdl"] = "TEST_WSDL";
		$serveur_data ["methode"] = "TEST_SOAP";
		$serveur_data ["username"] = "TEST_USER";
		$serveur_data ["password"] = "TEST_PASS";
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TEST soap) Il faut un champ RequestTimeout dans la definition du serveur' );
		$this->object ->retrouve_variables_tableau ( $serveur_data );
	}

	/**
     * @covers soap::retrouve_variables_tableau
     */
	public function testRetrouve_variables_tableau() {
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'reset_datas', 'retrouve_connexion_params' ) 
			->will ( $this ->returnSelf () );
		$this->object ->setGestionConnexionUrl ( $gestion_connexion_url );
		
		//$serveur_data ["host"] = "TEST_HOST";
		//$serveur_data ["port"] = "TEST_PORT";
		$serveur_data ["url"] = "TEST_URI";
		$serveur_data ["wsdl"] = "TEST_WSDL";
		$serveur_data ["methode"] = "TEST_SOAP";
		$serveur_data ["username"] = "TEST_USER";
		$serveur_data ["password"] = "TEST_PASS";
		$serveur_data ["connexion"] = "oui";
		$serveur_data ["RequestTimeout"] = 120;
		$this ->assertSame ( $this->object, $this->object ->retrouve_variables_tableau ( $serveur_data ) );
	}

	/**
     * @covers soap::retrouve_variables_liste_options
     */
	public function testRetrouve_variables_liste_options() {
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'reset_datas', 'retrouve_connexion_params' ) 
			->will ( $this ->returnSelf () );
		$this->object ->setGestionConnexionUrl ( $gestion_connexion_url );
		
		$this ->getListeOption () 
			->expects ( $this ->at ( 0 ) ) 
			->method ( 'verifie_parametre_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->at ( 1 ) ) 
			->method ( 'verifie_parametre_standard' ) 
			->will ( $this ->returnValue ( false ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		$this ->assertEquals ( null, $this->object ->retrouve_variables_liste_options () );
		
		$this ->getListeOption () 
			->expects ( $this ->at ( 0 ) ) 
			->method ( 'verifie_parametre_standard' ) 
			->will ( $this ->returnValue ( false ) );
		$this ->getListeOption () 
			->expects ( $this ->at ( 1 ) ) 
			->method ( 'verifie_parametre_standard' ) 
			->will ( $this ->returnValue ( true ) );
		$this ->getListeOption () 
			->expects ( $this ->any () ) 
			->method ( 'renvoi_variables_standard' ) 
			->will ( $this ->returnValue ( "VALUE" ) );
		$this->object ->setListeOptions ( $this ->getListeOption () );
		$this ->assertSame ( $this->object, $this->object ->retrouve_variables_liste_options () );
	}

	/**
     * @covers soap::prepare_donnees_connexion
     */
	public function testPrepare_donnees_connexion() {
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'utilise_proxy' ) 
			->will ( $this ->returnValue ( array () ) );
		$this->object ->setGestionConnexionUrl ( $gestion_connexion_url ) 
			->setSoapAddedParams ( array ( 
				"Param_Sup" => "Valeur_Sup" ) );
		$this ->assertContains ( array ( 
				'soap_version' => 1, 
				'login' => '', 
				'password' => '', 
				'connection_timeout' => 120, 
				'cache_wsdl' => 0, 
				'trace' => 0, 
				'exceptions' => true, 
				'Param_Sup' => 'Valeur_Sup' ), $this->object ->prepare_donnees_connexion () );
	}

	/**
	 * @covers soap::connect
	 */
	public function testConnect_variables_Exception() {
		$this->object ->setUrl ( "TEST_URI" );
		$this->object ->setWsdl ( "TEST_WSDL" );
		
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'prepare_prepend_url' ) 
			->will ( $this ->returnValue ( "http://TEST/" ) );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getHost' ) 
			->will ( $this ->returnValue ( "TEST_HOST" ) );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getPort' ) 
			->will ( $this ->returnValue ( "TEST_PORT" ) );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'utilise_proxy' ) 
			->will ( $this ->returnValue ( array ( 
				"proxy_host" => "host", 
				"proxy_port" => "port", 
				"proxy_login" => "LOGIN", 
				"proxy_password" => "PASS", 
				"proxy_type" => "5" ) ) );
		$this->object ->setGestionConnexionUrl ( $gestion_connexion_url );
		
		$this->object ->setConnexionTimeout ( "" );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TEST soap) Il faut un champ RequestTimeout dans la definition du soap' );
		$this->object ->connect ();
	}

	/**
	 * @covers soap::connect
	 */
	public function testConnect_Exception() {
		$this->object ->setUrl ( "TEST_URI" );
		$this->object ->setWsdl ( "TEST_WSDL" );
		
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'prepare_prepend_url' ) 
			->will ( $this ->returnValue ( "http://TEST/" ) );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getHost' ) 
			->will ( $this ->returnValue ( "TEST_HOST" ) );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getPort' ) 
			->will ( $this ->returnValue ( "TEST_PORT" ) );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'utilise_proxy' ) 
			->will ( $this ->returnValue ( array ( 
				"proxy_host" => "host", 
				"proxy_port" => "port", 
				"proxy_login" => "LOGIN", 
				"proxy_password" => "PASS", 
				"proxy_type" => "5" ) ) );
		$this->object ->setGestionConnexionUrl ( $gestion_connexion_url );
		
		$this->object ->setConnexionTimeout ( 120 );
		$this->object ->setMethode ( "TEST" );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TEST soap) Methode inconnue : TEST' );
		$this->object ->connect ();
	}

	/**
     * @covers soap::connect
     */
	public function testConnect_soap_option() {
		$this->object ->setUrl ( "TEST_URI" );
		$this->object ->setWsdl ( "TEST_WSDL" );
		
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'prepare_prepend_url' ) 
			->will ( $this ->returnValue ( "http://TEST/" ) );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getHost' ) 
			->will ( $this ->returnValue ( "TEST_HOST" ) );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getPort' ) 
			->will ( $this ->returnValue ( "TEST_PORT" ) );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'utilise_proxy' ) 
			->will ( $this ->returnValue ( array ( 
				"proxy_host" => "host", 
				"proxy_port" => "port", 
				"proxy_login" => "LOGIN", 
				"proxy_password" => "PASS", 
				"proxy_type" => "5" ) ) );
		$this->object ->setGestionConnexionUrl ( $gestion_connexion_url );
		$this->object ->setConnexionTimeout ( 120 );
		$this->object ->setMethode ( "soap" );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TEST soap) SoapClient::SoapClient(): \'uri\' option is required in nonWSDL mode' );
		$this->object ->connect ();
		
		$curl = $this ->createMock ( "curl" );
		$curl ->expects ( $this ->any () ) 
			->method ( 'setSslVerifyPeerAndHost', 'setReturnTransfert', 'setUserPasswd', "setHttpHAuth", "setTimeout" ) 
			->will ( $this ->returnValue ( "http://TEST/" ) );
		$this->object ->setCurlObjet ( $curl );
		$this->object ->setLogin ( "LOGIN" );
		$this->object ->setMethode ( "curl" );
		$this ->assertSame ( $this->object, $this->object ->connect () );
	}

	/**
	 * @covers soap::connect
	 */
	public function testConnect_curl_option() {
		$this->object ->setUrl ( "TEST_URI" );
		$this->object ->setWsdl ( "TEST_WSDL" );
		
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'prepare_prepend_url' ) 
			->will ( $this ->returnValue ( "http://TEST/" ) );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getHost' ) 
			->will ( $this ->returnValue ( "TEST_HOST" ) );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getPort' ) 
			->will ( $this ->returnValue ( "TEST_PORT" ) );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'utilise_proxy' ) 
			->will ( $this ->returnValue ( array ( 
				"proxy_host" => "host", 
				"proxy_port" => "port", 
				"proxy_login" => "LOGIN", 
				"proxy_password" => "PASS", 
				"proxy_type" => "5" ) ) );
		$this->object ->setGestionConnexionUrl ( $gestion_connexion_url );
		$this->object ->setConnexionTimeout ( 120 );
		
		$curl = $this ->createMock ( "curl" );
		$curl ->expects ( $this ->any () ) 
			->method ( 'setSslVerifyPeerAndHost', 'setReturnTransfert', 'setUserPasswd', "setHttpHAuth", "setTimeout" ) 
			->will ( $this ->returnValue ( "http://TEST/" ) );
		$this->object ->setCurlObjet ( $curl );
		$this->object ->setLogin ( "LOGIN" );
		$this->object ->setMethode ( "curl" );
		$this ->assertSame ( $this->object, $this->object ->connect () );
	}

	/**
     * @covers soap::connect_curl
     */
	public function testConnect_curl() {
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getPrependUrl' ) 
			->will ( $this ->returnValue ( "http://TEST/" ) );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'utilise_proxy' ) 
			->will ( $this ->returnValue ( array ( 
				"proxy_host" => "host", 
				"proxy_port" => "port", 
				"proxy_login" => "LOGIN", 
				"proxy_password" => "PASS", 
				"proxy_type" => "5" ) ) );
		$this->object ->setGestionConnexionUrl ( $gestion_connexion_url );
		$curl = $this ->createMock ( "curl" );
		$curl ->expects ( $this ->any () ) 
			->method ( 'setSslVerifyPeerAndHost', 'setReturnTransfert', 'setUserPasswd', "setHttpHAuth", "setTimeout" ) 
			->will ( $this ->returnValue ( "http://TEST/" ) );
		$this->object ->setCurlObjet ( $curl );
		$this->object ->setLogin ( "LOGIN" );
		$this ->assertSame ( $this->object, $this->object ->connect_curl () );
	}

	/**
     * @covers soap::send_curl_soap_requete
     */
	public function testSend_curl_soap_requete() {
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getPrependUrl' ) 
			->will ( $this ->returnValue ( "http://TEST/" ) );
		$this->object ->setGestionConnexionUrl ( $gestion_connexion_url );
		$curl = $this ->createMock ( "curl" );
		$curl ->expects ( $this ->any () ) 
			->method ( 'send_curl' ) 
			->will ( $this ->returnValue ( "http://TEST/" ) );
		$this->object ->setCurlObjet ( $curl );
		
		$this ->assertEquals ( "http://TEST/", $this->object ->send_curl_soap_requete ( "REQUETE_SOAP" ) );
	}
}
