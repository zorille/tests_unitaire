<?php
namespace Zorille\framework;
/**
 * @ignore
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

require_once __DOCUMENT_ROOT__ . '/sgbd/rep_requete/Zorille_framework_sql.class.php';
use Zorille\framework;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-06-04 at 12:16:00.
 */
class sqlTest extends MockedListeOptions {
	/**
     * @var sql
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = new sql ( false, "TESTS sql" );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers Zorille\framework\sql::creer_where
     * Implement testCreer_where().
     */
	public function testCreer_where() {
		$this->assertEquals ( "", $this->object->creer_where ( "" ) );
		$this->assertEquals ( " WHERE test='oui'", $this->object->creer_where ( "test='oui'" ) );
		$this->assertEquals ( " WHERE test1='oui' AND test2='non'", $this->object->creer_where ( array (
				"test1='oui'",
				"test2='non'" 
		) ) );
	}

	/**
     * @covers Zorille\framework\sql::creer_liste_and
     * Implement testCreer_liste_and().
     */
	public function testCreer_liste_and() {
		$this->assertEquals ( "", $this->object->creer_liste_and ( "" ) );
		$this->assertEquals ( "", $this->object->creer_liste_and ( "test='oui'" ) );
		$this->assertEquals ( "test1='oui' AND test2='non'", $this->object->creer_liste_and ( array (
				"test1='oui'",
				"test2='non'" 
		) ) );
	}

	/**
     * @covers Zorille\framework\sql::creer_liste_or
     * Implement testCreer_liste_or().
     */
	public function testCreer_liste_or() {
		$this->assertEquals ( "", $this->object->creer_liste_or ( "" ) );
		$this->assertEquals ( "", $this->object->creer_liste_or ( "test='oui'" ) );
		$this->assertEquals ( "test1='oui' OR test2='non'", $this->object->creer_liste_or ( array (
				"test1='oui'",
				"test2='non'" 
		) ) );
	}

	/**
     * @covers Zorille\framework\sql::creer_liste
     * Implement testCreer_liste().
     */
	public function testCreer_liste() {
		$this->assertFalse ( $this->object->creer_liste ( "" ) );
		$this->assertFalse ( $this->object->creer_liste ( "test='oui'" ) );
		$this->assertEquals ( "val1,val2", $this->object->creer_liste ( array (
				"val1",
				"val2" 
		) ) );
		$this->assertEquals ( "'val1','val2'", $this->object->creer_liste ( array (
				"val1",
				"val2" 
		), "'" ) );
	}

	/**
     * @covers Zorille\framework\sql::creer_select
     * Implement testCreer_select().
     */
	public function testCreer_select() {
		$this->object->creer_select ( "champ1", "from1", "test1='oui'" );
		$this->assertEquals ( "SELECT  champ1 FROM from1  WHERE test1='oui'", $this->object->getSql () );
		$this->object->creer_select ( array (
				"champ1",
				"champ2" 
		), array (
				"from1",
				"from2" 
		), array (
				"test1='oui'",
				"test2='non'" 
		) );
		$this->assertEquals ( "SELECT  champ1,champ2 FROM from1,from2 WHERE test1='oui' AND test2='non'", $this->object->getSql () );
		$this->object->creer_select ( "champ1", "from1", "test1='oui'", "ORDER BY champ1", "DISTINCT" );
		$this->assertEquals ( "SELECT DISTINCT champ1 FROM from1  WHERE test1='oui' ORDER BY champ1 ", $this->object->getSql () );
	}

	/**
     * @covers Zorille\framework\sql::creer_from_join
     * Implement testCreer_from_join().
     */
	public function testCreer_from_join() {
		$this->assertEquals ( "", $this->object->creer_from_join ( "" ) );
		$this->assertEquals ( "from1,from2", $this->object->creer_from_join ( array (
				"from1",
				"from2" 
		) ) );
		$this->assertEquals ( "from1 JOIN from2 ON champ1=champ2", $this->object->creer_from_join ( array (
				"from1",
				array (
						"type" => "BOTH",
						"table" => "from2",
						"champ1" => "champ1",
						"champ2" => "champ2" 
				) 
		) ) );
		$this->assertEquals ( "from1 LEFT JOIN from2 ON champ1=champ2", $this->object->creer_from_join ( array (
				"from1",
				array (
						"type" => "LEFT",
						"table" => "from2",
						"champ1" => "champ1",
						"champ2" => "champ2" 
				) 
		) ) );
		$this->assertEquals ( "from1 RIGHT JOIN from2 ON champ1=champ2", $this->object->creer_from_join ( array (
				"from1",
				array (
						"type" => "RIGHT",
						"table" => "from2",
						"champ1" => "champ1",
						"champ2" => "champ2" 
				) 
		) ) );
	}

	/**
     * @covers Zorille\framework\sql::creer_insert
     * Implement testCreer_insert().
     */
	public function testCreer_insert_string() {
		$this->object->creer_insert ( "from1", "champ1", "IGNORE" );
		$this->assertEquals ( "INSERT IGNORE INTO from1 VALUES (champ1) ", $this->object->getSql () );
	}

	/**
	 * @covers Zorille\framework\sql::creer_insert
	 * Implement testCreer_insert().
	 */
	public function testCreer_insert_array() {
		$this->object->creer_insert ( "from1", array (
				"champ1",
				"champ2" 
		) );
		$this->assertEquals ( "INSERT  INTO from1 VALUES (champ1,champ2) ", $this->object->getSql () );
	}

	/**
	 * @covers Zorille\framework\sql::creer_insert
	 * Implement testCreer_insert().
	 */
	public function testCreer_insert_SET() {
		$this->object->creer_insert ( "from1", array (
				"champ1='value1'",
				"champ2='value2'" 
		) );
		$this->assertEquals ( "INSERT  INTO from1 SET champ1='value1',champ2='value2'", $this->object->getSql () );
	}

	/**
     * @covers Zorille\framework\sql::creer_replace
     * Implement testCreer_replace().
     */
	public function testCreer_replace() {
		$this->object->creer_replace ( "from1", array (
				"champ1",
				"champ2" 
		), array (
				"val1",
				"val2" 
		) );
		$this->assertEquals ( "REPLACE  INTO from1 (champ1,champ2) VALUES ('val1','val2') ", $this->object->getSql () );
		$this->object->creer_replace ( "from1", "champ1", "val1", "IGNORE" );
		$this->assertEquals ( "REPLACE IGNORE INTO from1 (champ1) VALUES (val1 ) ", $this->object->getSql () );
	}

	/**
     * @covers Zorille\framework\sql::creer_update
     * Implement testCreer_update().
     */
	public function testCreer_update() {
		$this->object->creer_update ( "from1", array (
				"champ1=val1",
				"champ2=val2" 
		), array (
				"cond1",
				"cond2" 
		) );
		$this->assertEquals ( "UPDATE  from1 SET champ1=val1,champ2=val2 WHERE cond1 AND cond2", $this->object->getSql () );
		$this->object->creer_update ( "from1", "champ1", "val1", "IGNORE" );
		$this->assertEquals ( "UPDATE IGNORE from1 SET champ1 WHERE val1", $this->object->getSql () );
	}

	/**
     * @covers Zorille\framework\sql::creer_delete
     * Implement testCreer_delete().
     */
	public function testCreer_delete() {
		$this->object->creer_delete ( "from1", array (
				"champ1=val1",
				"champ2=val2" 
		) );
		$this->assertEquals ( "DELETE  FROM from1  WHERE champ1=val1 AND champ2=val2", $this->object->getSql () );
		$this->object->creer_delete ( "from1", array (
				"champ1=val1",
				"champ2=val2" 
		), "IGNORE" );
		$this->assertEquals ( "DELETE IGNORE FROM from1  WHERE champ1=val1 AND champ2=val2", $this->object->getSql () );
	}

	/**
     * @covers Zorille\framework\sql::creer_alter
     * Implement testCreer_alter().
     */
	public function testCreer_alter() {
		$this->object->creer_alter ( "from1", "spec1", "val1" );
		$this->assertEquals ( "ALTER TABLE from1 spec1 val1", $this->object->getSql () );
	}

	/**
     * @covers Zorille\framework\sql::creer_drop
     * Implement testCreer_drop().
     */
	public function testCreer_drop() {
		$this->object->creer_drop ( "from1" );
		$this->assertEquals ( "DROP DATABASE from1 ", $this->object->getSql () );
	}

	/**
     * @covers Zorille\framework\sql::creer_show_db
     * Implement testCreer_show_db().
     */
	public function testCreer_show_db() {
		$this->object->creer_show_db ();
		$this->assertEquals ( "SHOW DATABASES", $this->object->getSql () );
	}

	/**
     * @covers Zorille\framework\sql::creer_show_tables
     */
	public function testCreer_show_tables() {
		$this->object->creer_show_tables ();
		$this->assertEquals ( "SHOW TABLES", $this->object->getSql () );
	}

	/**
     * @covers Zorille\framework\sql::choisie_type_where
     */
	public function testChoisie_type_where() {
		//text
		$this->assertEquals ( "champ='val1'", $this->object->choisie_type_where ( "champ", "val1", "text" ) );
		$this->assertEquals ( "champ<>'val1'", $this->object->choisie_type_where ( "champ", "!val1", "text" ) );
		
		//numeric
		$this->assertEquals ( "champ=1", $this->object->choisie_type_where ( "champ", "1", "numeric" ) );
		
		//date
		$this->assertEquals ( "champ='2010-05-25 00:40:45'", $this->object->choisie_type_where ( "champ", "2010-05-25 00:40:45", "date" ) );
		
		//type inconnu
		$this->assertEquals ( "champ=val1", $this->object->choisie_type_where ( "champ", "val1", "inconnu" ) );
		
		//gestion_not numeric
		$this->assertEquals ( "champ<>1", $this->object->choisie_type_where ( "champ", "!1", "numeric" ) );
		$this->assertEquals ( "champ  NOT  IN (1,2)", $this->object->choisie_type_where ( "champ", array (
				"!1",
				"2" 
		), "numeric" ) );
		$this->assertEquals ( "champ  NOT  IN (1,2)", $this->object->choisie_type_where ( "champ", "!1,2", "numeric" ) );
	}

	/**
	 * @covers Zorille\framework\sql::gestion_not
	 */
	public function testGestion_not_text() {
		$not = "";
		$not_text = "";
		$valeur = "!val1";
		//gestion_not text
		$this->assertSame ( $this->object, $this->object->gestion_not ( $not, $not_text, $valeur ) );
		$this->assertEquals ( " NOT ", $not );
		$this->assertEquals ( "<>", $not_text );
		$this->assertEquals ( "val1", $valeur );
	}

	/**
	 * @covers Zorille\framework\sql::gestion_not
	 */
	public function testGestion_not_textFalse() {
		$not = "";
		$not_text = "";
		$valeur = "v!al1";
		//gestion_not text
		$this->assertSame ( $this->object, $this->object->gestion_not ( $not, $not_text, $valeur ) );
		$this->assertEquals ( "", $not );
		$this->assertEquals ( "=", $not_text );
		$this->assertEquals ( "v!al1", $valeur );
	}

	/**
	 * @covers Zorille\framework\sql::gestion_not
	 */
	public function testGestion_not_Array() {
		$not = "";
		$not_text = "";
		$valeur = array (
				"!1",
				"2" 
		);
		//gestion_not text
		$this->assertSame ( $this->object, $this->object->gestion_not ( $not, $not_text, $valeur ) );
		$this->assertEquals ( " NOT ", $not );
		$this->assertEquals ( "<>", $not_text );
		$this->assertEquals ( array (
				"1",
				"2" 
		), $valeur );
	}

	/**
	 * @covers Zorille\framework\sql::valide_sous_requete
	 */
	public function testValide_sous_requeteFalse() {
		$this->assertFalse ( $this->object->valide_sous_requete ( "REQUESTS" ) );
	}

	/**
	 * @covers Zorille\framework\sql::valide_sous_requete
	 */
	public function testValide_sous_requeteTrue() {
		$this->assertTrue ( $this->object->valide_sous_requete ( "SELECT REQUESTS" ) );
	}

	/**
	 * @covers Zorille\framework\sql::traite_type_text
	 */
	public function testTraite_type_textDefaut() {
		$this->assertEquals ( "champ1<>'valeur1'", $this->object->traite_type_text ( "champ1", "valeur1", " NOT ", "<>" ) );
	}

	/**
	 * @covers Zorille\framework\sql::traite_type_text
	 */
	public function testTraite_type_textValeurTextSousRequete() {
		$this->assertEquals ( "champ1  NOT  IN (SELECT valeur1)", $this->object->traite_type_text ( "champ1", "SELECT valeur1", " NOT ", "<>" ) );
	}

	/**
	 * @covers Zorille\framework\sql::traite_type_text
	 */
	public function testTraite_type_textValeurTextLike() {
		$this->assertEquals ( "champ1  NOT  LIKE 'valeur%'", $this->object->traite_type_text ( "champ1", "valeur%", " NOT ", "<>" ) );
	}

	/**
	 * @covers Zorille\framework\sql::traite_type_text
	 */
	public function testTraite_type_textValeurTextList() {
		$this->assertEquals ( "champ1  NOT  IN ('valeur1','valeur2')", $this->object->traite_type_text ( "champ1", "valeur1','valeur2", " NOT ", "<>" ) );
	}

	/**
	 * @covers Zorille\framework\sql::traite_type_text
	 */
	public function testTraite_type_textValeurArray() {
		$this->assertEquals ( "champ1  NOT  IN ('valeur1','valeur2')", $this->object->traite_type_text ( "champ1", array (
				"valeur1",
				"valeur2" 
		), " NOT ", "<>" ) );
	}

	/**
	 * @covers Zorille\framework\sql::traite_type_text
	 */
	public function testTraite_type_textValeurArraySousRequete() {
		$this->assertEquals ( "champ1  NOT  IN (SELECT valeur1)", $this->object->traite_type_text ( "champ1", array (
				"SELECT valeur1" 
		), " NOT ", "<>" ) );
	}

	/**
	 * @covers Zorille\framework\sql::traite_type_numeric
	 */
	public function testTraite_type_numericDefaut() {
		$this->assertEquals ( "champ1=1", $this->object->traite_type_numeric ( "champ1", 1, "  ", "=" ) );
	}

	/**
	 * @covers Zorille\framework\sql::traite_type_numeric
	 */
	public function testTraite_type_numericDefautNot() {
		$this->assertEquals ( "champ1<>1", $this->object->traite_type_numeric ( "champ1", 1, " NOT ", "<>" ) );
	}

	/**
	 * @covers Zorille\framework\sql::traite_type_numeric
	 */
	public function testTraite_type_numericArray() {
		$this->assertEquals ( "champ1  NOT  IN (1,2)", $this->object->traite_type_numeric ( "champ1", array (
				1,
				2 
		), " NOT ", "<>" ) );
	}

	/**
	 * @covers Zorille\framework\sql::traite_type_numeric
	 */
	public function testTraite_type_numericBETWEEN() {
		$this->assertEquals ( "champ1 BETWEEN 1 AND 2", $this->object->traite_type_numeric ( "champ1", "BETWEEN 1 AND 2", " NOT ", "<>" ) );
	}

	/**
	 * @covers Zorille\framework\sql::traite_type_numeric
	 */
	public function testTraite_type_numericSUP() {
		$this->assertEquals ( "champ1 >1", $this->object->traite_type_numeric ( "champ1", ">1", " NOT ", "<>" ) );
	}

	/**
	 * @covers Zorille\framework\sql::traite_type_numeric
	 */
	public function testTraite_type_numericINF() {
		$this->assertEquals ( "champ1 <=1", $this->object->traite_type_numeric ( "champ1", "<=1", " NOT ", "<>" ) );
	}

	/**
	 * @covers Zorille\framework\sql::traite_type_numeric
	 */
	public function testTraite_type_numericList() {
		$this->assertEquals ( "champ1  NOT  IN (1,2)", $this->object->traite_type_numeric ( "champ1", "1,2", " NOT ", "<>" ) );
	}

	/**
	 * @covers Zorille\framework\sql::traite_type_date
	 */
	public function testTraite_type_dateDefaut() {
		$this->assertEquals ( "champ1='2010-05-25 00:40:45'", $this->object->traite_type_date ( "champ1", "2010-05-25 00:40:45", "  ", "=" ) );
	}

	/**
	 * @covers Zorille\framework\sql::traite_type_date
	 */
	public function testTraite_type_dateArray() {
		$this->assertEquals ( "champ1  IN ('2010-05-25 00:40:45','2010-05-25 00:40:46')", $this->object->traite_type_date ( "champ1", array (
				"2010-05-25 00:40:45",
				"2010-05-25 00:40:46" 
		), "", "=" ) );
	}

	/**
	 * @covers Zorille\framework\sql::traite_type_date
	 */
	public function testTraite_type_dateBETWEEN() {
		$this->assertEquals ( "champ1 BETWEEN '1' AND '2'", $this->object->traite_type_date ( "champ1", "BETWEEN '1' AND '2'", "", "=" ) );
	}

	/**
	 * @covers Zorille\framework\sql::traite_type_date
	 */
	public function testTraite_type_dateSUP() {
		$this->assertEquals ( "champ1 > '1'", $this->object->traite_type_date ( "champ1", "> '1'", "", "=" ) );
	}

	/**
	 * @covers Zorille\framework\sql::traite_type_date
	 */
	public function testTraite_type_dateINF() {
		$this->assertEquals ( "champ1 < '1'", $this->object->traite_type_date ( "champ1", "< '1'", "", "=" ) );
	}

	/**
	 * @covers Zorille\framework\sql::traite_type_date
	 */
	public function testTraite_type_dateList() {
		$this->assertEquals ( "champ1  IN ('1','2')", $this->object->traite_type_date ( "champ1", "1','2", "", "=" ) );
	}

	/**
     * @covers Zorille\framework\sql::choisie_type_set
     */
	public function testChoisie_type_set() {
		//text
		$this->assertEquals ( "champ='val1'", $this->object->choisie_type_set ( "champ", "val1", "text" ) );
		$this->assertEquals ( "champ=''", $this->object->choisie_type_set ( "champ", "", "text" ) );
		$this->assertEquals ( "champ=''", $this->object->choisie_type_set ( "champ", NULL, "text" ) );
		$this->assertEquals ( "champ=NULL", $this->object->choisie_type_set ( "champ", "NULL", "text" ) );
		
		//numeric
		$this->assertEquals ( "champ=1", $this->object->choisie_type_set ( "champ", "1", "numeric" ) );
		$this->assertEquals ( "", $this->object->choisie_type_set ( "champ", "", "numeric" ) );
		
		//numeric
		$this->assertEquals ( "champ='1'", $this->object->choisie_type_set ( "champ", "1", "date" ) );
		$this->assertEquals ( "", $this->object->choisie_type_set ( "champ", "", "date" ) );
		$this->assertEquals ( "champ=function(1)", $this->object->choisie_type_set ( "champ", "function(1)", "date" ) );
		
		//inconnu
		$this->assertEquals ( "champ=1", $this->object->choisie_type_set ( "champ", "1", "inconnu" ) );
	}

	/**
     * @covers Zorille\framework\sql::prepare_order_by
     * Implement testPrepare_order_by().
     */
	public function testPrepare_order_by() {
		$this->assertEquals ( "", $this->object->prepare_order_by ( "" ) );
		$this->assertEquals ( "", $this->object->prepare_order_by ( array () ) );
		$this->assertEquals ( "", $this->object->prepare_order_by ( array (
				array (
						"type" => "",
						"champ" => "" 
				) 
		) ) );
		$this->assertEquals ( "", $this->object->prepare_order_by ( array (
				array (
						"type" => "",
						"champ" => "donnee" 
				) 
		) ) );
		$this->assertEquals ( "ORDER BY donnee  ASC", $this->object->prepare_order_by ( array (
				array (
						"type" => " ASC",
						"champ" => "donnee" 
				) 
		) ) );
		$this->assertEquals ( "ORDER BY donnee  DESC", $this->object->prepare_order_by ( array (
				array (
						"type" => " DESC",
						"champ" => "donnee" 
				) 
		) ) );
		$this->assertEquals ( "ORDER BY donnee1  DESC,donnee2  ASC", $this->object->prepare_order_by ( array (
				array (
						"type" => " DESC",
						"champ" => "donnee1" 
				),
				array (
						"type" => " ASC",
						"champ" => "donnee2" 
				) 
		) ) );
	}

	/**
     * @covers Zorille\framework\sql::traite_valeur_null
     * Implement testTraite_valeur_null().
     */
	public function testTraite_valeur_null() {
		$this->assertEquals ( "''", $this->object->traite_valeur_null ( NULL ) );
		$this->assertEquals ( "NULL", $this->object->traite_valeur_null ( "NULL" ) );
		$this->assertEquals ( "null", $this->object->traite_valeur_null ( "null" ) );
		$this->assertEquals ( "'test'", $this->object->traite_valeur_null ( "test" ) );
		$this->assertEquals ( "\"message:'oui'\"", $this->object->traite_valeur_null ( "message:'oui'" ) );
	}
}
