<?php
namespace Zorille\framework;
use \PDOStatement as PDOStatement;
use \PDOException as PDOException;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-26 at 11:31:40.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class procedure_stockeeTest extends MockedListeOptions {
	/**
     * @var procedure_stockee
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = new procedure_stockee ( false, "TESTS procedure_stockee" );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
	 * @covers Zorille\framework\procedure_stockee::prepare_requete_stockee
	 */
	public function testPrepare_requete_stockee_True() {
		$PDOStatement = $this->createMock('PDOStatement' );
		$PDO = $this->createMock('\PDO' );
		$PDO->expects ( $this->any () )
			->method ( 'prepare' )
			->will ( $this->returnValue ( $PDOStatement ) );
		$PDO_local = $this->createMock('Zorille\framework\PDO_local' );
		$PDO_local->expects ( $this->any () )
			->method ( 'getPDOConnexion' )
			->will ( $this->returnValue ( $PDO ) );
		$this->object->setDbConnexion ( $PDO_local );
		
		$this->assertTrue ( $this->object->prepare_requete_stockee ( "REQUEST" ) );
	}

	/**
     * @covers Zorille\framework\procedure_stockee::bind_valeur
     */
	public function testBind_valeur() {
		$PDOStatement = $this->createMock('PDOStatement' );
		$PDOStatement->expects ( $this->any () )
			->method ( 'bindValue' )
			->will ( $this->returnValue ( true ) );
		$this->object->setProcedureStocke ( $PDOStatement );
		$this->assertTrue ( $this->object->bind_valeur ( "PARAM", "VALEUR" ) );
	}

	/**
     * @covers Zorille\framework\procedure_stockee::bind_parametre
     */
	public function testBind_parametre() {
		$PDOStatement = $this->createMock('PDOStatement' );
		$PDOStatement->expects ( $this->any () )
			->method ( 'bindParam' )
			->will ( $this->returnValue ( true ) );
		$this->object->setProcedureStocke ( $PDOStatement );
		$this->assertTrue ( $this->object->bind_parametre ( "PARAM", "VALEUR" ) );
	}

	/**
     * @covers Zorille\framework\procedure_stockee::applique_requete_stocker
     */
	public function testApplique_requete_stocker_False() {
		$this->assertFalse ( $this->object->applique_requete_stocker () );
	}

	/**
	 * @covers Zorille\framework\procedure_stockee::applique_requete_stocker
	 */
	public function testApplique_requete_stocker_without_param() {
		$PDOStatement = $this->createMock('PDOStatement' );
		$PDOStatement->expects ( $this->any () )
			->method ( 'execute' )
			->will ( $this->returnValue ( true ) );
		$this->object->setProcedureStocke ( $PDOStatement );
		$this->assertTrue ( $this->object->applique_requete_stocker () );
	}

	/**
	 * @covers Zorille\framework\procedure_stockee::applique_requete_stocker
	 */
	public function testApplique_requete_stocker_with_params() {
		$PDOStatement = $this->createMock('PDOStatement' );
		$PDOStatement->expects ( $this->any () )
			->method ( 'execute' )
			->will ( $this->returnValue ( true ) );
		$this->object->setProcedureStocke ( $PDOStatement );
		$this->assertTrue ( $this->object->applique_requete_stocker ( array (
				"param1" 
		) ) );
	}

	/**
     * @covers Zorille\framework\procedure_stockee::renvoi_valeur
     */
	public function testrenvoi_valeur_False() {
		$this->assertFalse ( $this->object->renvoi_valeur () );
	}

	/**
	 * @covers Zorille\framework\procedure_stockee::renvoi_valeur
	 */
	public function testrenvoi_valeur() {
		$PDOStatement = $this->createMock('PDOStatement' );
		$PDOStatement->expects ( $this->any () )
			->method ( 'fetchAll' )
			->will ( $this->returnValue ( array (
				1,
				2,
				3 
		) ) );
		$this->object->setProcedureStocke ( $PDOStatement );
		$this->assertEquals ( array (
				1,
				2,
				3 
		),$this->object->renvoi_valeur () );
	}
}
