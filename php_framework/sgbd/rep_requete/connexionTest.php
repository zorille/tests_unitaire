<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-26 at 11:31:40.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class connexionTest extends MockedListeOptions {
	/**
     * @var connexion
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = new connexion ( false, "TESTS connexion" );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers connexion::prepare_connexion
     */
	public function testPrepare_connexion() {
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'connexion' ) 
			->will ( $this ->returnSelf () );
		$this->object ->setDbConnexion ( $PDO_local );
		$this->object ->setDbServeur ( "localhost" );
		
		$this ->assertSame ( $this->object, $this->object ->prepare_connexion () );
	}

	/**
	 * @covers connexion::prepare_ligne_pdo
	 */
	public function testPrepare_ligne_pdo_Exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS connexion) Probleme avec le serveur Database !' );
		$this->object ->prepare_ligne_pdo ();
	}

	/**
	 * @covers connexion::prepare_ligne_pdo
	 */
	public function testPrepare_ligne_pdo_Defaut() {
		$this->object ->setDbServeur ( "localhost" );
		
		$this ->assertSame ( $this->object, $this->object ->prepare_ligne_pdo () );
		$this ->assertEquals ( ":host=localhost", $this->object ->getPdoRequete () );
		$this ->assertEquals ( Array (), $this->object ->getPdoOptions () );
	}

	/**
	 * @covers connexion::prepare_ligne_pdo
	 */
	public function testPrepare_ligne_pdo_Mysql() {
		$this->object ->setDbServeur ( "localhost" );
		$this->object ->setDbType ( "mysql" );
		
		$this ->assertSame ( $this->object, $this->object ->prepare_ligne_pdo () );
		$this ->assertEquals ( "mysql:dbname=NO_DB;host=localhost", $this->object ->getPdoRequete () );
		$this ->assertEquals ( Array ( 
				1002 => 'SET NAMES utf8' ), $this->object ->getPdoOptions () );
	}

	/**
	 * @covers connexion::prepare_ligne_pdo
	 */
	public function testPrepare_ligne_pdo_Pgsql() {
		$this->object ->setDbServeur ( "localhost" );
		$this->object ->setDbType ( "pgsql" );
		
		$this ->assertSame ( $this->object, $this->object ->prepare_ligne_pdo () );
		$this ->assertEquals ( "pgsql:dbname=NO_DB;host=localhost", $this->object ->getPdoRequete () );
		$this ->assertTrue ( $this->object ->getDbSelected () );
	}

	/**
	 * @covers connexion::prepare_ligne_pdo
	 */
	public function testPrepare_ligne_pdo_Sqlite() {
		$this->object ->setDbServeur ( "localhost" );
		$this->object ->setDbType ( "sqlite" );
		
		$this ->assertSame ( $this->object, $this->object ->prepare_ligne_pdo () );
		$this ->assertEquals ( "sqlite:localhost", $this->object ->getPdoRequete () );
		$this ->assertTrue ( $this->object ->getDbSelected () );
	}

	/**
     * @covers connexion::selection_base
     */
	public function testSelection_base_Exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS connexion) La variable base est vide !' );
		$this->object ->selection_base ();
	}

	/**
	 * @covers connexion::selection_base
	 */
	public function testSelection_base_Mysql_Exception() {
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'query' ) 
			->will ( $this ->returnValue ( false ) );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'errorInfo' ) 
			->will ( $this ->returnValue ( "PDO errorInfo" ) );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'errorCode' ) 
			->will ( $this ->returnValue ( 10 ) );
		
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this->object ->setDbType ( "mysql" );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS connexion) PDO errorInfo' );
		$this->object ->selection_base ( "BASEDEDONNEES" );
	}

	/**
	 * @covers connexion::selection_base
	 */
	public function testSelection_base_Mysql() {
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'query' ) 
			->will ( $this ->returnValue ( true ) );
		
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this->object ->setDbType ( "mysql" );
		
		$this ->assertSame ( $this->object, $this->object ->selection_base ( "BASEDEDONNEES" ) );
	}

	/**
     * @covers connexion::test_connexion_active
     */
	public function testTest_connexion_active_Exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS connexion) Pas de connexion active !' );
		$this->object ->test_connexion_active ();
	}

	/**
	 * @covers connexion::test_connexion_active
	 */
	public function testTest_connexion_active() {
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$this->object ->setDbConnexion ( $PDO_local );
		
		$this ->assertTrue ( $this->object ->test_connexion_active () );
	}

	/**
	 * @covers connexion::faire_requete
	 */
	public function testFaire_requete_Exception() {
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'query' ) 
			->will ( $this ->returnValue ( false ) );
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		
		$this->object ->setSql ( "SELECT *" );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS connexion) Erreur durant la requete query : SELECT *' );
		$this->object ->faire_requete ();
	}

	/**
     * @covers connexion::faire_requete
     */
	public function testFaire_requete() {
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'query' ) 
			->will ( $this ->returnValue ( array ( 
				"response" ) ) ); //la query renvoi un PDOStatement en realite, pas un tableau
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		
		$this ->assertEquals ( array ( 
				"response" ), $this->object ->faire_requete ( "SELECT ANOTHER *" ) );
	}

	/**
	 * @covers connexion::faire_requete_exec
	 */
	public function testFaire_requete_exec_Exception() {
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'exec' ) 
			->will ( $this ->returnValue ( false ) );
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		
		$this->object ->setSql ( "SELECT *" );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS connexion) Erreur durant la requete exec : SELECT *' );
		$this->object ->faire_requete_exec ();
	}

	/**
	 * @covers connexion::faire_requete_exec
	 */
	public function testFaire_requete_exec() {
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'exec' ) 
			->will ( $this ->returnValue ( array ( 
				"response" ) ) );
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		
		$this ->assertEquals ( array ( 
				"response" ), $this->object ->faire_requete_exec ( "SELECT ANOTHER *" ) );
	}

	/**
     * @covers connexion::preparer_requete
     */
	public function testPreparer_requete_Exception() {
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'prepare' ) 
			->will ( $this ->throwException ( new PDOException () ) );
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		
		$this->object ->setSql ( "SELECT *" );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS connexion) Erreur durant la preparation de la requete' );
		$this->object ->preparer_requete ();
	}

	/**
	 * @covers connexion::preparer_requete
	 */
	public function testPreparer_requete() {
		$PDOStatement = $this ->createMock ( 'PDOStatement' );
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'prepare' ) 
			->will ( $this ->returnValue ( $PDOStatement ) );
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		
		$this->object ->setSql ( "SELECT *" );
		
		$this ->assertInstanceOf ( "PDOStatement", $this->object ->preparer_requete () );
	}

	/**
     * @covers connexion::beginTransaction
     */
	public function testBeginTransaction() {
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'beginTransaction' ) 
			->will ( $this ->returnValue ( true ) );
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this ->assertTrue ( $this->object ->beginTransaction () );
	}

	/**
     * @covers connexion::commit
     */
	public function testCommit() {
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'commit' ) 
			->will ( $this ->returnValue ( true ) );
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this ->assertTrue ( $this->object ->commit () );
	}

	/**
     * @covers connexion::rollback
     */
	public function testRollback() {
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'rollback' ) 
			->will ( $this ->returnValue ( true ) );
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this ->assertTrue ( $this->object ->rollback () );
	}

	/**
	 * @covers connexion::prepare_socket
	 */
	public function testPrepare_socket_vide() {
		$this ->assertEquals ( "", $this->object ->prepare_socket () );
	}

	/**
	 * @covers connexion::prepare_socket
	 */
	public function testPrepare_socket() {
		$this->object ->setDbSocket ( "/chemin/to/socket" );
		$this ->assertEquals ( ";unix_socket=/chemin/to/socket", $this->object ->prepare_socket () );
	}

	/**
     * @covers connexion::prepare_port
     */
	public function testPrepare_port_vide() {
		$this ->assertEquals ( "", $this->object ->prepare_port () );
	}

	/**
	 * @covers connexion::prepare_port
	 */
	public function testPrepare_port() {
		$this->object ->setDbPort ( "13306" );
		$this ->assertEquals ( ";port=13306", $this->object ->prepare_port () );
	}

	/**
	 * @covers connexion::test_database_active
	 */
	public function testTest_database_active_Exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS connexion) Base de donnees non connectee !' );
		$this->object ->test_database_active ();
	}

	/**
	 * @covers connexion::test_database_active
	 */
	public function testTest_database_active() {
		$this->object ->setDbSelected ( true );
		$this ->assertTrue ( $this->object ->test_database_active () );
	}

	/**
	 * @covers connexion::test_database_active
	 */
	public function testTest_database_active_with_MAJ_false() {
		$this->object ->setDbMaj ( false );
		$this->object ->setDbSelected ( true );
		$this ->assertFalse ( $this->object ->test_database_active ( true ) );
	}

	/**
	 * @covers connexion::test_database_active
	 */
	public function testTest_database_active_with_MAJ_true() {
		$this->object ->setDbSelected ( true );
		$this ->assertTrue ( $this->object ->test_database_active ( true ) );
	}

	/**
	 * @covers connexion::active_maj_db
	 */
	public function testActive_maj_db() {
		$this ->assertSame ( $this->object, $this->object ->active_maj_db () );
		$this ->assertTrue ( $this->object ->getDbMaj () );
	}

	/**
	 * @covers connexion::desactive_maj_db
	 */
	public function testDesactive_maj_db() {
		$this ->assertSame ( $this->object, $this->object ->desactive_maj_db () );
		$this ->assertFalse ( $this->object ->getDbMaj () );
	}
}
