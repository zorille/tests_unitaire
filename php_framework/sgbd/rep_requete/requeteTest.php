<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-26 at 11:31:40.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class requeteTest extends MockedListeOptions {
	/**
     * @var requete
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = new requete ( false, "TESTS requete" );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers requete::nettoie_resultat
     */
	public function testNettoie_resultat() {
		$this ->assertTrue ( $this->object ->nettoie_resultat () );
	}

	/**
     * @covers requete::ajouter
     */
	public function testAjouter() {
		$PDOStatement = $this ->createMock ( 'PDOStatement' );
		$PDOStatement ->expects ( $this ->any () ) 
			->method ( 'rowCount' ) 
			->will ( $this ->returnValue ( 11 ) );
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'query' ) 
			->will ( $this ->returnValue ( $PDOStatement ) );
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this->object ->setDbSelected ( true );
		$this ->assertEquals ( 11, $this->object ->ajouter ( "table", "valeur" ) );
	}

	/**
     * @covers requete::selectionner
     */
	public function testSelectionner_False_connexion() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS requete) Base de donnees non connectee !' );
		$this->object ->selectionner ( "", "valeur" );
	}

	/**
	 * @covers requete::selectionner
	 */
	public function testSelectionner_False() {
		$this->object ->setDbSelected ( true );
		$this ->assertFalse ( $this->object ->selectionner ( "", "valeur" ) );
	}

	/**
	 * @covers requete::selectionner
	 */
	public function testSelectionner() {
		$PDOStatement = $this ->createMock ( 'PDOStatement' );
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'query' ) 
			->will ( $this ->returnValue ( $PDOStatement ) );
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this->object ->setDbSelected ( true );
		$this ->assertEquals ( Array (), $this->object ->selectionner ( "table", "valeur" ) );
	}

	/**
     * @covers requete::selectionner_avec_jointure
     */
	public function testSelectionner_avec_jointure_False() {
		$this->object ->setDbSelected ( true );
		$from = array ( 
				"from1", 
				array ( 
						"type" => "BOTH", 
						"table" => "from2", 
						"champ1" => "champ1", 
						"champ2" => "champ2" ) );
		$this ->assertFalse ( $this->object ->selectionner_avec_jointure ( "", $from ) );
	}

	/**
	 * @covers requete::selectionner_avec_jointure
	 */
	public function testSelectionner_avec_jointure() {
		$PDOStatement = $this ->createMock ( 'PDOStatement' );
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'query' ) 
			->will ( $this ->returnValue ( $PDOStatement ) );
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this->object ->setDbSelected ( true );
		$from = array ( 
				"from1", 
				array ( 
						"type" => "BOTH", 
						"table" => "from2", 
						"champ1" => "champ1", 
						"champ2" => "champ2" ) );
		$this ->assertEquals ( Array (), $this->object ->selectionner_avec_jointure ( "*", $from ) );
	}

	/**
	 * @covers requete::supprimer
	 */
	public function testSupprimer_False_connexion() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS requete) Base de donnees non connectee !' );
		$this->object ->supprimer ( "", "valeur" );
	}

	/**
     * @covers requete::supprimer
     */
	public function testSupprimer_False() {
		$this->object ->setDbSelected ( true );
		$this ->assertFalse ( $this->object ->supprimer ( "", "" ) );
	}

	/**
	 * @covers requete::supprimer
	 */
	public function testSupprimer() {
		$PDOStatement = $this ->createMock ( 'PDOStatement' );
		$PDOStatement ->expects ( $this ->any () ) 
			->method ( 'rowCount' ) 
			->will ( $this ->returnValue ( 12 ) );
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'query' ) 
			->will ( $this ->returnValue ( $PDOStatement ) );
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this->object ->setDbSelected ( true );
		$this ->assertEquals ( 12, $this->object ->supprimer ( "TABLE1", "" ) );
	}

	/**
	 * @covers requete::updater
	 */
	public function testUpdater_False_connexion() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS requete) Base de donnees non connectee !' );
		$this->object ->updater ( "", "valeur" );
	}

	/**
	 * @covers requete::updater
	 */
	public function testUpdater_False() {
		$this->object ->setDbSelected ( true );
		$this ->assertFalse ( $this->object ->updater ( "", "" ) );
	}

	/**
	 * @covers requete::updater
	 */
	public function testUpdater() {
		$PDOStatement = $this ->createMock ( 'PDOStatement' );
		$PDOStatement ->expects ( $this ->any () ) 
			->method ( 'rowCount' ) 
			->will ( $this ->returnValue ( 13 ) );
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'query' ) 
			->will ( $this ->returnValue ( $PDOStatement ) );
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this->object ->setDbSelected ( true );
		$this ->assertEquals ( 13, $this->object ->updater ( "TABLE1", "SET1" ) );
	}

	/**
	 * @covers requete::updater_avec_jointure
	 */
	public function testUpdater_avec_jointure_False_connexion() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS requete) Base de donnees non connectee !' );
		$this->object ->updater_avec_jointure ( "", "valeur" );
	}

	/**
	 * @covers requete::updater_avec_jointure
	 */
	public function testUpdater_avec_jointure_False() {
		$this->object ->setDbSelected ( true );
		$this ->assertFalse ( $this->object ->updater_avec_jointure ( "", "" ) );
	}

	/**
	 * @covers requete::updater_avec_jointure
	 */
	public function testUpdater_avec_jointure() {
		$PDOStatement = $this ->createMock ( 'PDOStatement' );
		$PDOStatement ->expects ( $this ->any () ) 
			->method ( 'rowCount' ) 
			->will ( $this ->returnValue ( 13 ) );
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'query' ) 
			->will ( $this ->returnValue ( $PDOStatement ) );
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this->object ->setDbSelected ( true );
		$from = array ( 
				"from1", 
				array ( 
						"type" => "BOTH", 
						"table" => "from2", 
						"champ1" => "champ1", 
						"champ2" => "champ2" ) );
		$this ->assertEquals ( array (), $this->object ->updater_avec_jointure ( $from, "SET1" ) );
	}

	/**
	 * @covers requete::liste_db
	 */
	public function testListe_db_False_connexion() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS requete) Base de donnees non connectee !' );
		$this->object ->liste_db ();
	}

	/**
	 * @covers requete::liste_db
	 */
	public function testListe_db() {
		$PDOStatement = $this ->createMock ( 'PDOStatement' );
		$PDOStatement ->expects ( $this ->any () ) 
			->method ( 'rowCount' ) 
			->will ( $this ->returnValue ( 5 ) );
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'query' ) 
			->will ( $this ->returnValue ( $PDOStatement ) );
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this->object ->setDbSelected ( true );
		$this ->assertEquals ( array (), $this->object ->liste_db () );
	}

	/**
	 * @covers requete::recupere_last_id
	 */
	public function testrecupere_last_id_False_connexion() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS requete) Base de donnees non connectee !' );
		$this->object ->recupere_last_id ();
	}

	/**
	 * @covers requete::recupere_last_id
	 */
	public function testrecupere_last_id() {
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'lastInsertId' ) 
			->will ( $this ->returnValue ( 5 ) );
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this->object ->setDbSelected ( true );
		$this ->assertEquals ( 5, $this->object ->recupere_last_id () );
	}

	/**
	 * @covers requete::escape_string
	 */
	public function testescape_string_False_connexion() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS requete) Base de donnees non connectee !' );
		$this->object ->escape_string ( 'texte=\'texte to quote\'' );
	}

	/**
	 * @covers requete::escape_string
	 */
	public function testescape_string() {
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'quote' ) 
			->will ( $this ->returnValue ( 'texte=\'\'texte to quote\'\'' ) );
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this->object ->setDbSelected ( true );
		$this ->assertEquals ( 'texte=\'\'texte to quote\'\'', $this->object ->escape_string ( 'texte=\'texte to quote\'' ) );
	}

	/**
	 * @covers requete::liste_db
	 */
	public function testListe_db_with_localSql() {
		$PDOStatement = $this ->createMock ( 'PDOStatement' );
		$PDOStatement ->expects ( $this ->any () ) 
			->method ( 'rowCount' ) 
			->will ( $this ->returnValue ( 5 ) );
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'query' ) 
			->will ( $this ->returnValue ( $PDOStatement ) );
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this->object ->setDbSelected ( true );
		$this ->assertEquals ( array (), $this->object ->liste_db ( "SQL" ) );
	}

	/**
	 * @covers requete::liste_table
	 */
	public function testListe_table_False_connexion() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS requete) Base de donnees non connectee !' );
		$this->object ->liste_table ();
	}

	/**
	 * @covers requete::liste_table
	 */
	public function testListe_table() {
		$PDOStatement = $this ->createMock ( 'PDOStatement' );
		$PDOStatement ->expects ( $this ->any () ) 
			->method ( 'rowCount' ) 
			->will ( $this ->returnValue ( 5 ) );
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'query' ) 
			->will ( $this ->returnValue ( $PDOStatement ) );
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this->object ->setDbSelected ( true );
		$this ->assertEquals ( array (), $this->object ->liste_table () );
	}

	/**
	 * @covers requete::liste_table
	 */
	public function testListe_table_with_localSql() {
		$PDOStatement = $this ->createMock ( 'PDOStatement' );
		$PDOStatement ->expects ( $this ->any () ) 
			->method ( 'rowCount' ) 
			->will ( $this ->returnValue ( 5 ) );
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'query' ) 
			->will ( $this ->returnValue ( $PDOStatement ) );
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this->object ->setDbSelected ( true );
		$this ->assertEquals ( array (), $this->object ->liste_table ( "SQL" ) );
	}

	/**
	 * @covers requete::verifier_champ_in_database
	 */
	public function testVerifier_champ_in_database_False_connexion() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS requete) Base de donnees non connectee !' );
		$this->object ->verifier_champ_in_database ( "table", "champ", "valeur" );
	}

	/**
	 * @covers requete::verifier_champ_in_database
	 */
	public function testVerifier_champ_in_database_False() {
		$PDOStatement = $this ->createMock ( 'PDOStatement' );
		$PDOStatement ->expects ( $this ->any () ) 
			->method ( 'rowCount' ) 
			->will ( $this ->returnValue ( 0 ) );
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'query' ) 
			->will ( $this ->returnValue ( $PDOStatement ) );
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this->object ->setDbSelected ( true );
		$this ->assertFalse ( $this->object ->verifier_champ_in_database ( "TABLE1", "CHAMP1", "VALEUR1" ) );
	}

	/**
	 * @covers requete::verifier_champ_in_database
	 */
	public function testVerifier_champ_in_database_True() {
		$PDOStatement = $this ->createMock ( 'PDOStatement' );
		$PDOStatement ->expects ( $this ->any () ) 
			->method ( 'rowCount' ) 
			->will ( $this ->returnValue ( 5 ) );
		$PDO = $this ->createMock ( 'mockPDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'query' ) 
			->will ( $this ->returnValue ( $PDOStatement ) );
		$PDO_local = $this ->createMock ( 'PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this->object ->setDbSelected ( true );
		$this ->assertTrue ( $this->object ->verifier_champ_in_database ( "TABLE1", "CHAMP1", "VALEUR1" ) );
	}
}
