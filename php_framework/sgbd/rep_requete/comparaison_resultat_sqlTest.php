<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-26 at 11:31:40.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class comparaison_resultat_sqlTest extends MockedListeOptions {
	/**
     * @var comparaison_resultat_sql
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = new comparaison_resultat_sql ( false, "TESTS comparaison_resultat_sql" );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers comparaison_resultat_sql::prepare_donnees
     */
	public function testPrepare_donnees_Exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS comparaison_resultat_sql) La liste de donnees n\'est pas un tableau pour la comparaison.' );
		$this->object ->prepare_donnees ( "string" );
	}

	/**
	 * @covers comparaison_resultat_sql::prepare_donnees
	 */
	public function testPrepare_donnees() {
		$this ->assertEquals ( 
				Array ( 
							'ZVIDE' => array ( 
									'resultat1' => 1 ), 
							'ZNULL' => array ( 
									'resultat2' => 1 ), 
							'ZINT10' => array ( 
									'resultat3' => 1 ), 
							'texte+complet' => array ( 
									'resultat4' => 1 ) ), 
					$this->object ->prepare_donnees ( 
							array ( 
										array ( 
												"champ1" => "", 
												"champ2" => "resultat1" ), 
										array ( 
												"champ1" => NULL, 
												"champ2" => "resultat2" ), 
										array ( 
												"champ1" => 10, 
												"champ2" => "resultat3" ), 
										array ( 
												"champ1" => "texte complet", 
												"champ2" => "resultat4" ) ) ) );
	}

	/**
	 * @covers comparaison_resultat_sql::compare_tuple
	 */
	public function testCompare_tuple() {
		//1 a supprimer
		//0 a ajouter
		$tableau_ref = Array ( 
				'ZVIDE' => array ( 
						'resultat1' => 1 ), 
				'ZNULL' => array ( 
						'resultat2' => 1 ), 
				'ZINT10' => array ( 
						'resultat3' => 1 ), 
				'texte+complet' => array ( 
						'resultat4' => 1 ) );
		$tableau_final = Array ( 
				'ZVIDE' => array ( 
						'resultat1' => 1 ), 
				'ZINT10' => array ( 
						'resultat6' => 1 ), 
				'texte+complet' => array ( 
						'resultat4' => 1 ), 
				'another' => array ( 
						'resultat5' => 1 ) );
		$this ->assertSame ( $this->object, $this->object ->compare_tuple ( $tableau_ref, $tableau_final ) );
		$this ->assertEquals ( Array ( 
				'ZINT10' => array ( 
						'resultat6' => 1, 
						'resultat3' => 0 ), 
				'another' => array ( 
						'resultat5' => 1 ), 
				'ZNULL' => array ( 
						'resultat2' => 0 ) ), $tableau_final );
	}

	/**
	 * @covers comparaison_resultat_sql::retrouve_donnees_a_modifier
	 */
	public function testRetrouve_donnees_a_modifier_Ajouter() {
		$donnees_a_modifier = Array ( 
				'ZINT10' => array ( 
						'resultat6' => 1, 
						'resultat3' => 0 ), 
				'another' => array ( 
						'resultat5' => 1 ), 
				'ZNULL' => array ( 
						'resultat2' => 0 ) );
		$this ->assertEquals ( Array ( 
				true, 
				"ZINT10'param'resultat3", 
				"ZNULL'param'resultat2" ), $this->object ->retrouve_donnees_a_modifier ( $donnees_a_modifier, 0 ) );
	}

	/**
	 * @covers comparaison_resultat_sql::retrouve_donnees_a_modifier
	 */
	public function testRetrouve_donnees_a_modifier_Supprimer() {
		$donnees_a_modifier = Array ( 
				'ZINT10' => array ( 
						'resultat6' => 1, 
						'resultat3' => 0 ), 
				'another' => array ( 
						'resultat5' => 1 ), 
				'ZNULL' => array ( 
						'resultat2' => 0 ) );
		$this ->assertEquals ( Array ( 
				true, 
				"ZINT10'param'resultat6", 
				"another'param'resultat5" ), $this->object ->retrouve_donnees_a_modifier ( $donnees_a_modifier, 1 ) );
	}

	/**
	 * @covers comparaison_resultat_sql::recuperer_liste_champ
	 */
	public function testRecuperer_liste_champ() {
		$this ->assertEquals ( Array ( 
				"param1", 
				"alias" ), $this->object ->recuperer_liste_champ ( "SELECT param1, param2 AS alias FROM test WHERE param1=3 and param4=8" ) );
	}

	/**
	 * @covers comparaison_resultat_sql::recuperer_liste_champ
	 */
	public function testRecuperer_liste_champ_False() {
		$this ->assertEquals ( Array ( 
				'' ), $this->object ->recuperer_liste_champ ( 0 ) );
	}

	/**
	* @covers comparaison_resultat_sql::encode_donnee
	*/
	public function testEncode_donnee() {
		$this ->assertEquals ( "a%27ad%252bs%25jzz%C3%A9%C3%A0%408", $this->object ->encode_donnee ( "a\'ad\\jzzéà@8" ) );
	}

	/**
	 * @covers comparaison_resultat_sql::decode_donnee
	 */
	public function testDencode_donnee() {
		$this ->assertEquals ( 'a\'\'ad\\\\jzzéà@8', $this->object ->decode_donnee ( "ZINTa%27ad%252bs%25jzz%C3%A9%C3%A0%408" ) );
	}

	/**
	 * @covers comparaison_resultat_sql::liste_suppression_donnees
	 */
	public function testListe_suppression_donnees_Exception() {
		$donnees_a_modifier = Array ( 
				'ZINT10' => array ( 
						'resultat6' => 1, 
						'resultat3' => 0 ), 
				'another' => array ( 
						'resultat5' => 1 ), 
				'ZNULL' => array ( 
						'resultat2' => 0 ) );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS comparaison_resultat_sql) Le nombre de champ du set ne correspond pas au nombre de champs a supprimer.' );
		$this->object ->liste_suppression_donnees ( $donnees_a_modifier, "TABLEFinale", array ( 
				"champ1" ) );
	}

	/**
	 * @covers comparaison_resultat_sql::liste_suppression_donnees
	 */
	public function testListe_suppression_donnees() {
		$donnees_a_modifier = Array ( 
				'ZINT10' => array ( 
						'resultat6' => 1, 
						'resultat3' => 0 ), 
				'another' => array ( 
						'resultat5' => 1 ), 
				'ZNULL' => array ( 
						'resultat2' => 0 ) );
		$this ->assertEquals ( array ( 
				"DELETE FROM TABLEFinale WHERE champ1='10' AND champ2='resultat6' ;", 
				"DELETE FROM TABLEFinale WHERE champ1='another' AND champ2='resultat5' ;" ), $this->object ->liste_suppression_donnees ( $donnees_a_modifier, "TABLEFinale", array ( 
				"champ1", 
				"champ2" ) ) );
	}

	/**
	 * @covers comparaison_resultat_sql::liste_ajout_donnees
	 */
	public function testListe_ajouter_donnees_Exception() {
		$donnees_a_modifier = Array ( 
				'ZINT10' => array ( 
						'resultat6' => 1, 
						'resultat3' => 0 ), 
				'another' => array ( 
						'resultat5' => 1 ), 
				'ZNULL' => array ( 
						'resultat2' => 0 ) );
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS comparaison_resultat_sql) Le nombre de champ du set ne correspond pas au nombre de champs a inserer.' );
		$this->object ->liste_ajout_donnees ( $donnees_a_modifier, "TABLEFinale", array ( 
				"champ1" ) );
	}

	/**
	 * @covers comparaison_resultat_sql::liste_ajout_donnees
	 */
	public function testListe_ajouter_donnees() {
		$donnees_a_modifier = Array ( 
				'ZINT10' => array ( 
						'resultat6' => 1, 
						'resultat3' => 0 ), 
				'another' => array ( 
						'resultat5' => 1 ), 
				'ZNULL' => array ( 
						'resultat2' => 0 ) );
		$this ->assertEquals ( array ( 
				"INSERT INTO TABLEFinale (champ1,champ2) VALUE ('10','resultat3') ;", 
				"INSERT INTO TABLEFinale (champ1,champ2) VALUE (NULL,'resultat2') ;" ), $this->object ->liste_ajout_donnees ( $donnees_a_modifier, "TABLEFinale", array ( 
				"champ1", 
				"champ2" ) ) );
	}

	/**
	 * @covers comparaison_resultat_sql::concatene_tableau
	 */
	public function testConcatene_tableau() {
		$donnees_a_modifier = Array ( 
				'ZVIDE' => array ( 
						'resultat10' => 1 ), 
				'ZINT10' => array ( 
						'resultat60' => 1 ), 
				'texte+complet' => array ( 
						'resultat40' => 1 ), 
				'another' => array ( 
						'resultat50' => 1 ) );
		$tableau_final = Array ( 
				'ZVIDE' => array ( 
						'resultat1' => 1 ), 
				'ZINT10' => array ( 
						'resultat6' => 1 ), 
				'texte+complet' => array ( 
						'resultat4' => 1 ), 
				'another' => array ( 
						'resultat5' => 1 ) );
		$this ->assertEquals ( 
				array ( 
							'ZVIDE' => array ( 
									'resultat10' => 1, 
									'resultat1' => 1 ), 
							'ZINT10' => array ( 
									'resultat60' => 1, 
									'resultat6' => 1 ), 
							'texte+complet' => array ( 
									'resultat40' => 1, 
									'resultat4' => 1 ), 
							'another' => array ( 
									'resultat50' => 1, 
									'resultat5' => 1 ) ), 
					$this->object ->concatene_tableau ( $donnees_a_modifier, $tableau_final ) );
	}

	/**
	 * @covers comparaison_resultat_sql::synchro_table
	 */
	public function testSynchro_table() {
		$tableau_ref = array ( 
				array ( 
						"champ1" => "", 
						"champ2" => "resultat1" ), 
				array ( 
						"champ1" => NULL, 
						"champ2" => "resultat2" ), 
				array ( 
						"champ1" => 10, 
						"champ2" => "resultat3" ), 
				array ( 
						"champ1" => "texte complet", 
						"champ2" => "resultat4" ) );
		$tableau_final = array ( 
				array ( 
						"champ1" => "", 
						"champ2" => "resultat1" ), 
				array ( 
						"champ1" => 10, 
						"champ2" => "resultat6" ), 
				array ( 
						"champ1" => "texte complet", 
						"champ2" => "resultat4" ), 
				array ( 
						"champ1" => "another", 
						"champ2" => "resultat5" ) );

		
		$this ->assertSame ( $this->object, $this->object ->synchro_table ( $tableau_ref, $tableau_final, "TABLEFinale", array ( 
				"champ1", 
				"champ2" ) ) );
		
		$this ->assertEquals ( array ( 
				"INSERT INTO TABLEFinale (champ1,champ2) VALUE ('10','resultat3') ;", 
				"INSERT INTO TABLEFinale (champ1,champ2) VALUE (NULL,'resultat2') ;" ), $this->object ->getTableauAjoute () );
		$this ->assertEquals ( array ( 
				"DELETE FROM TABLEFinale WHERE champ1='10' AND champ2='resultat6' ;", 
				"DELETE FROM TABLEFinale WHERE champ1='another' AND champ2='resultat5' ;" ), $this->object ->getTableauSupprime () );
	}

	/**
	 * @covers comparaison_resultat_sql::synchro_table
	 */
	public function testSynchro_table_egaux() {
		$tableau_ref = array ( 
				array ( 
						"champ1" => "", 
						"champ2" => "resultat1" ), 
				array ( 
						"champ1" => NULL, 
						"champ2" => "resultat2" ), 
				array ( 
						"champ1" => 10, 
						"champ2" => "resultat3" ), 
				array ( 
						"champ1" => "texte complet", 
						"champ2" => "resultat4" ) );
		$tableau_final = array ( 
				array ( 
						"champ1" => "", 
						"champ2" => "resultat1" ), 
				array ( 
						"champ1" => NULL, 
						"champ2" => "resultat2" ), 
				array ( 
						"champ1" => 10, 
						"champ2" => "resultat3" ), 
				array ( 
						"champ1" => "texte complet", 
						"champ2" => "resultat4" ) );
		$this ->assertSame ( $this->object, $this->object ->synchro_table ( $tableau_ref, $tableau_final, "TABLEFinale", array ( 
				"champ1", 
				"champ2" ) ) );
		$this ->assertEquals ( array (), $this->object ->getTableauAjoute () );
		$this ->assertEquals ( array (), $this->object ->getTableauSupprime () );
	}
}
