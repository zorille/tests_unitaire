<?php
namespace Zorille\framework;
use \Exception as Exception;
use \PDOStatement as PDOStatement;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-26 at 11:37:57.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class gestion_definition_tableTest extends MockedListeOptions {
	/**
     * @var gestion_definition_table
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = new gestion_definition_table ( false, "TESTS gestion_definition_table" );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	private function _prepareDonnees() {
		$this->object ->setTable ( "REEL_NAME", "VIRTUAL_TABLE_NAME" );
		$this->object ->setChamp ( "REEL_CHAMP", "VIRTUAL_CHAMP", "VIRTUAL_TABLE_NAME", "text" );
		$this->object ->setChamp ( "REEL_CHAMP2", "VIRTUAL_CHAMP2", "VIRTUAL_TABLE_NAME", "numeric" );
		$this->object ->setChamp ( "REEL_CHAMP3", "VIRTUAL_CHAMP3", "VIRTUAL_TABLE_NAME", "date" );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::fabrique_select
	 */
	public function testFabrique_select_full() {
		$this ->_prepareDonnees ();
		$select = array ();
		$this ->assertSame ( $this->object, $this->object ->fabrique_select ( $select, "VIRTUAL_TABLE_NAME" ) );
		$this ->assertEquals ( array ( 
				'REEL_NAME.`REEL_CHAMP`', 
				'REEL_NAME.`REEL_CHAMP2`', 
				'REEL_NAME.`REEL_CHAMP3`' ), $select );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::fabrique_select
	 */
	public function testFabrique_select_withOtherSelect() {
		$this ->_prepareDonnees ();
		$select = array ( 
				"OTHER_SELECT_CHAMP" );
		$this ->assertSame ( $this->object, $this->object ->fabrique_select ( $select, "VIRTUAL_TABLE_NAME" ) );
		$this ->assertEquals ( array ( 
				"OTHER_SELECT_CHAMP", 
				'REEL_NAME.`REEL_CHAMP`', 
				'REEL_NAME.`REEL_CHAMP2`', 
				'REEL_NAME.`REEL_CHAMP3`' ), $select );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::fabrique_select
	 */
	public function testFabrique_select_1champ() {
		$this ->_prepareDonnees ();
		$select = array ();
		$this ->assertSame ( $this->object, $this->object ->fabrique_select ( $select, "VIRTUAL_TABLE_NAME", "VIRTUAL_CHAMP2" ) );
		$this ->assertEquals ( array ( 
				'REEL_NAME.`REEL_CHAMP2`' ), $select );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::fabrique_select
	 */
	public function testFabrique_select_1champAvecAS() {
		$this ->_prepareDonnees ();
		$select = array ();
		$this ->assertSame ( $this->object, $this->object ->fabrique_select ( $select, "VIRTUAL_TABLE_NAME", "VIRTUAL_CHAMP2", "TEST_AS" ) );
		$this ->assertEquals ( array ( 
				"REEL_NAME.`REEL_CHAMP2` AS 'TEST_AS'" ), $select );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::fabrique_from
	 */
	public function testfabrique_from_full() {
		$this ->_prepareDonnees ();
		$from = array ();
		$this ->assertSame ( $this->object, $this->object ->fabrique_from ( $from, "VIRTUAL_TABLE_NAME" ) );
		$this ->assertEquals ( array ( 
				'REEL_NAME' ), $from );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::fabrique_from
	 */
	public function testfabrique_from_unknow_table() {
		$this ->_prepareDonnees ();
		$from = array ();
		$this ->assertSame ( $this->object, $this->object ->fabrique_from ( $from, "TABLE1" ) );
		$this ->assertEquals ( array ( 
				'TABLE1' ), $from );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::fabrique_from
	 */
	public function testfabrique_from_withOtherFrom() {
		$this ->_prepareDonnees ();
		$from = array ( 
				"OTHER_FROM" );
		$this ->assertSame ( $this->object, $this->object ->fabrique_from ( $from, "VIRTUAL_TABLE_NAME" ) );
		$this ->assertEquals ( array ( 
				"OTHER_FROM", 
				'REEL_NAME' ), $from );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::fabrique_from_jointure
	 */
	public function testfabrique_from_jointure_full() {
		$this ->_prepareDonnees ();
		$from = array ();
		$this ->assertSame ( $this->object, $this->object ->fabrique_from_jointure ( $from, "VIRTUAL_TABLE_NAME", "VIRTUAL_CHAMP", "VIRTUAL_TABLE_NAME", "VIRTUAL_CHAMP2" ) );
		$this ->assertEquals ( array ( 
				array ( 
						'table' => 'REEL_NAME', 
						'champ1' => 'REEL_NAME.`REEL_CHAMP`', 
						'champ2' => 'REEL_NAME.`REEL_CHAMP2`', 
						'type' => 'BOTH' ) ), $from );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::fabrique_where
	 */
	public function testfabrique_where_full() {
		$this ->_prepareDonnees ();
		$where = array ();
		$this ->assertSame ( $this->object, $this->object ->fabrique_where ( $where, "VIRTUAL_TABLE_NAME", "VIRTUAL_CHAMP", "valeur" ) );
		$this ->assertEquals ( array ( 
				"REEL_NAME.`REEL_CHAMP`='valeur'" ), $where );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::fabrique_set
	 */
	public function testfabrique_setFull() {
		$this ->_prepareDonnees ();
		$set = array ();
		$this ->assertSame ( $this->object, $this->object ->fabrique_set ( $set, "VIRTUAL_TABLE_NAME", "VIRTUAL_CHAMP", "valeur" ) );
		$this ->assertEquals ( array ( 
				"REEL_NAME.`REEL_CHAMP`='valeur'" ), $set );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::prepare_valeur_update
	 */
	public function testprepare_valeur_update_full() {
		$this ->_prepareDonnees ();
		$set = array ();
		$this ->assertSame ( $this->object, $this->object ->prepare_valeur_update ( $set, "VIRTUAL_TABLE_NAME", "VIRTUAL_CHAMP", "valeur" ) );
		$this ->assertEquals ( array ( 
				"REEL_NAME.`REEL_CHAMP`='valeur'" ), $set );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::fabrique_order_by
	 */
	public function testfabrique_order_by_ASC() {
		$this ->_prepareDonnees ();
		$this ->assertEquals ( array ( 
				'type' => ' ASC', 
				'champ' => 'LCASE(REEL_NAME.`REEL_CHAMP`)' ), $this->object ->fabrique_order_by ( "VIRTUAL_CHAMP", "VIRTUAL_TABLE_NAME", "LCASE" ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::fabrique_order_by
	 */
	public function testfabrique_order_by_DESC() {
		$this ->_prepareDonnees ();
		$this ->assertEquals ( array ( 
				'type' => ' DESC', 
				'champ' => 'LCASE(REEL_NAME.`REEL_CHAMP`)' ), $this->object ->fabrique_order_by ( "VIRTUAL_CHAMP DESC", "VIRTUAL_TABLE_NAME" ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::retrouve_type_order
	 */
	public function testretrouve_type_order_default() {
		$this ->assertEquals ( ' ASC', $this->object ->retrouve_type_order ( " ?????" ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::retrouve_type_order
	 */
	public function testretrouve_type_order_ASC() {
		$this ->assertEquals ( ' ASC', $this->object ->retrouve_type_order ( " ASC" ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::retrouve_type_order
	 */
	public function testretrouve_type_order_DESC() {
		$this ->assertEquals ( ' DESC', $this->object ->retrouve_type_order ( " DESC" ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::requete_select_standard
	 */
	public function testRequete_select_standard() {
		$PDOStatement = $this ->createMock('PDOStatement' );
		$PDO = $this ->createMock('\PDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'query' ) 
			->will ( $this ->returnValue ( $PDOStatement ) );
		$PDO_local = $this ->createMock('Zorille\framework\PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this->object ->setDbSelected ( true );
		$this ->_prepareDonnees ();
		$this->object ->setRenvoiePDO ( true );
		
		$this ->assertInstanceOf ( 'PDOStatement', $this->object ->requete_select_standard ( "VIRTUAL_TABLE_NAME", array ( 
				"VIRTUAL_CHAMP" => "!test", 
				"VIRTUAL_CHAMP2" => "10" ), "VIRTUAL_CHAMP ASC", false ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::requete_select_standard
	 */
	public function testRequete_select_standard_defaut() {
		$PDOStatement = $this ->createMock('PDOStatement' );
		$PDO = $this ->createMock('\PDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'query' ) 
			->will ( $this ->returnValue ( $PDOStatement ) );
		$PDO_local = $this ->createMock('Zorille\framework\PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this->object ->setDbSelected ( true );
		$this ->_prepareDonnees ();
		$this->object ->setRenvoiePDO ( true );
		
		$this ->assertInstanceOf ( 'PDOStatement', $this->object ->requete_select_standard ( "TABLE1", array () ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::requete_insert_standard
	 */
	public function testRequete_insert_standard() {
		$PDOStatement = $this ->createMock('PDOStatement' );
		$PDOStatement ->expects ( $this ->any () ) 
			->method ( 'rowCount' ) 
			->will ( $this ->returnValue ( 1 ) );
		$PDO = $this ->createMock('\PDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'query' ) 
			->will ( $this ->returnValue ( $PDOStatement ) );
		$PDO_local = $this ->createMock('Zorille\framework\PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this->object ->setDbSelected ( true );
		$this ->_prepareDonnees ();
		
		$this ->assertEquals ( 1, $this->object ->requete_insert_standard ( "VIRTUAL_TABLE_NAME", array ( 
				"VIRTUAL_CHAMP" => "test2", 
				"VIRTUAL_CHAMP2" => "100" ) ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::requete_update_standard
	 */
	public function testRequete_update_standard() {
		$PDOStatement = $this ->createMock('PDOStatement' );
		$PDOStatement ->expects ( $this ->any () ) 
			->method ( 'rowCount' ) 
			->will ( $this ->returnValue ( 5 ) );
		$PDO = $this ->createMock('\PDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'query' ) 
			->will ( $this ->returnValue ( $PDOStatement ) );
		$PDO_local = $this ->createMock('Zorille\framework\PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this->object ->setDbSelected ( true );
		$this ->_prepareDonnees ();
		
		$this ->assertEquals ( 5, $this->object ->requete_update_standard ( "VIRTUAL_TABLE_NAME", array ( 
				"VIRTUAL_CHAMP" => "test3" ), array ( 
				"VIRTUAL_CHAMP2" => "!100" ) ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::requete_delete_standard
	 */
	public function testRequete_delete_standard() {
		$PDOStatement = $this ->createMock('PDOStatement' );
		$PDOStatement ->expects ( $this ->any () ) 
			->method ( 'rowCount' ) 
			->will ( $this ->returnValue ( 5 ) );
		$PDO = $this ->createMock('\PDO' );
		$PDO ->expects ( $this ->any () ) 
			->method ( 'query' ) 
			->will ( $this ->returnValue ( $PDOStatement ) );
		$PDO_local = $this ->createMock('Zorille\framework\PDO_local' );
		$PDO_local ->expects ( $this ->any () ) 
			->method ( 'getPDOConnexion' ) 
			->will ( $this ->returnValue ( $PDO ) );
		$this->object ->setDbConnexion ( $PDO_local );
		$this->object ->setDbSelected ( true );
		$this ->_prepareDonnees ();
		
		$this ->assertEquals ( 5, $this->object ->requete_delete_standard ( "VIRTUAL_TABLE_NAME", array ( 
				"VIRTUAL_CHAMP" => "!test3" ) ) );
	}

	/**
     * @covers Zorille\framework\gestion_definition_table::renvoi_table
     */
	public function testrenvoi_table_false() {
		$this ->assertFalse ( $this->object ->renvoi_table ( 'TABLE1' ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::renvoi_table
	 */
	public function testrenvoi_table() {
		$this->object ->setTable ( "REEL_NAME", "VIRTUAL_TABLE_NAME" );
		$this ->assertEquals ( "REEL_NAME", $this->object ->renvoi_table ( 'VIRTUAL_TABLE_NAME' ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::setTable
	 */
	public function testSetTable() {
		$this ->assertSame ( $this->object, $this->object ->setTable ( "REEL_NAME", "VIRTUAL_TABLE_NAME" ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::renvoi_donnees_champ
	 */
	public function testrenvoi_donnees_champ_false() {
		$this ->assertFalse ( $this->object ->renvoi_donnees_champ ( 'TABLE1', 'CHAMP1' ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::renvoi_donnees_champ
	 */
	public function testrenvoi_donnees_champ() {
		$this ->_prepareDonnees ();
		$this ->assertEquals ( array ( 
				'nom' => 'REEL_NAME.`REEL_CHAMP`', 
				'nom_sans_table' => '`REEL_CHAMP`', 
				'type' => 'text', 
				'as' => 'VIRTUAL_CHAMP' ), $this->object ->renvoi_donnees_champ ( 'VIRTUAL_TABLE_NAME', 'VIRTUAL_CHAMP' ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::setChamp
	 */
	public function testSetChamp() {
		$this->object ->setTable ( "REEL_NAME", "VIRTUAL_TABLE_NAME" );
		
		$this ->assertSame ( $this->object, $this->object ->setChamp ( "REEL_CHAMP", "VIRTUAL_CHAMP", "VIRTUAL_TABLE_NAME", "text" ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::renvoi_donnees_table
	 */
	public function testrenvoi_donnees_table_false() {
		$this ->assertFalse ( $this->object ->renvoi_donnees_table ( 'TABLE1' ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::renvoi_donnees_table
	 */
	public function testrenvoi_donnees_table() {
		$this ->_prepareDonnees ();
		$this ->assertEquals ( 
				array ( 
							"VIRTUAL_CHAMP" => array ( 
									'nom' => 'REEL_NAME.`REEL_CHAMP`', 
									'nom_sans_table' => '`REEL_CHAMP`', 
									'type' => 'text', 
									'as' => 'VIRTUAL_CHAMP' ), 
							"VIRTUAL_CHAMP2" => array ( 
									'nom' => 'REEL_NAME.`REEL_CHAMP2`', 
									'nom_sans_table' => '`REEL_CHAMP2`', 
									'type' => 'numeric', 
									'as' => 'VIRTUAL_CHAMP2' ), 
							"VIRTUAL_CHAMP3" => array ( 
									'nom' => 'REEL_NAME.`REEL_CHAMP3`', 
									'nom_sans_table' => '`REEL_CHAMP3`', 
									'type' => 'date', 
									'as' => 'VIRTUAL_CHAMP3' ) ), 
					$this->object ->renvoi_donnees_table ( 'VIRTUAL_TABLE_NAME' ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::renvoi_as
	 */
	public function testrenvoi_as_false() {
		$this ->assertFalse ( $this->object ->renvoi_as ( 'TABLE1', 'CHAMP1' ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::renvoi_as
	 */
	public function testrenvoi_as() {
		$this ->_prepareDonnees ();
		$this ->assertEquals ( "VIRTUAL_CHAMP", $this->object ->renvoi_as ( 'VIRTUAL_TABLE_NAME', "VIRTUAL_CHAMP" ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::renvoi_type
	 */
	public function testrenvoi_type_false() {
		$this ->assertEquals ( "text", $this->object ->renvoi_type ( 'TABLE1', 'CHAMP1' ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::renvoi_type
	 */
	public function testrenvoi_type() {
		$this ->_prepareDonnees ();
		$this ->assertEquals ( "text", $this->object ->renvoi_type ( 'VIRTUAL_TABLE_NAME', "VIRTUAL_CHAMP" ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::renvoi_liste_champs
	 */
	public function testrenvoi_liste_champs_defaut() {
		$this ->assertEquals ( array ( 
				"*" ), $this->object ->renvoi_liste_champs ( 'TABLE1' ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::renvoi_liste_champs
	 */
	public function testrenvoi_liste_champs_complet() {
		$this ->_prepareDonnees ();
		$this ->assertEquals ( array ( 
				'VIRTUAL_CHAMP' => 'REEL_NAME.`REEL_CHAMP`', 
				'VIRTUAL_CHAMP2' => 'REEL_NAME.`REEL_CHAMP2`', 
				'VIRTUAL_CHAMP3' => 'REEL_NAME.`REEL_CHAMP3`' ), $this->object ->renvoi_liste_champs ( 'VIRTUAL_TABLE_NAME' ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::renvoi_champ
	 */
	public function testrenvoi_champ_Exception() {
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(TESTS gestion_definition_table) Champ CHAMP1 introuvable dans la definition de la table TABLE1' );
		$this->object ->renvoi_champ ( 'TABLE1', 'CHAMP1' );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::renvoi_champ
	 */
	public function testrenvoi_champ() {
		$this ->_prepareDonnees ();
		$this ->assertEquals ( 'REEL_NAME.`REEL_CHAMP`', $this->object ->renvoi_champ ( 'VIRTUAL_TABLE_NAME', "VIRTUAL_CHAMP" ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::renvoi_champ_sans_table
	 */
	public function testrenvoi_champ_sans_table_false() {
		$this ->assertFalse ( $this->object ->renvoi_champ_sans_table ( 'TABLE1', 'CHAMP1' ) );
	}

	/**
	 * @covers Zorille\framework\gestion_definition_table::renvoi_champ_sans_table
	 */
	public function testrenvoi_champ_sans_table() {
		$this ->_prepareDonnees ();
		$this ->assertEquals ( "`REEL_CHAMP`", $this->object ->renvoi_champ_sans_table ( 'VIRTUAL_TABLE_NAME', "VIRTUAL_CHAMP" ) );
	}
}
