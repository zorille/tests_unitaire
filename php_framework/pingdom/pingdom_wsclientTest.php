<?php
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-25 at 16:53:15.
 */
class pingdom_wsclientTest extends MockedListeOptions {
	/**
     * @var pingdom_wsclient
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		
		$utilisateurs = $this ->createMock ( "utilisateurs" );
		$utilisateurs ->expects ( $this ->any () ) 
			->method ( 'setUsername', 'setPassword' ) 
			->will ( $this ->returnSelf () );
		$gestion_connexion_url = $this ->createMock ( "gestion_connexion_url" );
		$gestion_connexion_url ->expects ( $this ->any () ) 
			->method ( 'getObjetUtilisateurs' ) 
			->will ( $this ->returnValue ( $utilisateurs ) );
		$pingdom_datas = $this ->createMock ( "pingdom_datas" );
		$curl = $this ->createMock ( "curl" );
		
		$this->object = new pingdom_wsclient ( false, "pingdom_wsclient" );
		$this->object ->setListeOptions ( $this ->getListeOption () ) 
			->setGestionConnexionUrl ( $gestion_connexion_url ) 
			->setObjetpingdomDatas ( $pingdom_datas ) 
			->setObjetCurl ( $curl );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers pingdom_wsclient::prepare_connexion
     */
	public function testPrepare_connexion_exception1() {
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'retrouve_connexion_params', 'prepare_prepend_url' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'getPrependUrl' ) 
			->will ( $this ->returnValue ( "http://localhost:80" ) );
		$this->object ->getObjetpingdomDatas () 
			->method ( 'valide_presence_pingdom_data' ) 
			->will ( $this ->returnValue ( false ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(pingdom_wsclient) Aucune definition de pingdom pour NOM1' );
		$this->object ->prepare_connexion ( "NOM1" );
	}

	/**
	 * @covers pingdom_wsclient::prepare_connexion
	 */
	public function testPrepare_connexion_exception2() {
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'retrouve_connexion_params', 'prepare_prepend_url' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'getPrependUrl' ) 
			->will ( $this ->returnValue ( "http://localhost:80" ) );
		$this->object ->getObjetpingdomDatas () 
			->method ( 'valide_presence_pingdom_data' ) 
			->will ( $this ->returnValue ( array () ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(pingdom_wsclient) Il faut un username dans la liste des parametres pingdom' );
		$this->object ->prepare_connexion ( "NOM1" );
	}

	/**
	 * @covers pingdom_wsclient::prepare_connexion
	 */
	public function testPrepare_connexion_exception3() {
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'retrouve_connexion_params', 'prepare_prepend_url' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'getPrependUrl' ) 
			->will ( $this ->returnValue ( "http://localhost:80" ) );
		$this->object ->getObjetpingdomDatas () 
			->method ( 'valide_presence_pingdom_data' ) 
			->will ( $this ->returnValue ( array ( 
				"username" => "user" ) ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(pingdom_wsclient) Il faut un password dans la liste des parametres pingdom' );
		$this->object ->prepare_connexion ( "NOM1" );
	}

	/**
	 * @covers pingdom_wsclient::prepare_connexion
	 */
	public function testPrepare_connexion_exception4() {
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'retrouve_connexion_params', 'prepare_prepend_url' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'getPrependUrl' ) 
			->will ( $this ->returnValue ( "http://localhost:80" ) );
		$this->object ->getObjetpingdomDatas () 
			->method ( 'valide_presence_pingdom_data' ) 
			->will ( $this ->returnValue ( array ( 
				"username" => "user", 
				"password" => "pwd" ) ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(pingdom_wsclient) Il faut un App-Key dans la liste des parametres pingdom' );
		$this->object ->prepare_connexion ( "NOM1" );
	}

	/**
	 * @covers pingdom_wsclient::prepare_connexion
	 */
	public function testPrepare_connexion_exception5() {
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'retrouve_connexion_params', 'prepare_prepend_url' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'getPrependUrl' ) 
			->will ( $this ->returnValue ( "http://localhost:80" ) );
		$this->object ->getObjetpingdomDatas () 
			->method ( 'valide_presence_pingdom_data' ) 
			->will ( $this ->returnValue ( array ( 
				"username" => "user", 
				"password" => "pwd", 
				"App-Key" => "abcef" ) ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(pingdom_wsclient) Il faut une url dans la liste des parametres pingdom' );
		$this->object ->prepare_connexion ( "NOM1" );
	}

	/**
	 * @covers pingdom_wsclient::prepare_connexion
	 */
	public function testPrepare_connexion_valide() {
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'retrouve_connexion_params', 'prepare_prepend_url' ) 
			->will ( $this ->returnSelf () );
		$this->object ->getGestionConnexionUrl () 
			->expects ( $this ->any () ) 
			->method ( 'getPrependUrl' ) 
			->will ( $this ->returnValue ( "http://localhost:80" ) );
		$this->object ->getObjetpingdomDatas () 
			->method ( 'valide_presence_pingdom_data' ) 
			->will ( $this ->returnValue ( array ( 
				"username" => "user", 
				"password" => "pwd", 
				"App-Key" => "abcef", 
				"url" => "localhost" ) ) );
		
		$this ->assertSame ( $this->object, $this->object ->prepare_connexion ( "NOM1" ) );
	}

	/**
	 * @covers pingdom_wsclient::prepare_requete_json
	 */
	public function testprepare_requete_json_exception() {
		//$retour ["error"] ["statusdesc"] . " : " . $retour ["error"] ["errormessage"], $retour ["error"] ["statuscode"]
		$retour_json = '{"error":{"statusdesc":"STATUS","errormessage":"MESSAGE","statuscode":123}}';
		$this->object ->getObjetCurl ()
		->method ( 'send_curl' )
		->will ( $this ->returnValue ( $retour_json ) );
		
		$this ->expectException(Exception::class);
        $this->expectExceptionMessage( '(pingdom_wsclient) STATUS : MESSAGE' );
		$this->object ->prepare_requete_json ( "Read" ) ;
	}
	
	/**
	 * @covers pingdom_wsclient::prepare_requete_json
	 */
	public function testprepare_requete_json_dry_run() {
		$this->object ->getListeOptions()
		->method ( 'verifie_option_existe' )
		->will ( $this ->returnValue ( true ) );
		$this ->assertSame ( '', $this->object ->prepare_requete_json ( "Create" ) );
	}
	
	/**
	 * @covers pingdom_wsclient::prepare_requete_json
	 */
	public function testprepare_requete_json_valide1() {
		$this ->assertSame ( '', $this->object ->prepare_requete_json ( "Read" ) );
	}

	/**
	 * @covers pingdom_wsclient::prepare_requete_json
	 */
	public function testprepare_requete_json_valide2() {
		$retour_json = '{"response":"TEST2","traitement":"T2"}{"message":"","success":true,"return_code":0}';
		$this->object ->getObjetCurl () 
			->method ( 'send_curl' ) 
			->will ( $this ->returnValue ( $retour_json ) );
		$this ->assertSame ( array ( 
				'response' => 'TEST2', 
				'traitement' => 'T2', 
				'success' => true, 
				'return_code' => 0, 
				'message' => '' ), $this->object ->prepare_requete_json ( "Read" ) );
	}
}
