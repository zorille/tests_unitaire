<?php
namespace Zorille\framework;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-26 at 10:24:49.
 */
if (! defined ( '__DOCUMENT_ROOT__' )) {
	require_once $_SERVER ["PWD"] . '/prepare.php';
}
class forkTest extends MockedListeOptions {
	/**
     * @var fork
     */
	protected $object;

	/**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
	protected function setUp() {
		ob_start ();
		$this->object = new fork ( false, 'TESTS fork' );
	}

	/**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
	protected function tearDown() {
		ob_end_clean ();
	}

	/**
     * @covers Zorille\framework\fork::fork_local
     */
	public function testFork_local_0() {
		$this->object->setPid ( 10 );
		$this->assertEquals ( 0, $this->object->fork_local () );
	}

	/**
	 * @covers Zorille\framework\fork::fork_local
	 */
	public function testFork_local_1() {
		//le pere
		$pid_source = getmypid ();
		$code_fork = $this->object->fork_local ();
		$pid_final = getmypid ();
		if ($pid_source == $pid_final) {
			$this->assertEquals ( 1, $code_fork );
		} else {
			//le fils
			$this->assertEquals ( 2, $code_fork );
			exit ( 0 );
		}
	}

	/**
     * @covers Zorille\framework\fork::renvoi_code_retour
     */
	public function testrenvoi_code_retour_vide() {
		$this->assertEquals ( -1,  $this->object->renvoi_code_retour () );
	}
	
	/**
	 * @covers Zorille\framework\fork::renvoi_code_retour
	 */
	public function testrenvoi_code_retour() {
		$this->object->setCodeRetour("0");
		$this->assertEquals ( "0",  $this->object->renvoi_code_retour () );
	}

	/**
     * @covers Zorille\framework\fork::wait_children
     */
	public function testWait_children() {
		$this->object->fork_local ();
		$code_retour=$this->object->wait_children();
		if($code_retour==-1){
			//C'est le fils
			exit(0);
		}
		$this->assertEquals ( 0, $code_retour);
	}

	/**
     * @covers Zorille\framework\fork::wait_child_nohup
     * @todo   Implement testWait_child_nohup().
     */
	public function testWait_child_nohup() {
		$this->object->fork_local ();
		$code_retour=$this->object->wait_child_nohup();
		if($code_retour==-1){
			//C'est le fils
			exit(0);
		}
		$this->assertEquals ( 0, $code_retour);
	}
}
